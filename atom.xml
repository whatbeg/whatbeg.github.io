<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Whatbeg&#39;s blog</title>
  <subtitle>当你的才华撑不起你的野心时，就应该静下心来好好学习。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://whatbeg.com/"/>
  <updated>2017-04-14T11:23:10.239Z</updated>
  <id>http://whatbeg.com/</id>
  
  <author>
    <name>whatbeg</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SVM推导过程中的三个疑问</title>
    <link href="http://whatbeg.com/2017/04/13/svmlearning.html"/>
    <id>http://whatbeg.com/2017/04/13/svmlearning.html</id>
    <published>2017-04-13T13:10:06.000Z</published>
    <updated>2017-04-14T11:23:10.239Z</updated>
    
    <content type="html">&lt;p&gt;在形式化推导硬间隔（不允许分错）SVM分类器的时候，会做一些简化和转换，初看时并不那么好懂。最近又接触到SVM，所以从头到尾又学习了一遍。写下关于几个以前不太懂的疑问以及疑问的回答。&lt;/p&gt;
&lt;h2 id=&quot;为何令间隔为1？&quot;&gt;&lt;a href=&quot;#为何令间隔为1？&quot; class=&quot;headerlink&quot; title=&quot;为何令间隔为1？&quot;&gt;&lt;/a&gt;为何令间隔为1？&lt;/h2&gt;&lt;p&gt;在SVM中是以最大化分类间隔为目标的，间隔又分函数间隔和几何间隔。&lt;br&gt;函数间隔为： $\hat\gamma=y_if(x_i)=y_i(w^Tx_i+b)$&lt;br&gt;几何间隔为： $\gamma=\frac {y_if(x_i)} {||w||}$&lt;br&gt;函数间隔可以表征样本被分到某一类的置信度，比如说$y_i=+1$时，如果$w^Tx_i+b &amp;gt; 0$且很大，说明离分类边界越远，越有理由相信$x_i$真的是正类。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;成倍的增长$w,b$，分类超平面不变，几何间隔也不改变&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而我们优化通常是优化几何间隔，因为几何间隔在$w,b$成倍增长时，是不变的。&lt;br&gt;即优化问题转化为：$$max_{w,b} \frac {\hat\gamma} {||w||} \&lt;br&gt;s.t. y_i(w^Tx_i+b) = \hat\gamma_i \ge \hat\gamma$$&lt;/p&gt;
&lt;p&gt;设$\hat\gamma$为最小函数间隔,约束条件是任意给一个点，其函数间隔一定大于等于$\hat\gamma$，即最小函数间隔。&lt;br&gt;做一个变量替换$w’=w/{\hat\gamma}, b’=b/{\hat\gamma}$，代入原来的优化问题可得新的优化问题：&lt;br&gt;$$max_{w’,b’} \frac {1} {||w’||} \&lt;br&gt;s.t. y_i({w’}^Tx_i+b’) \ge 1$$&lt;br&gt;此时关于$w,b$的原问题等价成了新的$w’,b’$的新问题。能够这样转化的原因在于函数间隔的取值并不影响最优化问题的解。&lt;/p&gt;
&lt;h2 id=&quot;什么是拉格朗日对偶？&quot;&gt;&lt;a href=&quot;#什么是拉格朗日对偶？&quot; class=&quot;headerlink&quot; title=&quot;什么是拉格朗日对偶？&quot;&gt;&lt;/a&gt;什么是拉格朗日对偶？&lt;/h2&gt;&lt;p&gt;上述优化问题可以写为：&lt;br&gt;$$min \frac {1} {2}||w||^2 \&lt;br&gt;s.t. y_i({w’}^Tx_i+b’) \ge 1,i=1,2,..,m$$&lt;/p&gt;
&lt;p&gt;目标函数是二次的，约束是是线性的，这是一个凸二次规划问题，可以用QP求解。但是还可以通过拉格朗日对偶来解。&lt;br&gt;拉格朗日对偶解法即求解与原问题等价的对偶问题得到原问题的最优解。&lt;br&gt;采用拉格朗日乘子法，写出拉格朗日乘子式：&lt;br&gt;$$\mathcal{L}(w,b,\alpha)=\frac {1} {2}||w||^2 - \sum_{i=1}^n \alpha_i(y_i(w^Tx_i+b)-1)$$&lt;br&gt;令$$\theta(w)=max_{\alpha_i \ge 0}\mathcal{L}(w,b,\alpha)$$&lt;br&gt;可以看出，当$(y_i(w^Tx_i+b)-1)&amp;lt;0$时，即条件不满足时，由于$\alpha_i \ge 0$，所以后面一半（包括负号）是正的，当$\alpha_i$取得很大的时候，$\theta(w)$甚至可以取到无穷大；当条件满足时，后面一项是负的，所以$\theta(w)=max_{\alpha_i \ge 0}\mathcal{L}(w,b,\alpha)$最大就是$\frac {1} {2}||w||^2$。&lt;br&gt;所以做$\theta(w)$的目的就出来了，即&lt;br&gt;$\theta(w)=f(w) $ if w满足条件&lt;br&gt;$\theta(w)=\infty $ 否则&lt;br&gt;所以原问题$$min \frac {1} {2}||w||^2 \&lt;br&gt;s.t. y_i({w’}^Tx_i+b’) \ge 1,i=1,2,..,m$$&lt;br&gt;就可以通过拉格朗日乘子法换成无约束的等价的另一种表示&lt;br&gt;$$min_{w,b}\theta(w)=min_{w,b} max_{\alpha_i \ge 0}\mathcal{L}(w,b,\alpha)$$&lt;br&gt;设$p^\ast$为上述问题的最优解。&lt;br&gt;上述问题直接求解很难，所以交换一下min，max的顺序将其变成对偶问题&lt;br&gt;$$max_{\alpha_i \ge 0} min_{w,b} \mathcal{L}(w,b,\alpha)$$&lt;br&gt;最优解用$d^\ast$来表示。&lt;br&gt;转换为对偶问题后相对容易求解，要注意此时$d^\ast$并不一定等于$p^\ast$，(且&lt;br&gt;其实$d^\ast \le p^\ast$，直观的说就是“胖子里面最瘦的通常比瘦子里面最胖的要胖”，这也是有证明的)。即原问题的解并不一定等于对偶问题的解，如果等于，我们称之为强对偶(strong duality)，在满足一定条件的情况下，是可以达到强对偶的。&lt;br&gt;Slater条件： 存在严格满足约束条件的点。&lt;br&gt;如果原始问题是Convex的并且满足Slater条件的话，我们说它是强对偶的。Slater条件只是使强对偶成立的一种情况，事实上，非凸优化也可以是强对偶的。&lt;br&gt;通过强对偶成立时的一些性质，我们可以推出一些条件，比如&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/SVM5.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;h2 id=&quot;什么是KKT条件？&quot;&gt;&lt;a href=&quot;#什么是KKT条件？&quot; class=&quot;headerlink&quot; title=&quot;什么是KKT条件？&quot;&gt;&lt;/a&gt;什么是KKT条件？&lt;/h2&gt;&lt;p&gt;上述这些就是所谓的KKT条件。&lt;br&gt;任何强对偶问题都满足KKT条件。&lt;br&gt;当原始问题可微且是凸优化问题时，KKT条件升级成充分必要条件。&lt;br&gt;前两条说明达到最优解时，拉格朗日函数对w,b求偏导为0&lt;br&gt;第三条称为complementary slackness（互补松弛），即我们的&lt;br&gt;$$\alpha_i(y_i(w^Tx_i+b)-1)=0$$&lt;br&gt;那么为什么呢？做下列推导，假设$x^\ast,\alpha^\ast$分别为原问题和对偶问题的极值点：&lt;br&gt;$$f_0(x^\ast)=min_{w,b} \mathcal{L}(w,b,\alpha) \&lt;br&gt;=min_x (f_0(x) - \sum_{i=1}^n \alpha_i(y_i(w^Tx_i+b)-1)) \&lt;br&gt;\le f_0(x^\ast)-\sum_{i=1}^n \alpha_i^\ast(y_i(w^Tx^\ast_i+b)-1) \&lt;br&gt;\le f_0(x^\ast)$$&lt;br&gt;由于等式两遍相等，所以可以换成等号，由于第三行，且$\sum_{i=1}^n \alpha_i^\ast(y_i(w^Tx^\ast_i+b)-1)$非负，所以推出$ \alpha_i^\ast(y_i(w^Tx^\ast_i+b)-1)=0, i=1,2,…,m$&lt;br&gt;即当$\alpha_i&amp;gt;0$时，$x_i$正在分类间隔上，称为支持向量，而不在分类间隔上的样本有$\alpha_i=0$&lt;br&gt;后两条为原来的约束条件。图中的$g_i(w^\ast)$即我们的$(1-y_i({w^\ast}^Tx_i+b^\ast))$。&lt;/p&gt;
&lt;p&gt;满足了KKT条件，就可以认为对偶问题的最优解就是原问题的最优解，这样我们就可以通过求解对偶问题来求解原来的优化问题。&lt;br&gt;By the way，SVM的对偶问题为：&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/SVM6.png&quot; alt=&quot;来自July&quot;&gt; &lt;/center&gt;

&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;所以总结一下，令几何间隔为1是为了保证优化问题等价的情况下，尽可能地简化问题。使用拉格朗日对偶是因为原问题不好解，所以转化成对偶问题，而当问题满足KKT条件的时候，这个对偶问题的解就是原问题的解，从而更好地得到最优解。&lt;br&gt;简单梳理了一下这三个问题，知识浅薄，如果有不对的希读者不吝指出。&lt;/p&gt;
&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www2.isye.gatech.edu/~nemirovs/Lect_ModConvOpt.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lectures on Modern Convex Optimization &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cs229.stanford.edu/notes/cs229-notes3.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Andrew Ng. CS229. Note3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/90zeng/p/Lagrange_duality.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简易解说拉格朗日对偶（Lagrange duality）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/liqizhou/archive/2012/05/11/2495689.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SVM(二）拉格朗日对偶问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.pluskid.org/?p=702&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;支持向量机：Duality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/v_july_v/article/details/7624837&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;支持向量机通俗导论（理解SVM的三层境界）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《机器学习》&lt;/li&gt;
&lt;li&gt;《统计学习方法》&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在形式化推导硬间隔（不允许分错）SVM分类器的时候，会做一些简化和转换，初看时并不那么好懂。最近又接触到SVM，所以从头到尾又学习了一遍。写下关于几个以前不太懂的疑问以及疑问的回答。&lt;/p&gt;
&lt;h2 id=&quot;为何令间隔为1？&quot;&gt;&lt;a href=&quot;#为何令间隔为1？&quot; cla
    
    </summary>
    
      <category term="机器学习 | Mac.Learning" scheme="http://whatbeg.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-Mac-Learning/"/>
    
    
      <category term="机器学习" scheme="http://whatbeg.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning读书笔记（2）【深度学习的数学基础摘要】(未竟稿)</title>
    <link href="http://whatbeg.com/2017/04/13/deeplearningbook-02.html"/>
    <id>http://whatbeg.com/2017/04/13/deeplearningbook-02.html</id>
    <published>2017-04-13T08:12:46.000Z</published>
    <updated>2017-04-13T08:13:48.114Z</updated>
    
    <content type="html">&lt;p&gt;深度学习需要的数学基础同机器学习所需的数学基础类似，包括三大块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线性代数&lt;/li&gt;
&lt;li&gt;概率论与数理统计&lt;/li&gt;
&lt;li&gt;信息论基础&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分三部分摘要如下，&lt;/p&gt;
&lt;h2 id=&quot;线性代数&quot;&gt;&lt;a href=&quot;#线性代数&quot; class=&quot;headerlink&quot; title=&quot;线性代数&quot;&gt;&lt;/a&gt;线性代数&lt;/h2&gt;&lt;h3 id=&quot;Scalar-Vectors-Matrices-Tensors的概念&quot;&gt;&lt;a href=&quot;#Scalar-Vectors-Matrices-Tensors的概念&quot; class=&quot;headerlink&quot; title=&quot;Scalar, Vectors, Matrices, Tensors的概念&quot;&gt;&lt;/a&gt;Scalar, Vectors, Matrices, Tensors的概念&lt;/h3&gt;&lt;p&gt;Scalar: 标量，可以看成一个数&lt;br&gt;Vector: 向量，可以看成一个一维数组&lt;br&gt;Matrix: 矩阵，可以看成二维数组&lt;br&gt;Tensor: 张量，三维或三维以上的数组的统称，维度不定&lt;/p&gt;
&lt;p&gt;很多时候我们处理的都是超过2维的数组，这时候叫矩阵(Matrix)又不太合适，因为一般提到矩阵都会想到二维的矩阵，所以采用Tensor来统一表示不定维的数组。这也是几乎所有深度学习框架的基本数据结构。”Tensorflow”名字中就包含了”Tensor”，于是向量可以称为1-D Tensor，一维张量，矩阵可以称为二维张量。&lt;/p&gt;
&lt;p&gt;这样，深度学习中包括数据，梯度，权重等等都可以用某维度的Tensor来表示了，底层数据结构的统一为上层编程带来了极大的方便。&lt;/p&gt;
&lt;h3 id=&quot;矩阵的基本操作&quot;&gt;&lt;a href=&quot;#矩阵的基本操作&quot; class=&quot;headerlink&quot; title=&quot;矩阵的基本操作&quot;&gt;&lt;/a&gt;矩阵的基本操作&lt;/h3&gt;&lt;p&gt;矩阵转置，相乘，矩阵与向量相乘&lt;br&gt;单位矩阵与逆矩阵&lt;br&gt;线性相关性&lt;br&gt;展开(Span)，一个向量集的展开定义为向量集中通过向量的线性组合能够得到的点&lt;/p&gt;
&lt;h3 id=&quot;奇异-Singular-矩阵和非奇异矩阵&quot;&gt;&lt;a href=&quot;#奇异-Singular-矩阵和非奇异矩阵&quot; class=&quot;headerlink&quot; title=&quot;奇异(Singular)矩阵和非奇异矩阵&quot;&gt;&lt;/a&gt;奇异(Singular)矩阵和非奇异矩阵&lt;/h3&gt;&lt;p&gt;奇异矩阵：存在线性相关的列的方阵或者行列式为0的方阵称为奇异矩阵&lt;br&gt;奇异矩阵不可逆&lt;br&gt;若n阶方阵A的行列式不为零，即$|A|≠0$，则称A为非奇异矩阵或满秩矩阵，存在逆矩阵&lt;/p&gt;
&lt;p&gt;要注意的是，即使A不是方阵或者A是方阵但是奇异，也是有可能解方程$Ax=b$的，只是不能通过求逆矩阵$A^{-1}$从而$x=A^{-1}b$来解而已。&lt;br&gt;线性方程组$Ax=b$有解的充分必要条件是: 增广矩阵的秩等于系数矩阵的秩，即$r(A,b) = r(A)$&lt;/p&gt;
&lt;h3 id=&quot;范数-Norm&quot;&gt;&lt;a href=&quot;#范数-Norm&quot; class=&quot;headerlink&quot; title=&quot;范数(Norm)&quot;&gt;&lt;/a&gt;范数(Norm)&lt;/h3&gt;&lt;p&gt;范数的作用是度量向量的大小，将向量映射为非负实数&lt;br&gt;$L^p$范数定义为：&lt;br&gt;$$||x||_p=(\Sigma_i {|x_i|^p})^{\frac 1 p}$$&lt;/p&gt;
&lt;p&gt;在正则化中常常用到范数，主要用到1-范数和2-范数。&lt;/p&gt;
&lt;p&gt;$x^{\top}x=||x||_2^2$&lt;/p&gt;
&lt;p&gt;Frobenius Norms:  $||A||_{F}=\sqrt{\Sigma_{i,j}A_{i,j}^2}$&lt;/p&gt;
&lt;p&gt;向量点积： $x^{\top}y=||x||_2||y||_2cos\theta$&lt;/p&gt;
&lt;h3 id=&quot;特殊矩阵&quot;&gt;&lt;a href=&quot;#特殊矩阵&quot; class=&quot;headerlink&quot; title=&quot;特殊矩阵&quot;&gt;&lt;/a&gt;特殊矩阵&lt;/h3&gt;&lt;p&gt;对角矩阵&lt;br&gt;实对称矩阵及其性质：&lt;br&gt;（1）A的特征值为实数，且其特征向量为实向量&lt;br&gt;（2）A的不同特征值对应的特征向量必定正交&lt;br&gt;（3）A一定有n个线性无关的特征向量，从而A相似于对角矩阵&lt;br&gt;正交矩阵的性质： $A^{-1}=A^{\top}$&lt;/p&gt;
&lt;h3 id=&quot;特征值分解&quot;&gt;&lt;a href=&quot;#特征值分解&quot; class=&quot;headerlink&quot; title=&quot;特征值分解&quot;&gt;&lt;/a&gt;特征值分解&lt;/h3&gt;&lt;p&gt;特征值分解的思想类似于因式分解的思想，对于一个数，我们想要分析它的性质，可能直接看看不出什么来，但是可以把它因式分解一下，再来分析。比如180，$180 = 2 \times 2 \times 3 \times 3 \times 5=2^2 \times 3^2 \times 5^1$，这样我们可以知道，180是2,3,5的倍数，也是6的倍数，15的倍数，等等，进而分析其它性质。&lt;br&gt;矩阵分解也是如此，面对一个复杂的矩阵，我们可能毫无头绪，但是将其分解为两个或者多个矩阵的乘积，我们可能就能收获很多的性质。&lt;br&gt;特征值分解 $A=Q \Lambda Q^{\top}$，将矩阵分解为特征值和特征向量，Q是由A的特征向量组成的正交矩阵，而$\Lambda$则为特征值组成的对角矩阵，$\Lambda_{i,i}$ 对应着 $Q_{:,i}$。&lt;/p&gt;
&lt;h3 id=&quot;奇异值分解-Singular-Value-Decomposition&quot;&gt;&lt;a href=&quot;#奇异值分解-Singular-Value-Decomposition&quot; class=&quot;headerlink&quot; title=&quot;奇异值分解(Singular Value Decomposition)&quot;&gt;&lt;/a&gt;奇异值分解(Singular Value Decomposition)&lt;/h3&gt;&lt;p&gt;$A=UDV^{-1}$，U称为左奇异向量，为$AA^{\top}$的特征向量，V称为右奇异向量，为$A^{\top}A$的特征向量。&lt;br&gt;非0奇异值是$A^{\top}A$的特征值的开根号&lt;/p&gt;
&lt;h3 id=&quot;Moore-Penrose-Pseudoinverse&quot;&gt;&lt;a href=&quot;#Moore-Penrose-Pseudoinverse&quot; class=&quot;headerlink&quot; title=&quot;*Moore-Penrose Pseudoinverse&quot;&gt;&lt;/a&gt;*Moore-Penrose Pseudoinverse&lt;/h3&gt;&lt;h3 id=&quot;迹运算符-Trace&quot;&gt;&lt;a href=&quot;#迹运算符-Trace&quot; class=&quot;headerlink&quot; title=&quot;迹运算符(Trace)&quot;&gt;&lt;/a&gt;迹运算符(Trace)&lt;/h3&gt;&lt;p&gt;$ Tr(A) = {\Sigma}_i A_{i,i} $&lt;br&gt;迹运算符有许多性质，比如循环不变性等等&lt;/p&gt;
&lt;h3 id=&quot;行列式&quot;&gt;&lt;a href=&quot;#行列式&quot; class=&quot;headerlink&quot; title=&quot;行列式&quot;&gt;&lt;/a&gt;行列式&lt;/h3&gt;&lt;p&gt;行列式的绝对值度量了矩阵扩展或者空间收缩所包含的操作多少的度量。&lt;/p&gt;
&lt;h2 id=&quot;概率论&quot;&gt;&lt;a href=&quot;#概率论&quot; class=&quot;headerlink&quot; title=&quot;概率论&quot;&gt;&lt;/a&gt;概率论&lt;/h2&gt;&lt;p&gt;概率论也是很多领域包括计算机科学尤其是机器学习这块的基础学科。一般的计算机程序或者问题的求解是没有随机性的，按照一个确定的算法来即可。但是在机器学习中，经常会遇到不确定的量，比如说数据的采集，可能是随机采集的，或者说数据中包含随机噪声等等，而概率论则是量化各种不确定性的手段。&lt;br&gt;可以说，几乎所有的活动都要求参与者具有分析不确定性的出现的一些能力。&lt;br&gt;不确定性有三种可能的来源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统固有的随机性&lt;br&gt;比如说打牌的游戏，我们都会假设洗牌确实是能够将牌的顺序变的随机。&lt;/li&gt;
&lt;li&gt;不完备的观察&lt;br&gt;即使是一个确定的系统，当我们不能够观察到系统中所有驱动系统行为的变量时，也是会呈现出随机性的。&lt;/li&gt;
&lt;li&gt;不完备的建模&lt;br&gt;我们有时候建模时无法完美地使用所有信息，从而必须丢弃一些观察到的信息，丢弃的信息就会造成模型预测的不确定性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在概率论领域，有两种学派，一种是频率学派，一种是贝叶斯学派。关于这两个学派的观点，可以参看&lt;a href=&quot;https://www.zhihu.com/question/20587681&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;贝叶斯学派与频率学派有何不同？&lt;/a&gt;等。&lt;/p&gt;
&lt;h3 id=&quot;随机变量&quot;&gt;&lt;a href=&quot;#随机变量&quot; class=&quot;headerlink&quot; title=&quot;随机变量&quot;&gt;&lt;/a&gt;随机变量&lt;/h3&gt;&lt;p&gt;简单来说，随机变量就是&lt;strong&gt;能够随机的取不同值的变量&lt;/strong&gt;，又分为连续随机变量和离散随机变量，离散随机变量包含有限个或者可数无穷个状态，状态不必是整数。而连续随机变量则与一个实值相关联。&lt;/p&gt;
&lt;h3 id=&quot;概率分布&quot;&gt;&lt;a href=&quot;#概率分布&quot; class=&quot;headerlink&quot; title=&quot;概率分布&quot;&gt;&lt;/a&gt;概率分布&lt;/h3&gt;&lt;p&gt;一个或一组随机变量取到每个可能状态的可能性的描述即为概率分布。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;离散随机变量的概率分布称为概率质量函数(PMF, Probablity Mass Function)&lt;/li&gt;
&lt;li&gt;连续随机变量的概率分布称为概率密度函数(PDF, Probablity Density Function)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;边缘概率&quot;&gt;&lt;a href=&quot;#边缘概率&quot; class=&quot;headerlink&quot; title=&quot;边缘概率&quot;&gt;&lt;/a&gt;边缘概率&lt;/h3&gt;&lt;p&gt;原来变量集合的一个子集上的概率分布。&lt;/p&gt;
&lt;h3 id=&quot;条件概率及其链式法则&quot;&gt;&lt;a href=&quot;#条件概率及其链式法则&quot; class=&quot;headerlink&quot; title=&quot;条件概率及其链式法则&quot;&gt;&lt;/a&gt;条件概率及其链式法则&lt;/h3&gt;&lt;h3 id=&quot;独立和条件独立&quot;&gt;&lt;a href=&quot;#独立和条件独立&quot; class=&quot;headerlink&quot; title=&quot;独立和条件独立&quot;&gt;&lt;/a&gt;独立和条件独立&lt;/h3&gt;&lt;h3 id=&quot;期望，方差与协方差&quot;&gt;&lt;a href=&quot;#期望，方差与协方差&quot; class=&quot;headerlink&quot; title=&quot;期望，方差与协方差&quot;&gt;&lt;/a&gt;期望，方差与协方差&lt;/h3&gt;&lt;h3 id=&quot;常用概率分布&quot;&gt;&lt;a href=&quot;#常用概率分布&quot; class=&quot;headerlink&quot; title=&quot;常用概率分布&quot;&gt;&lt;/a&gt;常用概率分布&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;贝努利分布&lt;/li&gt;
&lt;li&gt;多贝努利分布/多类分布&lt;/li&gt;
&lt;li&gt;高斯分布&lt;/li&gt;
&lt;li&gt;指数分布&lt;/li&gt;
&lt;li&gt;拉普拉斯分布&lt;/li&gt;
&lt;li&gt;狄拉克分布(Dirac)与经验分布&lt;/li&gt;
&lt;li&gt;混合分布&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;一些有用的性质和通用函数&quot;&gt;&lt;a href=&quot;#一些有用的性质和通用函数&quot; class=&quot;headerlink&quot; title=&quot;一些有用的性质和通用函数&quot;&gt;&lt;/a&gt;一些有用的性质和通用函数&lt;/h3&gt;&lt;h3 id=&quot;贝叶斯规则&quot;&gt;&lt;a href=&quot;#贝叶斯规则&quot; class=&quot;headerlink&quot; title=&quot;贝叶斯规则&quot;&gt;&lt;/a&gt;贝叶斯规则&lt;/h3&gt;&lt;h3 id=&quot;连续变量的一些技术细节&quot;&gt;&lt;a href=&quot;#连续变量的一些技术细节&quot; class=&quot;headerlink&quot; title=&quot;连续变量的一些技术细节&quot;&gt;&lt;/a&gt;连续变量的一些技术细节&lt;/h3&gt;&lt;h2 id=&quot;信息论&quot;&gt;&lt;a href=&quot;#信息论&quot; class=&quot;headerlink&quot; title=&quot;信息论&quot;&gt;&lt;/a&gt;信息论&lt;/h2&gt;&lt;h2 id=&quot;结构化概率模型&quot;&gt;&lt;a href=&quot;#结构化概率模型&quot; class=&quot;headerlink&quot; title=&quot;结构化概率模型&quot;&gt;&lt;/a&gt;结构化概率模型&lt;/h2&gt;&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ogbh7uglm.bkt.clouddn.com/MatrixCookBook.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Matrix Cook Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;深度学习需要的数学基础同机器学习所需的数学基础类似，包括三大块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线性代数&lt;/li&gt;
&lt;li&gt;概率论与数理统计&lt;/li&gt;
&lt;li&gt;信息论基础&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分三部分摘要如下，&lt;/p&gt;
&lt;h2 id=&quot;线性代数&quot;&gt;&lt;a href=&quot;#线
    
    </summary>
    
      <category term="深度学习 | Deep Learning" scheme="http://whatbeg.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Deep-Learning/"/>
    
    
      <category term="深度学习" scheme="http://whatbeg.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Deep Learning" scheme="http://whatbeg.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Hexo新的一些优化</title>
    <link href="http://whatbeg.com/2017/04/13/hexosomeopt.html"/>
    <id>http://whatbeg.com/2017/04/13/hexosomeopt.html</id>
    <published>2017-04-13T08:10:39.000Z</published>
    <updated>2017-04-13T08:13:13.787Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Hexo-Mathjax下划线-的渲染问题&quot;&gt;&lt;a href=&quot;#Hexo-Mathjax下划线-的渲染问题&quot; class=&quot;headerlink&quot; title=&quot;Hexo Mathjax下划线_的渲染问题&quot;&gt;&lt;/a&gt;Hexo Mathjax下划线&lt;code&gt;_&lt;/code&gt;的渲染问题&lt;/h2&gt;&lt;p&gt;以前Hexo渲染数学公式的时候有时候下划线会渲染成&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;，导致渲染不出公式的情况。&lt;br&gt;比如下面这种情况：&lt;br&gt;&lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/hexosomeopt1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;但是在其他markdown中又能够正确显示，这时候其实是Hexo的锅，它渲染的时候把&lt;code&gt;_&lt;/code&gt;渲染成&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;    ，可以修改渲染规则来使之渲染正常。&lt;br&gt;打开：&lt;code&gt;hexo\node_modules\marked\lib\marked.js&lt;/code&gt;&lt;br&gt;找到：&lt;br&gt;&lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/hexosomeopt3.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/hexosomeopt2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;删去选中的部分，即删除对&lt;code&gt;_&lt;/code&gt;的渲染转换，重新生成即可。&lt;br&gt;当然还有其它方式，不过这种比较简便有效。&lt;/p&gt;
&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kubicode.me/2016/03/16/Hexo/Fix-Hexo-Bug-In-Mathjax/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;修复Hexo写Mathjax公式多个下标失效的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何处理Hexo和MathJax的兼容问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo-Mathjax下划线-的渲染问题&quot;&gt;&lt;a href=&quot;#Hexo-Mathjax下划线-的渲染问题&quot; class=&quot;headerlink&quot; title=&quot;Hexo Mathjax下划线_的渲染问题&quot;&gt;&lt;/a&gt;Hexo Mathjax下划线&lt;code&gt;_&lt;
    
    </summary>
    
      <category term="错误解决与优化 | Err&Opt" scheme="http://whatbeg.com/categories/%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E4%B8%8E%E4%BC%98%E5%8C%96-Err-Opt/"/>
    
    
      <category term="Hexo" scheme="http://whatbeg.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 使用中的问题集锦</title>
    <link href="http://whatbeg.com/2017/04/01/ubuntuproblems.html"/>
    <id>http://whatbeg.com/2017/04/01/ubuntuproblems.html</id>
    <published>2017-04-01T12:38:53.000Z</published>
    <updated>2017-04-02T12:33:48.923Z</updated>
    
    <content type="html">&lt;p&gt;新开一贴，记录一下Ubuntu使用中的一些问题。&lt;/p&gt;
&lt;h5 id=&quot;Ubuntu-搜狗输入法问题&quot;&gt;&lt;a href=&quot;#Ubuntu-搜狗输入法问题&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu 搜狗输入法问题&quot;&gt;&lt;/a&gt;Ubuntu 搜狗输入法问题&lt;/h5&gt;&lt;p&gt;搜狗输入法突然不能用，打字的时候界面也没了，就剩个框框，打着打着就没了。&lt;br&gt;&lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/error_sogoupinyin.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;重装了fcitx和sogoupinyin也不行，最后在&lt;a href=&quot;http://forum.ubuntu.org.cn/viewtopic.php?f=8&amp;amp;t=483206&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ubuntu Forum&lt;/a&gt;找到了解决方案。&lt;br&gt;据说是自动升级什么造成的，deepin里提示说&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mv  ~/.&lt;span class=&quot;built_in&quot;&gt;config&lt;/span&gt;/SogouPY*  /tmp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;发现了一个好地方，Ubuntu出问题可以多去&lt;a href=&quot;http://forum.ubuntu.org.cn/index.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ubuntu 论坛&lt;/a&gt;看看。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;新开一贴，记录一下Ubuntu使用中的一些问题。&lt;/p&gt;
&lt;h5 id=&quot;Ubuntu-搜狗输入法问题&quot;&gt;&lt;a href=&quot;#Ubuntu-搜狗输入法问题&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu 搜狗输入法问题&quot;&gt;&lt;/a&gt;Ubuntu 搜狗输入法
    
    </summary>
    
      <category term="错误解决与优化 | Err&Opt" scheme="http://whatbeg.com/categories/%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E4%B8%8E%E4%BC%98%E5%8C%96-Err-Opt/"/>
    
    
      <category term="Linux" scheme="http://whatbeg.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>合并多个Commits，请注意！</title>
    <link href="http://whatbeg.com/2017/04/01/combinecommits.html"/>
    <id>http://whatbeg.com/2017/04/01/combinecommits.html</id>
    <published>2017-04-01T11:47:16.000Z</published>
    <updated>2017-04-01T11:48:28.282Z</updated>
    
    <content type="html">&lt;h2 id=&quot;合并多个Commits&quot;&gt;&lt;a href=&quot;#合并多个Commits&quot; class=&quot;headerlink&quot; title=&quot;合并多个Commits&quot;&gt;&lt;/a&gt;合并多个Commits&lt;/h2&gt;&lt;p&gt;我们提交Pull Request的时候有时候并不是一个Commit就完成的，往往会做一些修改，然后再提交Commit，通常会走多轮，到最后就可能会有多个Commit，这时候往往需要合并这些Commits为一个，然后Manager帮你Merge。&lt;br&gt;这时候我们就需要使用git rebase了。&lt;br&gt;这里我并不打算详解rebase，这是Git book做的事，这里只是记录一下自己做的一个过程。&lt;/p&gt;
&lt;p&gt;关于rebase可以参看这几篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3.6 Git 分支 - 变基&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zerodie.github.io/blog/2012/01/19/git-rebase-i/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何合併多個commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/964de879904a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;「Git」合并多个 Commit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先&lt;code&gt;git log&lt;/code&gt;查看需要合并的Commits，比如如下形式：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;ade56efc466c093d7e8e25c520293cesedc96cc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Author: xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;:   Wed Mar &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2017&lt;/span&gt; +&lt;span class=&quot;number&quot;&gt;0800&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;Commit&lt;/span&gt; Message &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;546&lt;/span&gt;ffc32692d3f935feb9b04d6ecb66feda9560b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Author: xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;:   Mon Feb &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2017&lt;/span&gt; +&lt;span class=&quot;number&quot;&gt;0800&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;Commit&lt;/span&gt; Message &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;commit&lt;/span&gt; f48b8644013c23f132c3fe72f8cc38ea288e6f3d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Author: xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;:   Thu Feb &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;52&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;39&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2017&lt;/span&gt; +&lt;span class=&quot;number&quot;&gt;0800&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;Commit&lt;/span&gt; Message &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;commit&lt;/span&gt; fe72f8cc38ea288e6c3fe72f8cc38ea288e6f3de&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Author: xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;:   Thu Feb &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;39&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2017&lt;/span&gt; +&lt;span class=&quot;number&quot;&gt;0800&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;Commit&lt;/span&gt; Message &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;比如说我们需要合并Commit 2-4这三个提交，我们运行&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git rebase -i &amp;lt;SHA&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; Commit &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;  &lt;span class=&quot;comment&quot;&gt;# -i后面的参数为最后一个不需要合并的Commit，这里为Commit 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后出现交互框，出现三个pick&lt;br&gt;&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pick ... Commit &lt;span class=&quot;keyword&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick ... Commit &lt;span class=&quot;keyword&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick ... Commit &lt;span class=&quot;keyword&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们将后两个pick改成squash，即：&lt;br&gt;&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pick ... Commit &lt;span class=&quot;keyword&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;squash ... Commit &lt;span class=&quot;keyword&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;squash ... Commit &lt;span class=&quot;keyword&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里两个操作的区别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pick的意思是要会选择合并到这个commit&lt;/li&gt;
&lt;li&gt;squash(挤压)的意思是这个commit会被合并到前一个commit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后输入新的Commit Message，保存，即合并成功，最后看只剩一个Commit了。&lt;br&gt;最后Push到remote，这时会提示版本不合，因为本地这个进行了合并后，已经比remote老了，这时只需强推即可：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push -f &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;upstream&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;localbranch&lt;/span&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;remotebranch&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后，多个提交就变成了一个提交，可以被merge了。&lt;/p&gt;
&lt;h2 id=&quot;后悔药&quot;&gt;&lt;a href=&quot;#后悔药&quot; class=&quot;headerlink&quot; title=&quot;后悔药&quot;&gt;&lt;/a&gt;后悔药&lt;/h2&gt;&lt;p&gt;注意，如果出现了什么不想看到的结果或者操作错误，可以使用&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git rebase &lt;span class=&quot;comment&quot;&gt;--abort&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;进行挽救，即可恢复到rebase之前的状态。&lt;/p&gt;
&lt;h2 id=&quot;简易方法&quot;&gt;&lt;a href=&quot;#简易方法&quot; class=&quot;headerlink&quot; title=&quot;简易方法&quot;&gt;&lt;/a&gt;简易方法&lt;/h2&gt;&lt;p&gt;如果只需合并两个Commit，且又是最近的两个Commit，其实可以更简单地使用：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;keyword&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--soft HEAD^1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;keyword&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--amend&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;来解决。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;合并多个Commits&quot;&gt;&lt;a href=&quot;#合并多个Commits&quot; class=&quot;headerlink&quot; title=&quot;合并多个Commits&quot;&gt;&lt;/a&gt;合并多个Commits&lt;/h2&gt;&lt;p&gt;我们提交Pull Request的时候有时候并不是一个Commit就
    
    </summary>
    
      <category term="计算机相关 | CS.Related" scheme="http://whatbeg.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3-CS-Related/"/>
    
    
      <category term="Git" scheme="http://whatbeg.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning读书笔记（1）【开篇】</title>
    <link href="http://whatbeg.com/2017/03/29/deeplearningbook-01.html"/>
    <id>http://whatbeg.com/2017/03/29/deeplearningbook-01.html</id>
    <published>2017-03-29T14:39:32.000Z</published>
    <updated>2017-03-30T12:01:25.924Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;“深度学习”的概念萌芽于2006年，2010年以后逐渐兴起，到2015,2016年达到顶峰，尤其是2016年，感觉各种IT网站，业界公号，微博等等都充斥着”深度学习”这个词语，论文数量急剧增加，盛况空前。到现在，2017年上半年，火热之势不减，诸多meetup，讨论会，交流会，分享会此起彼伏，人头攒动，业界大牛则在展望未来，规划前程或是默默做着前沿探索。&lt;br&gt;初次接触深度学习是在去年做一个NLP比赛的时候，尝试了深度学习的方法，效果确实不错，未加集成，融合的单模型就能表现出很好的效果，于是入坑，，直至遇到Bengio,Goodfellow,Courville合著的这本《Deep Learning》，想把它啃下来，陆陆续续看了一些，前几章还好，越到后面会难一些，借着这个机会，分享下自己的阅读心得，也督促自己继续把它啃完。&lt;/p&gt;
&lt;h2 id=&quot;智能机器&quot;&gt;&lt;a href=&quot;#智能机器&quot; class=&quot;headerlink&quot; title=&quot;智能机器&quot;&gt;&lt;/a&gt;智能机器&lt;/h2&gt;&lt;p&gt;人类一直以来都有一个梦想，就是制造出能够思考的机器。可是一直到近代，计算机的发明，才使得这一梦想有了巨大的推进。再到今天，人工智能(Artificial Intelligence)，起源于1956年夏季”达特茅斯会议”的这门学科，经过1997年IBM DeepBlue战胜国际象棋大师卡斯帕罗夫，再到2016年3月AlphaGo战胜李世石，到最近的Master，已经成为了最蓬勃发展的一个领域之一，此时，我们重新问自己这个问题: “人类能否制造出有智能的机器？”。诚然，”智能”的定义又有许多种，有人说，通过图灵测试的机器就具有智能，有人说，有自我意识，会思考的机器才算具有智能，总的来说没有一致公认的定义。于是观点逐渐分为两派，一个是强AI观点，一个是弱AI观点，强AI观点认为人类有可能制造出能推理和解决问题，并具有自我意识和直觉的机器，弱AI观点则认为不能。&lt;/p&gt;
&lt;p&gt;但是，纠结于智能的标准，以及能不能使机器达到智能对我们并无太大助益，我们现在所希望的是制造出更加”聪明”一点的机器，帮我们做很多事情。这是好的，但是”人工智能威胁论”也随之应运而生，客观来说，人工智能真正能够对人类产生威胁还有很长的路要走，但是不得不承认，很多机械性的工作，机器拿手的问题很可能会逐渐被机器人取代，从而会加高工作的知识壁垒，也会使一些工人失业，这是大势，阻挡不了。&lt;/p&gt;
&lt;h2 id=&quot;深度学习&quot;&gt;&lt;a href=&quot;#深度学习&quot; class=&quot;headerlink&quot; title=&quot;深度学习&quot;&gt;&lt;/a&gt;深度学习&lt;/h2&gt;&lt;p&gt;那么哪些问题是机器拿手的，哪些问题又是人类拿手的呢？&lt;/p&gt;
&lt;p&gt;我们知道，早期计算机在处理问题时，需要人类把问题，规则，策略描述给它，硬编码到系统中，然后交给计算机去做，但是人们逐渐遇到了依赖硬编码的系统带来的许多困难与问题，也让人们意识到，必须要让AI系统具有获得他们自己知识的能力。计算机在复杂计算，规则明确的策略搜索(如棋类)，大规模存储记忆等方面的处理能力远超人类，这些问题对于机器来说，无非是执行规则而已，但是人的直觉是很难被机器学到的，包括物体识别，观察判断和听说读写等等，这些问题很难形式化地描述给计算机，但是这些问题我们仍想去解决，仍然需要被解决。&lt;/p&gt;
&lt;p&gt;本书就集中描述一种解决方案，它让计算机从经验中学习，按照概念的层级(Hierarchy of Concepts)来理解世界，其中每个概念定义在比它更简单的概念之上，从而避免让人类去指定计算机需要的知识。这种方法我们称之为深度学习。深度学习只是机器学习领域的一个很小的课题，从下图可以看出，但是由于它解决了许多以前无法解决的问题，提升了以前解决得不好的问题，从而名声大噪，进入了大众的视野。&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/dl_001.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;给一个较明确的定义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“深度学习是一种表示学习方法,把原始数据通过一些简单的非线性模型转变为更高层次的,更加抽象的表达。通过足够多的转换的组合,非常复杂的函数也可以被学习。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;深度学习处在什么位置？&quot;&gt;&lt;a href=&quot;#深度学习处在什么位置？&quot; class=&quot;headerlink&quot; title=&quot;深度学习处在什么位置？&quot;&gt;&lt;/a&gt;深度学习处在什么位置？&lt;/h2&gt;&lt;p&gt;从上图我们看出，我们首先聚焦AI领域，AI包括基于知识的AI(类似以前的专家系统)，另外还包括机器学习，机器学习又分为几类，一类如SVM，LR等传统的分类回归方法，另一类即表示学习，传统的机器学习方法意图学习一个表示-&amp;gt;输出的映射$\mathcal F$，其中表示往往需要做特征工程，人工指定数据的表示方法，表示的选择对机器学习的性能有着巨大的影响，而表示学习的精髓在于，它不仅学习表示-&amp;gt;输出的映射，还学习表示本身，即学习更好的对输入数据的表示，表示学习就像一个端到端的过程，直接得出输入到输出的一系列映射关系，表示学习包括浅层的自动编码器(autoencoders)，意在学习出输入到另一个表示的尽可能降低信息损失的映射，意在得到一个具有输入不具有的良好性质的表示。表示学习的另一大类就是深度学习，深度学习，在于一个深字，也称为深度神经网络，因为这种深度通过多层的神经网络来组成，比如多层感知机(MLP)就属于深度学习范畴。说白一点就是，深度学习就是很多层神经网络组合而成，利用深度和非线性单元的一起作用，更多的学习函数或者概念的组合，使得机器能够学习到更加复杂的映射，解决那些更加复杂的问题，一般认为，有某些因素在背后影响着我们具体问题中的观察数据，深度学习的目的就是学习出这种因素及这种因素是如何变化的。至于多深才算深，也没有统一的意见。&lt;br&gt;书上这张图更加清晰地阐明了深度学习的方法。&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/dl_002.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;h2 id=&quot;历史与趋势&quot;&gt;&lt;a href=&quot;#历史与趋势&quot; class=&quot;headerlink&quot; title=&quot;历史与趋势&quot;&gt;&lt;/a&gt;历史与趋势&lt;/h2&gt;&lt;p&gt;深度学习在历史进程中总的来说有几大趋势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深度学习有着很长很丰富的历史，但是许多反映着不同哲学观点的人的名字已经消逝，不被人记起&lt;/li&gt;
&lt;li&gt;随着训练数据的增多，深度学习的效果变得更好了&lt;/li&gt;
&lt;li&gt;软件和硬件的迅速提升给深度学习提供了物质基础&lt;/li&gt;
&lt;li&gt;深度学习有了更高的准确率，逐渐在解决日益复杂的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能有很多人认为神经科学是对大脑的模拟，确实，脑神经科学的研究给予了神经网络重大的启示，但是深度学习，或者神经网络，更多的是受到多个其他领域的启发，比如应用数学基础，信息论和数值优化等等，我们甚至可以直接说，神经网络是一个数学问题。&lt;/p&gt;
&lt;p&gt;深度学习的历史要追溯到上个世纪40年代，40年代是神经网络的萌芽期，1943年McCulloch-Pitts Neuron的发明，控制论(Cybernetics)的兴起，和1945年Hebb学习规则的提出，逐渐萌生了神经网络这门学科。到后来，1950年代到60年代末，期间有1958年感知机的提出，1960年ADALINE(Adaptive Linear Element)的提出，促使了这段时间的逐渐繁荣。但是，以上模型终究只是线性模型，无法解决更复杂的问题，甚至无法学习异或(XOR)操作，这让人们很失望，于是知道70年代末期，整个领域陷入了一片沉寂。到80年代，联结主义和并行分布式计算的浪潮掀起，1986年著名的后向传播算法(BP, Back Propagation)的发明，分布式表示(Distributed Representation)的提出，以及序列建模，LSTM都相继提出，构成了另一波的繁荣期。联结主义是统合了认知心理学、人工智能和心理哲学领域的一种理论，认为”大量的简单计算单元相互联结时能够达到智能行为”。繁荣了不久(很可能当时也是如现在一般火热)，许多创业者纷纷涌入，为了获得投资，鼓吹之风逐渐升起，导致最后许诺的效果无法兑现，投资者逐渐丧失信心，加之当时数据少，层数浅，训练慢，很容易造成过拟合或者欠拟合的问题，以及SVM和图模型的巨大成功，使得神经网络再次被压了下去，陷入沉寂，而此事，有一个名为CIFAR(Canadian Institute for Advanced Research)的学术组织，成员包括现在大家耳熟能详的LeCun，Bengio，Hinton等人，没错，就是本书作者Bengio，他们一直在坚持神经网络的研究。到了2006年，Hinton发表著名论文，表明深度信念网络可以采用Greedy Layer-wise Pretraining的策略高效地训练，后来人发现这种方法在其他深度网络上作用也很大，从此以后，深度学习开始在各领域大放异彩，2006年也因此被称为”深度学习元年”。&lt;/p&gt;
&lt;p&gt;目前深度学习作用最为显著的领域当属计算机视觉，语音识别和自然语言处理了。&lt;/p&gt;
&lt;h2 id=&quot;为什么是深度学习？&quot;&gt;&lt;a href=&quot;#为什么是深度学习？&quot; class=&quot;headerlink&quot; title=&quot;为什么是深度学习？&quot;&gt;&lt;/a&gt;为什么是深度学习？&lt;/h2&gt;&lt;p&gt;很简单，从以下几个方面可以一窥究竟&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据集规模：如今越来越数字化，数据量成爆炸式增长，使得人们想从巨量的数据中挖掘各种各样的模式和价值&lt;/li&gt;
&lt;li&gt;计算能力和模型大小：计算能力的提升使得我们能够训练越来越大的模型，提高了模型大小，也就增加了能解决的问题的复杂度&lt;/li&gt;
&lt;li&gt;准确率，问题复杂性：深度学习在诸多领域表现出色，在某些识别问题上甚至超过人类，解决着越来越复杂的问题&lt;/li&gt;
&lt;li&gt;实际应用：深度学习的落地，解决了人们很多需求，带来了很多价值，让人们逐渐对他倾心。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;弱点？&quot;&gt;&lt;a href=&quot;#弱点？&quot; class=&quot;headerlink&quot; title=&quot;弱点？&quot;&gt;&lt;/a&gt;弱点？&lt;/h2&gt;&lt;p&gt;可是，深度学习就没有一点缺陷么？不是的，辩证法来说，事物总是具有两面性，深度学习的一些弱点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;很多时候,初始数据表示就已经很合适了&lt;/li&gt;
&lt;li&gt;需要大量的数据&lt;/li&gt;
&lt;li&gt;巨大的计算开销,小的机构有点虚&lt;/li&gt;
&lt;li&gt;容易陷入局部最优&lt;/li&gt;
&lt;li&gt;难以解释，“玄乎”&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h2&gt;&lt;p&gt;本文取材自本书第一章导引部分，第一章介绍了深度学习的概念，以及深度学习在整个领域中所处的位置，然后交代了深度学习的历史发展与趋势，以及能够站上如此高的舞台的内在外在原因。再加上自己的一些理解，促成了本文。笔者才疏学浅，如果不妥之处，还望不吝指出，感谢阅读到最后的朋友们。&lt;br&gt;另附上笔者在一次Talk中的演讲PPT，也有很大一部分取材于本书第一章，可以尝试下载观看。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ogbh7uglm.bkt.clouddn.com/%E6%B5%85%E8%B0%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅谈深度学习.PDF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;《Deep Learning》GoodFellow, Bengio etc.&lt;/li&gt;
&lt;li&gt;《Deep Learning Revew》LeCun, Bengio, Hinton&lt;/li&gt;
&lt;li&gt;《Deep Learning学习笔记整理系列》zouxy&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;“深度学习”的概念萌芽于2006年，2010年以后逐渐兴起，到2015,2016年达到顶峰，尤其是2016年，感觉各种IT网站，业界公号，微
    
    </summary>
    
      <category term="深度学习 | Deep Learning" scheme="http://whatbeg.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Deep-Learning/"/>
    
    
      <category term="深度学习" scheme="http://whatbeg.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Deep Learning" scheme="http://whatbeg.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>给静态博客加上邮件订阅功能</title>
    <link href="http://whatbeg.com/2017/03/23/addemailsubscribe.html"/>
    <id>http://whatbeg.com/2017/03/23/addemailsubscribe.html</id>
    <published>2017-03-23T12:54:09.000Z</published>
    <updated>2017-03-23T13:02:23.321Z</updated>
    
    <content type="html">&lt;p&gt;平时工作中常常会订阅一些业界日报，周报等，俨然已经成为了每天、每周获取业界消息的重要来源。于是突发奇想，想能不能自己的博客加上邮件订阅功能呢。&lt;/p&gt;
&lt;p&gt;一搜，发现有很多工具，也没多比较，根据&lt;a href=&quot;http://www.race604.com/add-email-subscribe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;选择了&lt;a href=&quot;https://mailchimp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MailChimp&lt;/a&gt;这个工具。功能比较强大比较老牌，界面也很炫酷，就是访问体验差了一些，不知道是不是网络的原因，有时候加载的延迟比较长，但是也在可接受范围内啦。鉴于上面的文章介绍的不是太详尽，这里介绍下自己做的一个流程。&lt;/p&gt;
&lt;p&gt;流程大概分以下几步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册账号&lt;/li&gt;
&lt;li&gt;创建初始邮件列表&lt;/li&gt;
&lt;li&gt;设定订阅点击栏&lt;/li&gt;
&lt;li&gt;创建邮件订阅活动Campaign及制定邮件格式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;注册账号&quot;&gt;&lt;a href=&quot;#注册账号&quot; class=&quot;headerlink&quot; title=&quot;注册账号&quot;&gt;&lt;/a&gt;注册账号&lt;/h3&gt;&lt;p&gt;首先注册MailChimp账号，在&lt;a href=&quot;https://login.mailchimp.com/signup/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;注册。一般每个月2000个订阅者以下免费。要注意的是，邮件地址（住址/公司地址，非email）后面会出现在订阅者订阅的时候的信息里，以及默认的邮件模板里，所以好好填为好，不要乱填。&lt;/p&gt;
&lt;h3 id=&quot;创建一个邮件列表&quot;&gt;&lt;a href=&quot;#创建一个邮件列表&quot; class=&quot;headerlink&quot; title=&quot;创建一个邮件列表&quot;&gt;&lt;/a&gt;创建一个邮件列表&lt;/h3&gt;&lt;p&gt;我们是最终需要向邮件列表中所有用户发送订阅邮件，所以需要新建邮件列表，点面板上的List，然后Create List，然后填入一些必要信息，保存。填写发送邮箱的时候需要认证一下邮箱，点击Verify即可。&lt;/p&gt;
&lt;h3 id=&quot;设定订阅点击栏&quot;&gt;&lt;a href=&quot;#设定订阅点击栏&quot; class=&quot;headerlink&quot; title=&quot;设定订阅点击栏&quot;&gt;&lt;/a&gt;设定订阅点击栏&lt;/h3&gt;&lt;p&gt;然后我们需要确定在你的网站/博客上做一个什么样的订阅入口，有直接显式的表单，也可以是重定向到一个专门填写信息表单的网址，我采用的是后者。&lt;br&gt;到刚刚创建的List的主界面，点击工具栏的”Signup forms”，选择一种表单形式，&lt;br&gt;如果是重定向的表单的话，选择”General forms”&lt;br&gt;如果是嵌入形式的直接填写提交的表单，选择”Embedded forms”&lt;br&gt;其他两种不太了解。&lt;/p&gt;
&lt;p&gt;然后就是修改相应你想显示的信息，保存完成。&lt;/p&gt;
&lt;h3 id=&quot;创建邮件订阅活动Campaign及制定邮件格式&quot;&gt;&lt;a href=&quot;#创建邮件订阅活动Campaign及制定邮件格式&quot; class=&quot;headerlink&quot; title=&quot;创建邮件订阅活动Campaign及制定邮件格式&quot;&gt;&lt;/a&gt;创建邮件订阅活动Campaign及制定邮件格式&lt;/h3&gt;&lt;p&gt;设定了邮件列表之后，我们需要创建邮件订阅服务了，即创建自动发送邮件的服务。点击主面板Campaigns，创建活动，填写相应信息，期间要填写发送邮件的邮箱，建议注册一个新的邮箱，比如说&lt;code&gt;xx_noreply@some.com&lt;/code&gt;格式的。&lt;br&gt;MailChimp提供了集中Campaign类型，由于博客的话一般是RSS订阅，我们可以直接利用RSS的内容来发送给Subscribers，所以我们选择RSS-Driven Campaign，填入博客RSS地址，然后设置频率，发送时间，接收者，一直点右下角的Next，然后选一个邮件模板，我选的是1 Column - Full Width。然后做一番设计，由于我们是发送RSS信息，所以需拖入一个RSS Items模块，然后可以做一些修改，比如修改对齐，字体等。期间有些信息是不能预览的，可以点击Preview and Test发送测试邮件看看效果。&lt;br&gt;最后Next到Confirm，确认后点击Start RSS，跳到Done And Done界面，表示一切完成，你的订阅List中的订阅者就会按时收到邮件了。&lt;/p&gt;
&lt;h3 id=&quot;添加到hexo博客组件&quot;&gt;&lt;a href=&quot;#添加到hexo博客组件&quot; class=&quot;headerlink&quot; title=&quot;添加到hexo博客组件&quot;&gt;&lt;/a&gt;添加到hexo博客组件&lt;/h3&gt;&lt;p&gt;这里演示如何添加到你的hexo博客的侧边栏。&lt;br&gt;到hexo主目录的&lt;code&gt;\themes\YOUR_THEMES\layout\_widget&lt;/code&gt;下添加emailist.ejs文件，写入&lt;br&gt;&lt;figure class=&quot;highlight erb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;rsspart&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://eepurl.com/cHO5An&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;_blank&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;email&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; _&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Email 订阅&#39;&lt;/span&gt;) &lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我直接做成了和RSS订阅相同的形式，所以直接利用class=”rsspart”，具体可以根据自己的主题设置自己想要的格式。&lt;/p&gt;
&lt;p&gt;最后，欢迎订阅本博客，由于更新并不是太频繁，只做了月报，订阅地址：&lt;br&gt;&lt;a href=&quot;http://eepurl.com/cHO5An&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://eepurl.com/cHO5An&lt;/a&gt;&lt;br&gt;或点击侧边栏订阅。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;平时工作中常常会订阅一些业界日报，周报等，俨然已经成为了每天、每周获取业界消息的重要来源。于是突发奇想，想能不能自己的博客加上邮件订阅功能呢。&lt;/p&gt;
&lt;p&gt;一搜，发现有很多工具，也没多比较，根据&lt;a href=&quot;http://www.race604.com/add-ema
    
    </summary>
    
      <category term="错误解决与优化 | Err&Opt" scheme="http://whatbeg.com/categories/%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E4%B8%8E%E4%BC%98%E5%8C%96-Err-Opt/"/>
    
    
      <category term="hexo" scheme="http://whatbeg.com/tags/hexo/"/>
    
      <category term="Web" scheme="http://whatbeg.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Linux备忘命令</title>
    <link href="http://whatbeg.com/2017/03/11/linuxmemo.html"/>
    <id>http://whatbeg.com/2017/03/11/linuxmemo.html</id>
    <published>2017-03-11T04:42:52.000Z</published>
    <updated>2017-04-03T10:33:24.093Z</updated>
    
    <content type="html">&lt;h5 id=&quot;图片压缩&quot;&gt;&lt;a href=&quot;#图片压缩&quot; class=&quot;headerlink&quot; title=&quot;图片压缩&quot;&gt;&lt;/a&gt;图片压缩&lt;/h5&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt; imagemagick&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;convert&lt;/span&gt; -resize &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;x100 &lt;span class=&quot;built_in&quot;&gt;from&lt;/span&gt;.jpg &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt;.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;convert&lt;/span&gt; -resize &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;%x50% &lt;span class=&quot;built_in&quot;&gt;from&lt;/span&gt;.jpg &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt;.jpg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Neural-Artistic-Style&quot;&gt;&lt;a href=&quot;#Neural-Artistic-Style&quot; class=&quot;headerlink&quot; title=&quot;Neural Artistic Style&quot;&gt;&lt;/a&gt;Neural Artistic Style&lt;/h5&gt;&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;neural_style&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;checkpoint&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;400out/out%s&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;checkpoint&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;content&lt;/span&gt; &amp;lt;&lt;span class=&quot;comment&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;file&lt;/span&gt;&amp;gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;styles&lt;/span&gt; &amp;lt;&lt;span class=&quot;comment&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;file&lt;/span&gt;&amp;gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;output&lt;/span&gt; &amp;lt;&lt;span class=&quot;comment&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;删除目录下符合条件的文件&quot;&gt;&lt;a href=&quot;#删除目录下符合条件的文件&quot; class=&quot;headerlink&quot; title=&quot;删除目录下符合条件的文件&quot;&gt;&lt;/a&gt;删除目录下符合条件的文件&lt;/h5&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;find ./ -name &lt;span class=&quot;string&quot;&gt;&quot;CMakeCache.txt&quot;&lt;/span&gt; | xargs &lt;span class=&quot;keyword&quot;&gt;rm&lt;/span&gt; -rf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TORCH_LUA_VERSION=LUA52 ./install.&lt;span class=&quot;keyword&quot;&gt;sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;安装cudnn，cuda配置的环境变量&quot;&gt;&lt;a href=&quot;#安装cudnn，cuda配置的环境变量&quot; class=&quot;headerlink&quot; title=&quot;安装cudnn，cuda配置的环境变量&quot;&gt;&lt;/a&gt;安装cudnn，cuda配置的环境变量&lt;/h5&gt;&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export LD_LIBRARY_PATH=/usr/local/cuda-&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt;/lib64:/usr/local/cuda-&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt;/extras/CUPTI/lib64:$LD_LIBRARY_PATH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export CUDA_HOME=/usr/local/cuda-&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH=$CUDA_HOME/bin:$PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;安装JAVA，JDK配置环境变量&quot;&gt;&lt;a href=&quot;#安装JAVA，JDK配置环境变量&quot; class=&quot;headerlink&quot; title=&quot;安装JAVA，JDK配置环境变量&quot;&gt;&lt;/a&gt;安装JAVA，JDK配置环境变量&lt;/h5&gt;&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export JAVA_HOME=/usr/local/jdk1.&lt;span class=&quot;number&quot;&gt;8.0_121&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export JRE_HOME=$JAVA_HOME/jre&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH=$JAVA_HOME/bin:$PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;查找一个或多个文件中是否含有某字符串&quot;&gt;&lt;a href=&quot;#查找一个或多个文件中是否含有某字符串&quot; class=&quot;headerlink&quot; title=&quot;查找一个或多个文件中是否含有某字符串&quot;&gt;&lt;/a&gt;查找一个或多个文件中是否含有某字符串&lt;/h5&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;strings ./xx.&lt;span class=&quot;keyword&quot;&gt;sh&lt;/span&gt; | &lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;STR*&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;yarn-终结application&quot;&gt;&lt;a href=&quot;#yarn-终结application&quot; class=&quot;headerlink&quot; title=&quot;yarn 终结application&quot;&gt;&lt;/a&gt;yarn 终结application&lt;/h5&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yarn &lt;span class=&quot;built_in&quot;&gt;application&lt;/span&gt; -kill &amp;lt;application_ID&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;vim字符串查找与替换&quot;&gt;&lt;a href=&quot;#vim字符串查找与替换&quot; class=&quot;headerlink&quot; title=&quot;vim字符串查找与替换&quot;&gt;&lt;/a&gt;vim字符串查找与替换&lt;/h5&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;:%s/A/B/g&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# 将所有行的A替换为B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;:%s/A/B/&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# 将所有行的第一个A替换为B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;:s/A/B/g&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# 替换当前行所有A为B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;图片压缩&quot;&gt;&lt;a href=&quot;#图片压缩&quot; class=&quot;headerlink&quot; title=&quot;图片压缩&quot;&gt;&lt;/a&gt;图片压缩&lt;/h5&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
    
    </summary>
    
      <category term="计算机相关 | CS.Related" scheme="http://whatbeg.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3-CS-Related/"/>
    
    
      <category term="Linux" scheme="http://whatbeg.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>C/C++语言备忘</title>
    <link href="http://whatbeg.com/2017/03/11/candcplusplusmemo.html"/>
    <id>http://whatbeg.com/2017/03/11/candcplusplusmemo.html</id>
    <published>2017-03-11T04:42:43.000Z</published>
    <updated>2017-03-11T08:32:06.139Z</updated>
    
    <content type="html">&lt;p&gt;本文对一些常用的C/C++语言的小技巧或者小知识做一个备忘，以便查找。&lt;/p&gt;
&lt;h5 id=&quot;数字转String&quot;&gt;&lt;a href=&quot;#数字转String&quot; class=&quot;headerlink&quot; title=&quot;数字转String&quot;&gt;&lt;/a&gt;数字转String&lt;/h5&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string id&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stringstream ss&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ss &amp;lt;&amp;lt; x&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ss &amp;gt;&amp;gt; id&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;结构体内嵌比较函数的规则&quot;&gt;&lt;a href=&quot;#结构体内嵌比较函数的规则&quot; class=&quot;headerlink&quot; title=&quot;结构体内嵌比较函数的规则&quot;&gt;&lt;/a&gt;结构体内嵌比较函数的规则&lt;/h5&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l,r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &amp;lt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; node &amp;amp;a)&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; r &amp;lt; a.r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时左边那个&lt;code&gt;r&lt;/code&gt;表示自己这个&lt;code&gt;r&lt;/code&gt;，如果排序的话，会按&lt;code&gt;r&lt;/code&gt;值从小到大排序，因为&lt;code&gt;sort&lt;/code&gt;默认就是从小到大的。&lt;br&gt;而优先队列就不同了，优先队列中默认是大值优先，所以大小关系相反，比如下面这个：&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; SELL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; price,num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &amp;lt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; SELL &amp;amp;a)&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; price&amp;gt;a.price;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;priority_queue&amp;lt;SELL&amp;gt; que;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么这个优先队列是按&lt;code&gt;price&lt;/code&gt;小的优先出队。&lt;br&gt;总之记住：&lt;strong&gt;结构体中直接写比较函数一定是左边那个裸的r表示当前&lt;code&gt;this&lt;/code&gt;值，如果&lt;code&gt;r&amp;lt;a.r&lt;/code&gt;，那么就是从小到大排序，而优先队列恰恰相反&lt;/strong&gt;，就行了。&lt;/p&gt;
&lt;h5 id=&quot;拷贝vector-v1到vector-v2&quot;&gt;&lt;a href=&quot;#拷贝vector-v1到vector-v2&quot; class=&quot;headerlink&quot; title=&quot;拷贝vector v1到vector v2&quot;&gt;&lt;/a&gt;拷贝vector v1到vector v2&lt;/h5&gt;&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;v2.insert&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.end&lt;/span&gt;(), &lt;span class=&quot;built_in&quot;&gt;v1&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;begin(), &lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;.end&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;一些数据类型的表示范围&quot;&gt;&lt;a href=&quot;#一些数据类型的表示范围&quot; class=&quot;headerlink&quot; title=&quot;一些数据类型的表示范围&quot;&gt;&lt;/a&gt;一些数据类型的表示范围&lt;/h5&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;～&lt;span class=&quot;number&quot;&gt;4294967295&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;             &lt;span class=&quot;number&quot;&gt;-2147483648&lt;/span&gt;～&lt;span class=&quot;number&quot;&gt;2147483647&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;～&lt;span class=&quot;number&quot;&gt;4294967295&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;            &lt;span class=&quot;number&quot;&gt;-2147483648&lt;/span&gt;～&lt;span class=&quot;number&quot;&gt;2147483647&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;：     &lt;span class=&quot;number&quot;&gt;-9223372036854775808&lt;/span&gt;~&lt;span class=&quot;number&quot;&gt;9223372036854775807&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;的最大值：  &lt;span class=&quot;number&quot;&gt;1844674407370955161&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__int64：       &lt;span class=&quot;number&quot;&gt;-9223372036854775808&lt;/span&gt;~&lt;span class=&quot;number&quot;&gt;9223372036854775807&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; __int64的最大值：   &lt;span class=&quot;number&quot;&gt;18446744073709551615&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;的范围为 &lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt; ~ +&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt; 也即&lt;span class=&quot;number&quot;&gt;-3.40E+38&lt;/span&gt; ~ +&lt;span class=&quot;number&quot;&gt;3.40E+38&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;的范围为 &lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt; ~ +&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;   也即&lt;span class=&quot;number&quot;&gt;-1.79E+308&lt;/span&gt; ~ +&lt;span class=&quot;number&quot;&gt;1.79E+308&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;字符串转数字&quot;&gt;&lt;a href=&quot;#字符串转数字&quot; class=&quot;headerlink&quot; title=&quot;字符串转数字&quot;&gt;&lt;/a&gt;字符串转数字&lt;/h5&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string s&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stringstream ss(s)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ss&amp;gt;&amp;gt;num&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char &lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt;[]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sscanf( &lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;num )&lt;span class=&quot;comment&quot;&gt;;         // 将字符串转换成整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sscanf( &lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;%f&quot;&lt;/span&gt;, &amp;amp;floatnum )&lt;span class=&quot;comment&quot;&gt;;    // 将字符串转换成浮点数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char &lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt;[]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;floatnum = atof(&lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;   // 字符串转浮点数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num = atoi(&lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;        // 字符串转整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;若字符串为string类型，则要用c_str()方法获取其字符串指针&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string &lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;floatnum = atof(&lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt;.c_str())&lt;span class=&quot;comment&quot;&gt;;   // string转浮点数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num = atoi(&lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt;.c_str())&lt;span class=&quot;comment&quot;&gt;;        // string转整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;排序vector结构体最好内嵌比较函数&quot;&gt;&lt;a href=&quot;#排序vector结构体最好内嵌比较函数&quot; class=&quot;headerlink&quot; title=&quot;排序vector结构体最好内嵌比较函数&quot;&gt;&lt;/a&gt;排序vector结构体最好内嵌比较函数&lt;/h5&gt;&lt;p&gt;比如内嵌：&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&amp;lt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; node &amp;amp;B)&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; r&amp;lt;B.r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;时 &lt;code&gt;sort(v.begin(),v.end())&lt;/code&gt;  比  &lt;code&gt;sort(v.begin(),v.end(),cmp)&lt;/code&gt; 快。 而且是超时的点。 注意！&lt;/p&gt;
&lt;h5 id=&quot;lower-bound-upper-bound-和unique函数的下标关系&quot;&gt;&lt;a href=&quot;#lower-bound-upper-bound-和unique函数的下标关系&quot; class=&quot;headerlink&quot; title=&quot;lower_bound(),upper_bound()和unique函数的下标关系&quot;&gt;&lt;/a&gt;lower_bound(),upper_bound()和unique函数的下标关系&lt;/h5&gt;&lt;p&gt;我们经常要用到这两个函数，但是每次都要斟酌到底下标减不减1.&lt;br&gt;正确规则是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;*unique函数想要得到正确的不相同元素个数，那么下标在以1开始时要减去num+1&lt;/strong&gt;&lt;br&gt;即应该如此调用：&lt;br&gt;&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tot = &lt;span class=&quot;built_in&quot;&gt;unique&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt;+tot)-&lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tot = &lt;span class=&quot;built_in&quot;&gt;unique&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt;+tot+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)-&lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为tot是记录个数，个数必然是与最初的下标的距离，所以最初的下标是0或1则减去0或1.&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;lower_bound()&lt;/code&gt;则不同，&lt;code&gt;lower_bound()&lt;/code&gt;,&lt;code&gt;upper_bound()&lt;/code&gt;得到的是大于（等于）某数的第一个数的下标，无论数组从0还是1开始，都只要减num（数组）即可，得到的下标自会调整为应该的下标。&lt;br&gt;即 应该如此调用：&lt;br&gt;&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; K1 = upper_bound(a+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,a+n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;now&lt;/span&gt;)-a&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; K2 = upper_bound(a,a+n,&lt;span class=&quot;built_in&quot;&gt;now&lt;/span&gt;)-a&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;vector中unique与erase结合去重&quot;&gt;&lt;a href=&quot;#vector中unique与erase结合去重&quot; class=&quot;headerlink&quot; title=&quot;vector中unique与erase结合去重&quot;&gt;&lt;/a&gt;vector中unique与erase结合去重&lt;/h5&gt;&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sort(&lt;span class=&quot;keyword&quot;&gt;A&lt;/span&gt;.begin(),&lt;span class=&quot;keyword&quot;&gt;A&lt;/span&gt;.end())&lt;span class=&quot;comment&quot;&gt;;       &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;A&lt;/span&gt;.erase(unique(&lt;span class=&quot;keyword&quot;&gt;A&lt;/span&gt;.begin(),&lt;span class=&quot;keyword&quot;&gt;A&lt;/span&gt;.end()),&lt;span class=&quot;keyword&quot;&gt;A&lt;/span&gt;.end())&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;G-与C-的区别&quot;&gt;&lt;a href=&quot;#G-与C-的区别&quot; class=&quot;headerlink&quot; title=&quot;G++与C++的区别&quot;&gt;&lt;/a&gt;G++与C++的区别&lt;/h5&gt;&lt;p&gt;1、输出&lt;code&gt;double&lt;/code&gt;类型时，如果采用G++提交，&lt;code&gt;scanf&lt;/code&gt;采用&lt;code&gt;%lf&lt;/code&gt;，&lt;code&gt;prinf&lt;/code&gt;采用&lt;code&gt;%f&lt;/code&gt;，否则会报错&lt;br&gt;2、使用GCC/G++的提醒:&lt;br&gt;对于64位整数, long long int 和 __int64 都是支持并且等价的.但是在读和写的时候只支持&lt;code&gt;scanf(&amp;quot;%I64d&amp;quot;, ...)&lt;/code&gt;和&lt;code&gt;printf(&amp;quot;%I64d&amp;quot;, ...)&lt;/code&gt;.&lt;br&gt;不支持&lt;code&gt;%lld&lt;/code&gt;是因为MinGW下的GCC和G++使用的&lt;code&gt;msvcrt.dll&lt;/code&gt;动态链接库并不支持C99标准.&lt;br&gt;根据ISO C++标准,在G++下, main函数的返回值必须是int,否则将会导致Compile Error(编译错误)的判答.&lt;/p&gt;
&lt;h5 id=&quot;字符串Split&quot;&gt;&lt;a href=&quot;#字符串Split&quot; class=&quot;headerlink&quot; title=&quot;字符串Split&quot;&gt;&lt;/a&gt;字符串Split&lt;/h5&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SplitString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;amp; s, &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;&amp;amp; v, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;amp; c)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;::size_type pos1, pos2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pos2 = s.find(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pos1 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;::npos != pos2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v.push_back(s.substr(pos1, pos2-pos1));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pos1 = pos2 + c.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pos2 = s.find(c, pos1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pos1 != s.length())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v.push_back(s.substr(pos1));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;C文件读写&quot;&gt;&lt;a href=&quot;#C文件读写&quot; class=&quot;headerlink&quot; title=&quot;C文件读写&quot;&gt;&lt;/a&gt;C文件读写&lt;/h5&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fscanf(fp, &lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fprintf(fp, &lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, output)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 二进制读写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fread(datastream, &lt;span class=&quot;number&quot;&gt;17700&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, fp)&lt;span class=&quot;comment&quot;&gt;; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fwrite(outstream, sizeof(outstream), &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, fp)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文对一些常用的C/C++语言的小技巧或者小知识做一个备忘，以便查找。&lt;/p&gt;
&lt;h5 id=&quot;数字转String&quot;&gt;&lt;a href=&quot;#数字转String&quot; class=&quot;headerlink&quot; title=&quot;数字转String&quot;&gt;&lt;/a&gt;数字转String&lt;/h5&gt;&lt;f
    
    </summary>
    
      <category term="编程语言 | Program Lang." scheme="http://whatbeg.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-Program-Lang/"/>
    
    
      <category term="CS" scheme="http://whatbeg.com/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>用信号量解决进程的同步与互斥探讨</title>
    <link href="http://whatbeg.com/2017/03/06/semaphore.html"/>
    <id>http://whatbeg.com/2017/03/06/semaphore.html</id>
    <published>2017-03-06T11:41:49.000Z</published>
    <updated>2017-03-06T11:48:09.838Z</updated>
    
    <content type="html">&lt;p&gt;本篇也是一篇老文，发布于2015年5月，文章比较长，算老博客看的比较多的了，贴到这儿与大家分享，以求多多交流探讨。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;现代操作系统采用多道程序设计机制，多个进程可以并发执行，CPU在进程之间来回切换，共享某些资源，提高了资源的利用率，但这也使得处理并发执行的多个进程之间的冲突和相互制约关系成为了一道难题。如果对并发进程的调度不当，则可能会出现运行结果与切换时间有关的情况，令结果不可再现，影响系统的效率和正确性，严重时还会使系统直接崩溃。就比如你只有一台打印机，有两个进程都需要打印文件，如果直接让他们简单地并发访问打印机，那么你很可能什么都打印不出来或者打印的文件是…anyway，我们需要增加一些机制来控制并发进程间的这种相互制约关系。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;进程间通信的很多问题的根本原因是我们不知道进程何时切换。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;首先我们了解一下临界资源与临界区的概念：临界资源就是一次只允许一个进程访问的资源，一个进程在使用临界资源的时候，另一个进程是无法访问的，操作系统也不能够中途剥夺正在使用者的使用权利，正所谓“泼出去的女儿嫁出去的水”是也。即临界资源是不可剥夺性资源。那么临界区呢？所谓临界区就是进程中范文临界资源的那段程序代码，注意，是程序代码，不是内存资源了，这就是临界资源与临界区的区别。我们规定临界区的使用原则（也即同步机制应遵循的准则）十六字诀：“空闲让进，忙则等待，有限等待，让权等待”–strling。让我们分别来解释一下：&lt;/p&gt;
&lt;p&gt;（1）空闲让进：临界资源空闲时一定要让进程进入，不发生“互斥礼让”行为。&lt;br&gt;（2）忙则等待：临界资源正在使用时外面的进程等待。&lt;br&gt;（3）有限等待：进程等待进入临界区的时间是有限的，不会发生“饿死”的情况。&lt;br&gt;（4）让权等待：进程等待进入临界区是应该放弃CPU的使用。&lt;/p&gt;
&lt;p&gt;好了，我们进入下一部分。&lt;/p&gt;
&lt;p&gt;进程间通常存在着两种制约关系：直接制约关系和间接制约关系，就是我们通常所说的进程的同步与互斥。顾名思义，一个是合作关系，一个是互斥关系。进程互斥说白了就是“你用的时候别人都不能用，别人用的时候，你也不能去用”，是一种源于资源共享的间接制约关系。进程同步指的是“我们大家利用一些共同的资源区，大家一起合作，完成某些事情，但是我在干某些小事的时候，可能要等到你做完另一些小事”，是一种源于相互合作的直接制约关系。两者区别在于互斥的进程间没有必然的联系，属于竞争者关系，谁竞争到资源（的使用权），谁就使用它，直到使用完才归还。就比如洗衣房的洗衣机这个资源，去洗衣的同学并不需要有必然联系，你们可以互不认识，但是谁竞争到洗衣机的使用权，就可以使用，直到洗完走人。而同步的进程间是有必然联系的，即使竞争到使用权，如果合作者没有发出必要的信息，该进程依然不能执行。就比如排队打水，即使排到你了，如果水箱没水了，你就打不了水，说明你和水箱是有着必然联系的，你得从它里面取水，你们是同步关系，你们合作完成“打水”这个过程。&lt;/p&gt;
&lt;p&gt;那么先来讨论如何实现进程的互斥控制。有下列几种方法：严格轮换（每个进程每次都从头执行到尾，效率不高，可能等待很久），屏蔽中断（刚刚进入临界区时就屏蔽中断，刚要出临界区就打开中断），专用机器指令test_and_set,test_and_clear，加锁，软件方法，信号量机制。讲一下加锁和软件方法，加锁方法如下：设置一个锁标志K表示临界资源的状态，K=1表示临界资源正在被使用，K=0表示没有进程在访问临界资源。如果一个进程需要访问临界资源，那么先检查锁标志K：&lt;br&gt;&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;K&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, 循环检测，直到&lt;span class=&quot;keyword&quot;&gt;K&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;K&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;，设置锁标志为&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;，进入临界区&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;离开临界区时设置锁标志K为0. 软件方法类似，如爱斯基摩人的小屋协议，爱斯基摩人的小屋很小，每次只能容纳一个人进入，小屋内有一个黑板，上面标志这能够进入临界区的进程。若进程申请进入临界区，则先进入小屋检查黑板标志，如果是自己，那么离开小屋进入临界区，执行完后进入小屋修改黑板标志为其他进程，离开小屋。如果小屋黑板标志不是自己，那么反复进入小屋考察黑板标志是不是自己。这两种方法都实现了互斥访问，但是都违反了四条原则之一：让权等待，都需要不断的循环重复检测标志，霸占了CPU资源，不是很好的方法。&lt;/p&gt;
&lt;p&gt;到后来，荷兰计算机科学家Dijkstra于1965年提出了解决进程同步与互斥问题的信号量机制，收到了很好的效果，被一直沿用至今，广泛应用与单处理机和多处理机系统以及计算机网络中。信号量机制就是说两个或者多个进程通过他们都可以利用的一个或多个信号来实现准确无误不冲突的并发执行。如果临界资源不够，就会有一个信号表示出来，如果进程此时想访问，那么就会阻塞到一个队列中，等待调度。当临界资源使用完毕，一个进程改变信号，并及时唤醒阻塞的进程，这就实现了进程间的同步和互斥问题。&lt;/p&gt;
&lt;p&gt;信号量分为整型信号量，记录型信号量，AND信号量以及信号量集。最初的信号量就是整型信号量，定义信号量为一个整型变量，仅能通过两个原子操作P,V来访问，所谓原子操作就是指一组相联的操作要么不间断地执行，要么不执行。这两个操作又称为wait和signal操作或者down和up操作。之所以叫P,V操作是因为Dijkstra是荷兰人，P指的是荷兰语中的“proberen”，意为“测试”，而V指的是荷兰语中的“verhogen”，意为“增加”。最初P,V操作被描述为：&lt;br&gt;&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;P(&lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;):   &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;≤&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)  &amp;#123;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; nothing&amp;#125;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;V(&lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;):   &lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是这样明显违反了“让权等待的原则”，后来发展为记录型信号量，记录型信号量的数据结构是一个两元组，包含信号量的值value和关于此信号量的阻塞队列Q，value具有非负初值，一般反映了资源的数量，只能由P,V操作改变其值。（还有另一种定义，信号量由value和P组成，value为信号量的值，P为指向PCB队列的指针）。&lt;/p&gt;
&lt;p&gt;记录型信号量的P,V操作原语为：&lt;br&gt;&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;P(&lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;):   &lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;.value = &lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;.value-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;.value &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           block(&lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;Q&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;V(&lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;):   &lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;.value = &lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;.value + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;.value &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            wakeup(&lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;Q&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们来详细解释一下这两个操作的含义：&lt;/p&gt;
&lt;p&gt;首先，P操作，首先将S.value减1，表示该进程需要一个临界资源，如果S.value&lt;0，那么说明原来的s.value &lt;=&quot;0，即已经没有资源可用了，于是将进程阻塞到与信号量S相关的阻塞队列中去，如果S.value&lt;0,那么|S.value|其实就表示阻塞队列的长度，即等待使用资源的进程数量。然后，V操作：首先S.value加1，表示释放一个资源，如果S.value&quot; 0，阻塞队列中是由进程的，于是唤醒该队列中的一个进程。那么，为什么s.value=&quot;&quot;&gt; 0时不唤醒进程呢，很简单，因为阻塞队列中没有进程了。&lt;/0，那么说明原来的s.value&gt;&lt;/p&gt;
&lt;p&gt;P操作相当于“等待一个信号”，而V操作相当于“发送一个信号”，在实现同步过程中，V操作相当于发送一个信号说合作者已经完成了某项任务，在实现互斥过程中，V操作相当于发送一个信号说临界资源可用了。实际上，在实现互斥时，P,V操作相当于申请资源和释放资源。&lt;/p&gt;
&lt;p&gt;我们将信号量初值设置为1时通常可实现互斥，因为信号量表示资源可用数目，互斥信号量保证只有一个进程访问临界资源，相当于只有一个访问权可用。设置为0或者N时可以用来实现同步。我们后面将会在生产者-消费者问题中看到这点。用P,V操作实现互斥类似于加锁的实现，在临界区之前加P操作，在临界区之后加V操作，即可互斥控制进程进入临界区，访问临界资源。记录型信号量由于引入了阻塞机制，消除了不让权等待的情况，提高了实现的效率。&lt;/p&gt;
&lt;h2 id=&quot;经典问题&quot;&gt;&lt;a href=&quot;#经典问题&quot; class=&quot;headerlink&quot; title=&quot;经典问题&quot;&gt;&lt;/a&gt;经典问题&lt;/h2&gt;&lt;p&gt;下面通过一些实例详细讲解如何使用信号量机制解决进程同步与互斥问题。先说明一条规律，即：同步与互斥实现的P,V操作虽然都是成对出现，但是互斥的P,V操作出现在同一个进程的程序里，而同步的P,V操作出现在不同进程的程序中。&lt;/p&gt;
&lt;h3 id=&quot;问题1：生产者-消费者问题&quot;&gt;&lt;a href=&quot;#问题1：生产者-消费者问题&quot; class=&quot;headerlink&quot; title=&quot;问题1：生产者-消费者问题&quot;&gt;&lt;/a&gt;问题1：生产者-消费者问题&lt;/h3&gt;&lt;p&gt;经典的同步互斥问题，也称作“有界缓冲区问题”。具体表现为：&lt;/p&gt;
&lt;p&gt;1.两个进程对同一个内存资源进行操作，一个是生产者，一个是消费者。&lt;br&gt;2.生产者往共享内存资源填充数据，如果区域满，则等待消费者消费数据。&lt;br&gt;3.消费者从共享内存资源取数据，如果区域空，则等待生产者填充数据。&lt;br&gt;4.生产者的填充数据行为和消费者的消费数据行为不可在同一时间发生。&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://images.cnitblog.com/blog2015/591194/201504/301954238803051.jpg&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;生产者-消费者之间的同步关系表现为缓冲区空，则消费者需要等待生产者往里填充数据，缓冲区满则生产者需要等待消费者消费。两者共同完成数据的转移或传送。生产者-消费者之间的互斥关系表现为生产者往缓冲区里填充数据的时候，消费者无法进行消费，需要等待生产者完成工作，反之亦然。&lt;/p&gt;
&lt;p&gt;既然了解了互斥与同步关系，那么我们就来设置信号量：&lt;/p&gt;
&lt;p&gt;由于有互斥关系，所以我们应该设置一个互斥量mutex控制两者不能同时操作缓冲区。此外，为了控制同步关系，我们设置两个信号量empty和full来表示缓冲区的空槽数目和满槽数目，即有数据的缓冲区单元的个数。mutex初值为1，empty初值为n，即缓冲区容量，代表初始没有任何数据，有n个空的单元，类似的，full初值为0.&lt;/p&gt;
&lt;p&gt;下面进行生产者-消费者行为设计：&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void Productor() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//制造数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(&amp;amp;empty)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//填充数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(&amp;amp;full)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void Consumer() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(&amp;amp;full)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//消费数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(&amp;amp;empty)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样我们的分析也就完成了，&lt;a href=&quot;http://www.cnblogs.com/whatbeg/p/4419979.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/whatbeg/p/4419979.html&lt;/a&gt; 这篇文章里有我用Windows API实现的用信号量实现生产者-消费者问题。&lt;/p&gt;
&lt;p&gt;下面，问题来了，我们的生产者和消费者里面都有两个P,两个V操作，那么两个P操作可否调换顺序呢？V操作呢？想一想。&lt;/p&gt;
&lt;p&gt;答案是P操作不可对换，V操作可以。为什么呢？想象一下这种情况，生产者执行P(mutex)把互斥量锁住，然后再P(empty),此时empty &amp;lt; 0，锁住，无法继续生产，等待消费者消费，消费者倒是也想消费，可是mutex被锁住了啊，于是两个人就等啊等，就成了等待戈多了。。但是V操作是可以随意调换的，因为V操作是解锁和唤醒，不会因为它锁住什么。&lt;/p&gt;
&lt;h3 id=&quot;问题2：读者-写者问题&quot;&gt;&lt;a href=&quot;#问题2：读者-写者问题&quot; class=&quot;headerlink&quot; title=&quot;问题2：读者-写者问题&quot;&gt;&lt;/a&gt;问题2：读者-写者问题&lt;/h3&gt;&lt;p&gt;第二个经典问题是读者-写着问题，它为数据库的访问建立了一个模型。规则如下：&lt;/p&gt;
&lt;p&gt;1.一个进程在读的时候，其他进程也可以读。&lt;br&gt;2.一个进程在读/写的时候，其他进程不能进行写/读。&lt;br&gt;3.一个进程在写的时候，其他进程不能写。&lt;/p&gt;
&lt;p&gt;我们来分析他们的关系，首先，这个问题没有明显的同步关系，因为在这个问题里，读和写并不要合作完成某些事情。但是是有互斥关系的，写者和写者，写者和读者是有互斥关系的，我们需要设置一个mutex来控制其访问，但是单纯一个信号量的话会出现读者和读者的互斥也出现了，因为我们可能有多个读者，所以我们设置一个变量ReadCount表示读者的数量，好，这个时候，对于ReadCount又要实现多个读者对他的互斥访问，所以还要设置一个RC_mutex。这样就好了。然后是行为设计：&lt;br&gt;&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void Reader&lt;span class=&quot;comment&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(1)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P&lt;span class=&quot;comment&quot;&gt;(&amp;amp;RC_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rc = rc + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(rc == 1)&lt;/span&gt; P&lt;span class=&quot;comment&quot;&gt;(&amp;amp;mutex)&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//如果是第一个读者，那么限制写者的访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V&lt;span class=&quot;comment&quot;&gt;(&amp;amp;RC_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//读数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P&lt;span class=&quot;comment&quot;&gt;(&amp;amp;RC_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rc = rc - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(rc == 0)&lt;/span&gt; V&lt;span class=&quot;comment&quot;&gt;(&amp;amp;mutex)&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//如果是最后一个读者，那么释放以供写者或读者访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V&lt;span class=&quot;comment&quot;&gt;(&amp;amp;RC_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void Writer&lt;span class=&quot;comment&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(1)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P&lt;span class=&quot;comment&quot;&gt;(&amp;amp;mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//写数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V&lt;span class=&quot;comment&quot;&gt;(&amp;amp;mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实，这个方法是有一定问题的，只要趁前面的读者还没读完的时候新一个读者进来，这样一直保持，那么写者会一直得不到机会，导致饿死。有一种解决方法就是在一个写者到达时，如果后面还有新的读者进来，那么先挂起那些读者，先执行写者，但是这样的话并发度和效率又会降到很低。有人提出了一种写者优先的解法，有点不好理解，这里给出实现：&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//写者优先的读者-写者问题解法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Semaphore x = y = z = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;    //x控制ReadCount的互斥访问，y控制WriteCount的互斥访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Semaphore rsem = wsem = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;  //rsem,wsem分别表示对读和写的互斥控制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ReadCount = WriteCount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void Reader() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(z)&lt;span class=&quot;comment&quot;&gt;;                       //z保证写跳过读，做到写优先&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(rsem)&lt;span class=&quot;comment&quot;&gt;;                    //控制对读的访问，如果有写者，那么此处不成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(x)&lt;span class=&quot;comment&quot;&gt;;                       //对RC的互斥控制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ReadCount++&lt;span class=&quot;comment&quot;&gt;;                &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ReadCount == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) P(wsem)&lt;span class=&quot;comment&quot;&gt;; //第一个读者出现后，锁住不让写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V(x)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V(rsem)&lt;span class=&quot;comment&quot;&gt;;                    //释放读的访问，以使其他读者进入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V(z)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//读数据...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(x)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ReadCount--&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ReadCount == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) V(wsem)&lt;span class=&quot;comment&quot;&gt;; //如果是最后一个读者，释放对写的信号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V(x)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void Writer() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(y)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WriteCount++&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(WriteCount == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) P(rsem)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V(y)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(wsem)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//写数据...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V(wsem)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(y)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WriteCount--&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(WriteCount == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) V(rsem)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V(y)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题3：哲学家就餐问题&quot;&gt;&lt;a href=&quot;#问题3：哲学家就餐问题&quot; class=&quot;headerlink&quot; title=&quot;问题3：哲学家就餐问题&quot;&gt;&lt;/a&gt;问题3：哲学家就餐问题&lt;/h3&gt;&lt;p&gt;哲学家就餐问题描述如下：&lt;/p&gt;
&lt;p&gt;有五个哲学家，他们的生活方式是交替地进行思考和进餐，哲学家们共用一张圆桌，分别坐在周围的五张椅子上，在圆桌上有五个碗和五支筷子，平时哲学家进行思考，饥饿时便试图取其左、右最靠近他的筷子，只有在他拿到两支筷子时才能进餐，进餐完毕，放下筷子又继续思考。&lt;/p&gt;
&lt;p&gt;约束条件&lt;br&gt;(1)只有拿到两只筷子时，哲学家才能吃饭。&lt;br&gt;(2)如果筷子已被别人拿走，则必须等别人吃完之后才能拿到筷子。&lt;br&gt;(3)任一哲学家在自己未拿到两只筷子吃饭前，不会放下手中拿到的筷子。&lt;br&gt;(4)用完之后将筷子返回原处&lt;/p&gt;
&lt;p&gt;分析：筷子是临界资源，每次只被一个哲学家拿到，这是互斥关系。如果筷子被拿走，那么需要等待，这是同步关系。&lt;/p&gt;
&lt;p&gt;容易想到一种错误的解法，所以设置一个信号量表示一只筷子，有5只筷子，所以设置5个信号量，哲学家每次饥饿时先试图拿左边的筷子，再试图拿右边的筷子，拿不到则等待，拿到了就进餐，最后逐个放下筷子。这种情况可能会产生死锁，因为我们不知道进程何时切换（这也是很多IPC问题的根本原因），如果5个哲学家同时饥饿，同时试图拿起左边的筷子，也很幸运地都拿到了，那么他们拿右边的筷子的时候都会拿不到，而根据第三个约束条件，都不会放下筷子，这就产生了死锁。《现代操作系统》中记载的一种解法是仅当一个哲学家左右的筷子都可用时，才拿起筷子，将“试图获取两个筷子”作为临界资源，用一个互斥量mutex实现对其的互斥控制，然后用n个变量记录哲学家的状态（饥饿，进餐，思考&amp;lt;可有可无，因为除了前两者以外只会思考&amp;gt;），然后用一个同步信号量数组，每个信号量对应一个哲学家，来保证哲学家得不到自己所需筷子的时候阻塞。算法如下：&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://images.cnitblog.com/blog2015/591194/201504/302312154437620.jpg&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;还有一种解法是让奇数号与偶数号的哲学家拿筷子的先后顺序不同，以破坏环路等待条件。还可以只允许4个哲学家同时进餐（4个人都拿起一只筷子的时候，第5个人不能再拿筷子，这样就会空出一只筷子）&lt;/p&gt;
&lt;h2 id=&quot;例子分析&quot;&gt;&lt;a href=&quot;#例子分析&quot; class=&quot;headerlink&quot; title=&quot;例子分析&quot;&gt;&lt;/a&gt;例子分析&lt;/h2&gt;&lt;p&gt;至此，我们已经可以总结出一点用信号量解决同步互斥问题的基本规律和一般步骤：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;（1）分析各进程间的制约关系，从而得出同步与互斥关系&lt;br&gt;（2）根据（1）中的分析，设置信号量&lt;br&gt;（3）编写伪代码，实施P,V操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同步：多个进程在执行次序上的协调，相互等待消息&lt;br&gt;互斥：对临界资源的使用&lt;/p&gt;
&lt;p&gt;要注意的是，&lt;strong&gt;虽然P,V操作在每一个进程中都是成对出现的，但不一定是针对一个信号量。互斥信号量的P,V操作总是出现在一个进程中的临界区的前后，而同步信号量的P,V操作总是出现在具有同步关系的两个进程中，需要等待消息的一方执行P操作，发出消息的一方执行V操作。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面通过诸多例题来熟悉，掌握及训练用信号量解决同步与互斥问题的一般方法。&lt;/p&gt;
&lt;h3 id=&quot;问题4：放水果问题&quot;&gt;&lt;a href=&quot;#问题4：放水果问题&quot; class=&quot;headerlink&quot; title=&quot;问题4：放水果问题&quot;&gt;&lt;/a&gt;问题4：放水果问题&lt;/h3&gt;&lt;p&gt;桌上有一空盘，最多允许存放一只水果。爸爸可向盘中放一个苹果，妈妈可向盘中放一个桔子。&lt;br&gt;儿子专等吃盘中的桔子，女儿专等吃苹果。&lt;br&gt;试用P、V操作实现爸爸、妈妈、儿子、女儿四个并发进程的同步。&lt;/p&gt;
&lt;p&gt;分析：临界资源是盘子，放的时候不能取，取的时候不能放，取的时候不能再取。同步关系：爸爸、妈妈与盘子为空，儿子与盘中有桔，女儿与盘中有苹果。&lt;/p&gt;
&lt;p&gt;所以设置一个mutex互斥信号量来控制对盘子的访问，用empty，orange，apple分别代表以上同步关系。程序如下：&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Semaphore mutex = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Semaphore empty = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, orange = apple = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mother:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(empty)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//放入桔子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(mutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(orange)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;father:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(empty)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//放入苹果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(mutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(apple)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;son:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(orange)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(mutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//取桔子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(empty)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;daughter:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(apple)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(mutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//取苹果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(empty)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题5：读文件问题&quot;&gt;&lt;a href=&quot;#问题5：读文件问题&quot; class=&quot;headerlink&quot; title=&quot;问题5：读文件问题&quot;&gt;&lt;/a&gt;问题5：读文件问题&lt;/h3&gt;&lt;p&gt;四个进程A、B、C、D都要读一个共享文件F，系统允许多个进程同时读文件F。但限制是进程A和进程C不能同时读文件F，进程B和进程D也不能同时读文件F。为了使这四个进程并发执行时能按系统要求使用文件，现用P、V操作进行管理。&lt;/p&gt;
&lt;p&gt;分析：互斥关系：A和C读文件时互斥，B和D读文件时互斥，没有同步关系。&lt;/p&gt;
&lt;p&gt;所以设置两个互斥信号量：AC_mutex,BD_mutex即可。伪代码如下：&lt;br&gt;&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Semaphore AC_mutex = BD_mutex = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(1)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P&lt;span class=&quot;comment&quot;&gt;(AC_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//read F&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V&lt;span class=&quot;comment&quot;&gt;(AC_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(1)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P&lt;span class=&quot;comment&quot;&gt;(BD_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//read F&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V&lt;span class=&quot;comment&quot;&gt;(BD_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(1)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P&lt;span class=&quot;comment&quot;&gt;(AC_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//read F&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V&lt;span class=&quot;comment&quot;&gt;(AC_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(1)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P&lt;span class=&quot;comment&quot;&gt;(BD_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//read F&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V&lt;span class=&quot;comment&quot;&gt;(BD_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题6：阅览室问题-图书馆问题&quot;&gt;&lt;a href=&quot;#问题6：阅览室问题-图书馆问题&quot; class=&quot;headerlink&quot; title=&quot;问题6：阅览室问题 / 图书馆问题&quot;&gt;&lt;/a&gt;问题6：阅览室问题 / 图书馆问题&lt;/h3&gt;&lt;p&gt;有一阅览室，读者进入时必须先在一张登记表上进行登记，该表为每一座位列一表目，包括座号和读者姓名。读者离开时要消掉登记信号&lt;br&gt;，阅览室中共有100个座位。用PV操作控制这个过程。&lt;/p&gt;
&lt;p&gt;分析：&lt;/p&gt;
&lt;p&gt;由于每个读者都会进行一样的操作：登记-&amp;gt;进入-&amp;gt;阅读-&amp;gt;撤销登记-&amp;gt;离开，所以建立一个读者模型即可。&lt;br&gt;临界资源有：座位，登记表&lt;br&gt;读者间有座位和登记表的互斥关系，所以设信号量empty表示空座位的数量，初始为100，mutex表示对登记表的互斥访问，初始为1。&lt;/p&gt;
&lt;p&gt;P,V操作如下：&lt;br&gt;&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Semaphore mutex = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, empty = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Reader&lt;span class=&quot;comment&quot;&gt;()&lt;/span&gt;：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;While&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(true)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P&lt;span class=&quot;comment&quot;&gt;(empty)&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;//申请空座位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P&lt;span class=&quot;comment&quot;&gt;(mutex)&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;//申请登记表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//登记  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V&lt;span class=&quot;comment&quot;&gt;(mutex)&lt;/span&gt;           &lt;span class=&quot;comment&quot;&gt;//释放登记表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//进入阅读&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P&lt;span class=&quot;comment&quot;&gt;(mutex)&lt;/span&gt;            &lt;span class=&quot;comment&quot;&gt;//申请登记表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//撤销登记&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V&lt;span class=&quot;comment&quot;&gt;(mutex)&lt;/span&gt;            &lt;span class=&quot;comment&quot;&gt;//释放登记表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V&lt;span class=&quot;comment&quot;&gt;(empty)&lt;/span&gt;            &lt;span class=&quot;comment&quot;&gt;//释放座位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题7：单行道问题&quot;&gt;&lt;a href=&quot;#问题7：单行道问题&quot; class=&quot;headerlink&quot; title=&quot;问题7：单行道问题&quot;&gt;&lt;/a&gt;问题7：单行道问题&lt;/h3&gt;&lt;p&gt;一段双向行驶的公路，由于山体滑坡，一小段路的一般车道被阻隔，该段每次只能容纳一辆车通过，一个方向的多个车辆可以紧接着通过，试用P,V操作控制此过程。&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://images.cnitblog.com/blog2015/591194/201505/010058320368735.jpg&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;分析：&lt;br&gt;临界资源为一半被阻隔的一小段区域，所以需要Go_mutex,Come_mutex来控制每个方向车辆通过该路段，以及实现两个方向的同步关系，同步关系即为：当某方向已有车辆在通行时，另一方向的车辆必须等待，反之亦然。类似于读者-写者问题，车辆从两边通过相当于两个读者，我们设立两个计数器A和B分别代表两个方向的汽车数量，还要设置两个信号量A_mutex和B_mutex来实现对计数器的互斥访问，因为山体滑坡处只允许一辆车通过，所以还需设置一个互斥量mutex保证相同方向的车辆依次通过该处。&lt;/p&gt;
&lt;p&gt;于是程序如下（PV操作包含其中）：&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; N &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; TRUE &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; Semaphore&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Semaphore A = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, B = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HANDLE Go_mutex,Come_mutex&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HANDLE A_mutex,B_mutex&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HANDLE mutex&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void down(HANDLE handle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WaitForSingleObject(handle, INFINITE)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void up(HANDLE handle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ReleaseSemaphore(handle, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, NULL)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD WINAPI Come(LPVOID v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(TRUE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        down(Come_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        down(A_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        A = A+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(A == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            down(Go_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            printf(&lt;span class=&quot;string&quot;&gt;&quot;                    &amp;lt;&amp;lt;&amp;lt;=====开始自东向西\n&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        up(A_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        up(Come_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        down(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//自东向西通过该路段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        printf(&lt;span class=&quot;string&quot;&gt;&quot;                    &amp;lt;&amp;lt;&amp;lt;=====第%s辆车\n&quot;&lt;/span&gt;,(char *)v)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        printf(&lt;span class=&quot;string&quot;&gt;&quot;         END        &amp;lt;&amp;lt;&amp;lt;=====第%s辆车\n&quot;&lt;/span&gt;,(char *)v)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        up(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        down(A_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        A = A&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(A == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            up(Go_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            printf(&lt;span class=&quot;string&quot;&gt;&quot;                    自东向西的所有车辆行驶完毕\n&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        up(A_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Sleep(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWORD WINAPI Go(LPVOID v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(TRUE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        down(Go_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        down(B_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        B = B+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(B == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            down(Come_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            printf(&lt;span class=&quot;string&quot;&gt;&quot;开始自西向东====&amp;gt;\n&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        up(B_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        up(Go_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        down(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//自西向东通过该路段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        printf(&lt;span class=&quot;string&quot;&gt;&quot;第%s辆车=====&amp;gt;&amp;gt;&amp;gt;\n&quot;&lt;/span&gt;,(char *)v)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        printf(&lt;span class=&quot;string&quot;&gt;&quot;第%s辆车=====&amp;gt;&amp;gt;&amp;gt;     END\n&quot;&lt;/span&gt;,(char *)v)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        up(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        down(B_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        B = B&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(B == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            up(Come_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            printf(&lt;span class=&quot;string&quot;&gt;&quot;自西向东的所有车辆行驶完毕\n&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        up(B_mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Sleep(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DWORD Tid&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char AThread[&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char BThread[&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mutex      = CreateSemaphore(NULL, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, NULL)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A_mutex    = CreateSemaphore(NULL, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, NULL)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    B_mutex    = CreateSemaphore(NULL, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, NULL)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Go_mutex   = CreateSemaphore(NULL, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, NULL)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Come_mutex = CreateSemaphore(NULL, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, NULL)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;i&amp;lt;4;i++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AThread[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AThread[i][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CreateThread(NULL,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,Come,AThread[i],&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&amp;amp;Tid)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;i&amp;lt;8;i++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BThread[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BThread[i][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CreateThread(NULL,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,Go,BThread[i],&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&amp;amp;Tid)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Sleep(&lt;span class=&quot;number&quot;&gt;20000&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://images0.cnblogs.com/blog2015/591194/201505/241529590481971.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;从其中可以看出，车辆正常交替顺序通过该路段。数字重复出现是因为线程被重复地调度执行。&lt;/p&gt;
&lt;h3 id=&quot;问题8：理发师问题&quot;&gt;&lt;a href=&quot;#问题8：理发师问题&quot; class=&quot;headerlink&quot; title=&quot;问题8：理发师问题&quot;&gt;&lt;/a&gt;问题8：理发师问题&lt;/h3&gt;&lt;p&gt;理发店理有一位理发师、一把理发椅和n把供等候理发的顾客坐的椅子 如果没有顾客，理发师便在理发椅上睡觉。 一个顾客到来时，它必须叫醒理发师，如果理发师正在理发时又有顾客来到，则如果有空椅子可坐，就坐下来等待，否则就离开。用PV操作管理该过程。&lt;/p&gt;
&lt;p&gt;分析：&lt;/p&gt;
&lt;p&gt;法1：首先设置一个count表示等待的人数（包括理发椅上的那个人），初值为0，以供后来者判断是否应该离开。同时对count的访问要保证互斥，所以设置mutex信号量来保证互斥，初值为1。&lt;br&gt;临界资源：凳子，理发椅。 分别设置waitchair,barchair信号量，初值分别为n和1，表示临界资源数量。&lt;br&gt;同步关系：顾客和理发师之间有同步关系，用ready和done信号量来表示，初值均为0，ready表示顾客有没有准备好，done表示理发师是否完成一次理发。&lt;br&gt;注意：&lt;strong&gt;并非每一个进程都需要while(1)无限循环，比如此例，顾客剪完一次头发就走了，不可能马上再来剪，而以前的生产者-消费者不同，他们都是可以不断生产消费的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;写出P,V操作如下：&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Semaphore waitchair = n&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Semaphore barchair = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Semaphore ready = done = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Semaphore mutex = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;barber:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(ready)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        理发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(done)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;consumer:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(count &amp;lt;= n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count = count + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        离开&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(waitchair)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(barchair)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V(waitchair)&lt;span class=&quot;comment&quot;&gt;;   //离开等待椅去理发椅需要释放等待椅!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V(ready)&lt;span class=&quot;comment&quot;&gt;;       //准备好了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(done)&lt;span class=&quot;comment&quot;&gt;;        //等待理发完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V(barchair)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count = count - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    离开&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;法2：将凳子和理发椅看做同一种资源，因为只要理发椅空就一定会有人凑上去，所以相当于每个位置都是理发椅，理发师只需要去每个有人的座位理发即可。&lt;br&gt;还是设置count表示正在理发店中的人数，以便决定后来者是否离开。&lt;br&gt;同步关系仍用ready和done来表示。&lt;/p&gt;
&lt;p&gt;算法：&lt;br&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Semaphore ready = done = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Semaphore mutex = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;barber:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P(ready)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        理发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(done)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;consumer:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;lt;= n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        V(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        离开&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V(ready)&lt;span class=&quot;comment&quot;&gt;;       //准备好了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(done)&lt;span class=&quot;comment&quot;&gt;;        //等待理发完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    P(mutex)&lt;span class=&quot;comment&quot;&gt;;      //也可由理发师来做count-1的操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    V(mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    离开&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;好了，先说这么多，例题会持续更新增加，感兴趣的朋友可以关注下。&lt;br&gt;鄙人学力有限，有不足或错误之处敬请指出，不胜感激。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;1.《现代操作系统》           –Andrew S. Tanenbaum&lt;br&gt;2.《操作系统设计与实现》 –Andrew S. Tanenbaum&lt;br&gt;3.《操作系统精髓与设计原理》  –Strling&lt;br&gt;4.《2015操作系统高分笔记》  –刘泱主编&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本篇也是一篇老文，发布于2015年5月，文章比较长，算老博客看的比较多的了，贴到这儿与大家分享，以求多多交流探讨。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;现代操作系
    
    </summary>
    
      <category term="计算机相关 | CS.Related" scheme="http://whatbeg.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3-CS-Related/"/>
    
    
      <category term="CS" scheme="http://whatbeg.com/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning读书笔记系列 写作计划</title>
    <link href="http://whatbeg.com/2017/02/27/deeplearning0.html"/>
    <id>http://whatbeg.com/2017/02/27/deeplearning0.html</id>
    <published>2017-02-27T14:48:25.000Z</published>
    <updated>2017-03-30T12:01:05.083Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前看了一些Bengio的《Deep Learning》，有许多收获和感触，但是由于缺乏回顾，反思与实践加以消化，许多东西已经忘记了，借这个契机，想写一套专门阐述自己阅读Deep Learning及Machine Learning相关资料的阅读心得或者读书笔记的文章，文章不拘深浅，不拘长短，只求能够阐述出自己的心得收获，便于加深理解，如果能够把一件事情讲明白，那就不会那么轻易地忘记了，知识在脑子里也会更加成系统，不然老是东一点西一点，拣了芝麻丢了西瓜，或是狗熊掰棒子，一路掰一路扔。&lt;br&gt;其次，实践也很重要，光看书始终是纸上谈兵，只有实实在在地利用深度学习去做一些事情，实现了某些效果，那样的感受才会更深切。总而言之，知行合一很重要。&lt;br&gt;当然，文章也不仅仅局限于对Bengio的《Deep Learning》的读书笔记，也包括相关书籍，文章，论文，也不必局限于DL这一个子领域，适当拓展到Machine Learning也是可以的。&lt;br&gt;虽然计划着，却仍有两个忧虑，一是怕没有时间，二是实在才疏学浅，写的浅不要紧，怕就怕出错，闹出笑话还误了读者朋友们，那可是要被骂惨的。但是反过来又提醒自己，“怕什么真理无穷，进一寸有进一寸的欢喜”，没时间不要紧，一点一滴慢慢做就是了，二一个实在有不妥之处相比读者们也会提出来的，所以就不要脸【捂脸】的先忽略这两个问题。&lt;/p&gt;
&lt;h2 id=&quot;写作计划&quot;&gt;&lt;a href=&quot;#写作计划&quot; class=&quot;headerlink&quot; title=&quot;写作计划&quot;&gt;&lt;/a&gt;写作计划&lt;/h2&gt;&lt;p&gt;写作计划暂时包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://whatbeg.com/2017/03/29/deeplearningbook-01.html&quot;&gt;Deep Learning读书笔记（1）【开篇】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Deep Learning读书笔记（2）–数学基础简摘&lt;/li&gt;
&lt;li&gt;Deep Learning读书笔记（3）–数值计算&lt;/li&gt;
&lt;li&gt;Deep Learning读书笔记（4）–机器学习基础&lt;/li&gt;
&lt;li&gt;Deep Learning读书笔记（5）–关于机器学习的提纲（或机器学习总论）&lt;/li&gt;
&lt;li&gt;Deep Learning读书笔记（6）–神经网络&lt;/li&gt;
&lt;li&gt;Deep Learning读书笔记（7）–DL的优化&lt;/li&gt;
&lt;li&gt;Deep Learning读书笔记（8）–DL的正则化&lt;/li&gt;
&lt;li&gt;Deep Learning读书笔记（9）–实践方法论&lt;/li&gt;
&lt;li&gt;Deep Learning读书笔记（10）–DL前沿&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计划1年时间完成，即2018年3月1日前完成，希望能够有始有终，千万不要烂尾。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前看了一些Bengio的《Deep Learning》，有许多收获和感触，但是由于缺乏回顾，反思与实践加以消化，许多东西已经忘记了，借这个
    
    </summary>
    
      <category term="深度学习 | Deep Learning" scheme="http://whatbeg.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Deep-Learning/"/>
    
    
      <category term="机器学习" scheme="http://whatbeg.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习" scheme="http://whatbeg.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>《暗时间》读书笔记</title>
    <link href="http://whatbeg.com/2017/02/20/darktime.html"/>
    <id>http://whatbeg.com/2017/02/20/darktime.html</id>
    <published>2017-02-20T07:57:39.000Z</published>
    <updated>2017-02-20T08:02:51.020Z</updated>
    
    <content type="html">&lt;p&gt;去年冬天在机缘巧合之下，开始阅读刘未鹏老师的这本《暗时间》，受益良多，得到了很多启发，觉得应该做做读书笔记，方不枉费读书的功夫。&lt;/p&gt;
&lt;p&gt;总的来说，《暗时间》是一本关于思维，学习的本质知识以及解题，如何解题等的一些想法，第一原则就是为了帮助读者提高思维能力，培养思考的习惯，从而能够充分利用我们身边的“暗时间”，在同样的生命中获得更多的收获。&lt;/p&gt;
&lt;p&gt;书中一些要点摘录如下，并做了自己的一些思考总结，以备翻看。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;说到对某件事投入时间，实际投入的是时间与效率的乘积&lt;/strong&gt;&lt;br&gt;不是说投入的绝对时间越多，收获就越多，进步就越大。即使程序员有时整天面对着电脑，但是如果心没有静下来，这里翻翻那里看看，这样的时间的效率就很低，基本上就算浪费了。所以说，专注地做1个小时事情可能比得上在那盲目地坐一下午强得多，这就是为什么有些人看似很努力，却得不到很好地效果的原因之一吧。记得有位大师说过，一个人一天只能够全神贯注的工作最多4个小时，这一天的绝大部分收获也在这4个小时，所以，并不是“显得很努力”就是最好的，与其在“无效时间”里面耗费精力做着各种“无聊”的事，倒不如对睡觉养足精神来的好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;把要做的事情，要学习的东西，常驻脑中，利用“暗时间”（即我们做很多琐事的时间）去反刍与消化。&lt;/strong&gt;&lt;br&gt;书中指的暗时间包括吃饭，睡前，行走，上厕所等等琐碎的时间，在这段时间如果有一个问题在脑中，利用这些时间去思考这个问题，这些知识，就相当于有了比别人更加“充足”的时间，并且也增加了对该问题，该知识的深入，多角度思考，一举两得。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;任务切换是有开销的，所以专注很重要。能不能做到高效学习，关键在于能不能够迅速进入专注状态以及能够保持专注状态多久。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设计自己的进度条，避免看不到尽头而产生放弃的心理。&lt;/strong&gt;&lt;br&gt;我们生活中很多事情都是三分钟热度，一个重要原因就是，我们在开始做某件事情后，发现“啥时候是个头啊”，看不到完成的希望，看不到达成目标的激励，让我们萌生放弃的想法。举个例子来说，去年我有一段很长的空闲时间，正好那时候有个很火的韩剧播出，于是我就决定去学学韩语，也坚持了一段时间，也享受过一点点进步的喜悦，看到电视剧中的很多句子居然能够听懂一些了，非常兴奋，但是当那个韩剧播完的时候，我渐渐的就提不起精神去学了，一大原因就是缺少了直接的激励，也没有什么明确地目标，或者进度条的概念，总觉得还有好多要学啊，加之别的事情又来了，于是就渐渐地扔下了。如果说真的确定要学，并且学好的话，我就可以定一个目标，比如说多久以后达到TOPIK多少级，然后定期地测试自己的学习成果，那么应该在这条路上会走的更远吧。归根结底，人类看不到激励的时候总是容易放弃，这是人的本性之一，所以说没有坚持有时候不是你自制力的问题，而是知识的问题，即你是否知道这一人类的本性，并且采取办法去抵抗这一本性，引导你的本性的问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过早退出是一切失败的根源。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兴趣遍地都是，真正稀缺的是专注和持之以恒。&lt;/strong&gt;&lt;br&gt;世界上有趣的东西很多，有好奇心的人也非常多，所有有很多兴趣是很正常的，也是很好的，这至少说明你对这个世界还抱有很多好奇心，可是只有一定的持之以恒才能真正把一份兴趣变成爱好，再加上一份专注，才能使之真正变成一份技能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;饿死在干草堆中的驴子。&lt;/strong&gt;&lt;br&gt;我们常常会进入一种焦虑状态，有时间，可以做的也很多，可是难以选择，做这个有这个的好处，做那个有那个的好处，然而两个没法兼顾，所以我们会一直纠结，然后时间过去了。。就像一只驴子，有很多干草，它却一直在纠结吃哪堆，结果饿死了。这时候唯一的方法就是通过自己的判断，迅速选择一件事，做下去再说，即使最后发现并不是你最想做的，或者说走了弯路，也不会白做，总会比在纠结焦虑中把时间消耗掉要强得多。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;记忆时，抽象出来得到范围更广的知识，来理解记忆，解决问题是，抽象出本质，便于找到解决方法。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;经常回顾所学知识，不管什么方式，最好能够抽象，推广和举一反三。&lt;/strong&gt;&lt;br&gt;常常回顾才能够逐渐融入到自己的知识结构中去，不然学完很快就忘了，就失去了这个知识的联想，遇到这方面问题时便想不起来学过的那个知识了，只有不断地捡起来，捡的多了，慢慢就内化了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;让思考成为习惯，时刻有一个问题在脑中。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;趁着有热情，一股脑儿把开头熬过去。&lt;/strong&gt;&lt;br&gt;万事开头难，结束似乎也不容易。就算把开头熬过去，也不见得会将这件事坚持下去，但是熬过这段最难的开头，似乎对接下来的“熬”有帮助作用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重要的事情优先，无关紧要的琐事能不做就不做。&lt;/strong&gt;&lt;br&gt;节省精力，节省精力，节省精力，重说三，把精力花费在真正重要的事情上，产生更大的价值，当然，适当的娱乐和消遣也是必要。听老人们说，长寿的秘诀在于少操心。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根据主题来查阅资料，而非反之。&lt;/strong&gt;&lt;br&gt;有两种解决问题或者学习的方式，一种是先把书过一遍，再看是否应用在这个问题上，一个问题可能关联很多知识，所以可能要看的书很多；另一种是先去做，遇到不会的才去看书，找这方面的知识帮助解决问题。第一种对于解决特定问题来说时间消耗有点大，除非是希望在这方面精通的，这时可以广泛地涉猎这方面的书籍，否则，为了解决一个问题要从基本理论学期也太慢了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;带着问题学习。&lt;/strong&gt;&lt;br&gt;不错的学习方式，值得尝试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有选择的阅读，而不是逐字逐句。&lt;/strong&gt;&lt;br&gt;不要做读书的强迫症，有些时候并不需要逐字逐句看完，生命宝贵。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;失败即成功，成功即失败。&lt;/strong&gt;&lt;br&gt;即使失败，却能够带来不少的信息，带来经验与教训，有利于下一次的实践。&lt;br&gt;而有时候太顺利的成功却会让我们忽略掉过程中的许多重要的点，并不是一件特别好的事。&lt;br&gt;把这个“成功”放到世俗意义上来讲，成功者在成功之后可能获得了丰厚的财富或者名誉或者权力，但是他背负的东西也更多了，责任也更多了，手脚逐渐被束缚起来，于是，许多成功者在成功之后也就逐渐变得“平庸”，所以也可以说，“成功即失败”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;从别人的错误中学习。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客观意味着承认存在未知信息的可能性，理性意味着能够从对立面的视角去看问题和思考。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改变即有的习惯，依靠的不是自制力，而是知识。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持续学习和思考，只写你真正思考和总结之后的产物，其他的一切都会随之而来。（博客）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;困难的路越走越容易，容易的路越走越困难，遇到问题不必急着找捷径，在自己解决的过程中可能会有意想不到的收获。&lt;/strong&gt;&lt;br&gt;就像做题不会不要急着看答案，自己找找方法，多琢磨琢磨，收获可能比较大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;个人核心竞争力是指自己独特的个性，背景，知识和经验的组合，如果这种组合 1)绝无仅有 2)在实践中有价值 3)具有可持续发展性，那么这就是核心竞争力。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;专业技能，跨领域技能，学习能力，性格要素（专注，持之以恒，好奇心，自省，自信，谦卑）。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;“我是不是已经掌握了这个知识最深刻最本质的东西？”。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;手中有锤，心中无锤。&lt;/strong&gt;&lt;br&gt;看到问题，分析问题，再找解决问题的“锤子”（方法），而不是方法去套问题。**&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解本质才能做到难以忘却。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;已知-&amp;gt;可知， 结论-&amp;gt;须知， 寻找可知与须知的结合点，就能实现成功解决问题。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;去年冬天在机缘巧合之下，开始阅读刘未鹏老师的这本《暗时间》，受益良多，得到了很多启发，觉得应该做做读书笔记，方不枉费读书的功夫。&lt;/p&gt;
&lt;p&gt;总的来说，《暗时间》是一本关于思维，学习的本质知识以及解题，如何解题等的一些想法，第一原则就是为了帮助读者提高思维能力，培养思考的
    
    </summary>
    
      <category term="读书 | Reading" scheme="http://whatbeg.com/categories/%E8%AF%BB%E4%B9%A6-Reading/"/>
    
    
      <category term="读书" scheme="http://whatbeg.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>关于KMP算法的本质之思考</title>
    <link href="http://whatbeg.com/2017/02/18/kmpreview.html"/>
    <id>http://whatbeg.com/2017/02/18/kmpreview.html</id>
    <published>2017-02-18T09:47:43.000Z</published>
    <updated>2017-02-18T09:51:41.659Z</updated>
    
    <content type="html">&lt;p&gt;以前看KMP算法的时候，总是无法理解next函数以及next函数的求法以及匹配时j=next[j]的做法的直观意义。这次看《暗时间》这本书的时候谈到一个知识的本质问题，有提到KMP，于是就想着能不能够从本质的角度出发去重新理解下KMP呢？&lt;/p&gt;
&lt;p&gt;KMP的本质是什么？或者说，这个算法做了什么？以前的确从来没有问过自己这个问题。或许是习惯于在书上扫一眼KMP是干嘛的，具体怎么操作，怎么用，下次做字符串匹配时套一下模板就好了。但是现在，我要试着探寻一下KMP的内在本质。&lt;/p&gt;
&lt;p&gt;上面的问题不难回答，KMP是用来做字符串匹配的，但是，这个答案还不够完善，应该说KMP是能够在O(n+m)时间内完成字符串匹配的一个算法。后者强调了KMP的高效性，相比于朴素的字符串匹配中O(nm)的复杂度，这是一个巨大的提升。&lt;/p&gt;
&lt;p&gt;这里我不打算详述KMP算法过程，&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;字符串匹配的KMP算法. 阮一峰&lt;/a&gt;这篇文章讲解得非常清楚，其实这篇文章是我认为所有的网上博文中解释最通俗易懂的。当然，我在这次的理解中配合了&lt;a href=&quot;http://blog.csdn.net/u011564456/article/details/20862555?utm_source=tuicool&amp;amp;utm_medium=referral&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章1&lt;/a&gt;和&lt;a href=&quot;http://blog.csdn.net/yutianzuijin/article/details/11954939/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章2&lt;/a&gt;来完成理解。&lt;/p&gt;
&lt;p&gt;假设原串为S，长度为n，我们需要看字符串f（长度为m）是否在S中。&lt;br&gt;总的来说，当我们朴素地去进行字符串匹配时，首先将S和f对齐，从头开始匹配过去，我们是发现到哪里不匹配了，就把f右移一位再从头开始一个一个匹配，这样每次移动一位是完全正确的但是不够快，事实上，如果匹配了一些，假如f的前m-1位与S中的一段完全匹配(m-1长)，这是一个很好的消息！但最后一位不匹配，如果朴素地右移一位再重新匹配的话，前面m-1位完全匹配的喜人消息会被完全抛弃，那么为什么不利用起来呢？所以说，KMP最本质的思想就在于，&lt;strong&gt;利用已有的一些信息，来加快解空间的搜索&lt;/strong&gt;。说起来很简单，但是大道至简，简单的道理却蕴含着巨大的能量。&lt;/p&gt;
&lt;p&gt;如何利用呢？盗一张图来说，我们希望找到如图所示的结构：&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/KMP1.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;两块绿色的完全相等，这样的话我们移动f时就没必要一步一步移动了，可以直接像下面这样移动，&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/KMP2.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;这样大大节省了时间。而next数组就是来找出这样的结构的。&lt;br&gt;比如f串为&lt;code&gt;ABCDABD&lt;/code&gt;，它的next数组如下：&lt;br&gt;&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f    |  &lt;span class=&quot;keyword&quot;&gt;A&lt;/span&gt; B C D &lt;span class=&quot;keyword&quot;&gt;A&lt;/span&gt; B D&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;next | -&lt;span class=&quot;number&quot;&gt;1 0 0 0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;找出了两个对称的&lt;code&gt;AB&lt;/code&gt;，即如果匹配到最后的&lt;code&gt;D&lt;/code&gt;不匹配了，说明需要移动了，又因为&lt;code&gt;D&lt;/code&gt;之前的串有长度为2的后缀等于前缀，我们可以直接吧f的前缀移到后缀对齐的地方继续走，即&lt;br&gt;&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;移动长度=已匹配总长度-后缀的长度=已匹配长度-`D`对应的next值=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/KMP3.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;&lt;br&gt;这也是代码中&lt;code&gt;j=next[j]&lt;/code&gt;的原因，上面那个例子中j=6，j=next[6]=2，说明下面一步就是，现在的i(i处为&lt;code&gt;C&lt;/code&gt;)和f的下标为j=2处的字符比较，即相当于右移了4位。&lt;/p&gt;
&lt;p&gt;一般的KMP核心算法包括以下两个部分：&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void getnext()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,j = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt;m&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; || b[i] == b[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt;[++i] = ++j&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            j = &lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt;[j]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; kmp()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,j = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt;n &amp;amp;&amp;amp; j&amp;lt;m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; || a[i] == b[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i++,j++&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            j = &lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt;[j]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j == m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i-j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;按照上面的思路，就不难理解了。&lt;/p&gt;
&lt;p&gt;归根结底一句话，我们要充分利用已经做过的工作中的一些收获和经验，来促进现有问题的解决。抽象到最顶端，KMP就不仅仅是一种算法，更意味着一种解决问题的方式方法了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;以前看KMP算法的时候，总是无法理解next函数以及next函数的求法以及匹配时j=next[j]的做法的直观意义。这次看《暗时间》这本书的时候谈到一个知识的本质问题，有提到KMP，于是就想着能不能够从本质的角度出发去重新理解下KMP呢？&lt;/p&gt;
&lt;p&gt;KMP的本质是什么？
    
    </summary>
    
      <category term="算法 | Algorithm" scheme="http://whatbeg.com/categories/%E7%AE%97%E6%B3%95-Algorithm/"/>
    
    
      <category term="算法" scheme="http://whatbeg.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow白皮书阅读笔记</title>
    <link href="http://whatbeg.com/2017/01/11/tensorflowwhitepaper.html"/>
    <id>http://whatbeg.com/2017/01/11/tensorflowwhitepaper.html</id>
    <published>2017-01-11T06:48:19.000Z</published>
    <updated>2017-01-11T06:58:16.768Z</updated>
    
    <content type="html">&lt;p&gt;Martín Abadi, Ashish Agarwal, Paul Barham, Eugene Brevdo, Zhifeng Chen, Craig Citro, Gregory S. Corrado, Andy Davis,Jeffrey Dean, Matthieu Devin, Sanjay Ghemawat, Ian J. Goodfellow, Andrew Harp, Geoffrey Irving, Michael Isard,Yangqing Jia, Rafal Józefowicz, Lukasz Kaiser, Manjunath Kudlur, Josh Levenberg, Dan Mané, Rajat Monga, Sherry Moore,Derek Gordon Murray, Chris Olah, Mike Schuster, Jonathon Shlens, Benoit Steiner, Ilya Sutskever, Kunal Talwar, Paul A. Tucker, Vincent Vanhoucke, Vijay Vasudevan, Fernanda B. Viégas, Oriol Vinyals, Pete Warden, Martin Wattenberg, Martin Wicke, Yuan Yu, Xiaoqiang Zheng:&lt;br&gt;&lt;a href=&quot;https://arxiv.org/abs/1603.04467&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TensorFlow: Large-Scale Machine Learning on Heterogeneous Distributed Systems&lt;/a&gt;. (2015.11)&lt;/p&gt;
&lt;h2 id=&quot;编程模型与基本概念&quot;&gt;&lt;a href=&quot;#编程模型与基本概念&quot; class=&quot;headerlink&quot; title=&quot;编程模型与基本概念&quot;&gt;&lt;/a&gt;编程模型与基本概念&lt;/h2&gt;&lt;p&gt;TensorFlow的计算过程采用一张有向图（DAG）来描述，有向图由许多节点（nodes）构成，图代表了一个数据流（dataflow）计算过程，用户通常用某种前端语言(C++/Python)建立一个计算图，来执行某个过程。&lt;/p&gt;
&lt;p&gt;在TensorFlow图中，每个节点（node）可以有任意个输入，任意个输出，代表了一个操作的实例化，流过图中正常的边（edge）（从输出到输入）的值（Values）称为张量（Tensor），可以理解为任意维的array。有一些特殊的边，称为控制依赖（control dependencies），没有数据流过，表示节点与节点之间一种序关系，也即happens-before关系。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作(Operation)：一个操作代表一次抽象计算，有一个名字，还能有一个属性，所有的属性必须给定或者能够在图建立的时候就推断出来，属性的作用主要就是是操作在不同的张量类型上保持多态(?)&lt;/li&gt;
&lt;li&gt;核(Kernel)：操作的特殊实现，可以运行在一个特定设备上。&lt;/li&gt;
&lt;li&gt;会话(Session)：用户与TensorFlow系统交互的客户端程序，提供许多操作。主要是Run，即获取需要计算的输出，以及fed进来的输入，运行一次整个流图的计算，得到结果填入输出中。一般是对一个图启动一个Session，然后执行多次。&lt;/li&gt;
&lt;li&gt;变量(Variable)：大多数情况下，图是执行多次的，大多数的Tensor在一次执行后不会继续存活，然而变量(Variable)是一种特殊的操作，它返回一个到持久化可变张量(persistent mutable tensor)的句柄，就是说它的生命周期是整个图的计算过程。这样可以保证许多机器学习任务中参数的持续迭代改变。&lt;/li&gt;
&lt;li&gt;设备(device)：设备是TensorFlow的计算核心，每个worker负责一到多个设备，每个设备有一个名字，设备通常指的就是某个CPU或者GPU，它的命名方式有一定讲究，比如&lt;code&gt;/job:localhost/device:cpu:0&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;张量(Tensor)：一种有类型的多维数组，元素类型包括大小为从 8 bit 到 64 bit 的带符号和无符号整型，IEEE 浮点数和双精度类型、复数类型和字符串类型（任意长的字节数组）。通过一个分配器来管理其后台存储(backing store)，且维持一个引用计数，在没有引用时释放。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Implementation&quot;&gt;&lt;a href=&quot;#Implementation&quot; class=&quot;headerlink&quot; title=&quot;Implementation&quot;&gt;&lt;/a&gt;Implementation&lt;/h2&gt;&lt;h3 id=&quot;单设备执行&quot;&gt;&lt;a href=&quot;#单设备执行&quot; class=&quot;headerlink&quot; title=&quot;单设备执行&quot;&gt;&lt;/a&gt;单设备执行&lt;/h3&gt;&lt;p&gt;单设备执行不用说了，一切都在本地，每个节点维护一个依赖计数，表示该节点的先序节点还有多少个没有执行，如果该计数为0，则将该节点放入准备队列ReadyQueue等待执行。&lt;/p&gt;
&lt;h3 id=&quot;多设备执行&quot;&gt;&lt;a href=&quot;#多设备执行&quot; class=&quot;headerlink&quot; title=&quot;多设备执行&quot;&gt;&lt;/a&gt;多设备执行&lt;/h3&gt;&lt;p&gt;多设备执行中，主要有两个复杂性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何分配哪个节点在哪台设备上计算？&lt;/li&gt;
&lt;li&gt;管理跨设备的数据通信&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;节点置放&quot;&gt;&lt;a href=&quot;#节点置放&quot; class=&quot;headerlink&quot; title=&quot;节点置放&quot;&gt;&lt;/a&gt;节点置放&lt;/h4&gt;&lt;p&gt;现在有一张计算图，TensorFlow需要将这些节点的计算放置到可用给的设备上，如何分配每个节点到具体的设备是要解决的问题。&lt;/p&gt;
&lt;p&gt;此版本的TensorFlow采用了一种模拟执行过程的启发式的cost model，即先模拟一遍图的执行过程，采用启发式贪心策略来分配。首先设备需要满足能够执行该node所需的操作，然后再谈分配的问题，在备选的设备中选取一个预计执行时间最小的设备，放置，然后进行下面的分配，当然在有控制依赖的时候还需要加以考虑。目前来说，&lt;strong&gt;置放算法还在进一步地研究优化&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;设备间通信&quot;&gt;&lt;a href=&quot;#设备间通信&quot; class=&quot;headerlink&quot; title=&quot;设备间通信&quot;&gt;&lt;/a&gt;设备间通信&lt;/h4&gt;&lt;p&gt;TensorFlow采用Send节点和Receive节点来实现跨设备的数据交换。将设备A中a节点到设备B中b节点之间的边用send和recv的节点隔开，如图所示。&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/tensorflow1.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;这使得我们将Send和Receive内部的通信机制与节点与节点之间的通信隔离开来。而且这种方式下，master只需要提出“任务”(通过Run)给workers，而无需管理workers之间的通信，这就相当于去中心化(decentralized)了，大大减小了master的负载。&lt;/p&gt;
&lt;p&gt;要注意的是，如果一台设备上的两个或多个tensor都依赖于另一台设备的某一个tensor，TensorFlow只使用一个Recv节点，参看上图右边的b,c。&lt;/p&gt;
&lt;h3 id=&quot;分布式执行&quot;&gt;&lt;a href=&quot;#分布式执行&quot; class=&quot;headerlink&quot; title=&quot;分布式执行&quot;&gt;&lt;/a&gt;分布式执行&lt;/h3&gt;&lt;p&gt;分布式执行非常像多设备执行，之中要解决容错的问题。&lt;/p&gt;
&lt;p&gt;错误主要发生在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Send/Recv的通信错误&lt;/li&gt;
&lt;li&gt;周期性的保活检查(keep-alive)时&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果发生了错误，那么整个图会终止执行，并重启。如果简单地这样处理的话，那些正确计算好的节点就得重新计算，不高效，所以TensorFlow支持在重启过程中一致的检查点和状态恢复。&lt;br&gt;怎么实现的呢？&lt;br&gt;每个节点有一个到Save节点的连接，也被一个Restore节点所连接，周期性地执行Save，持久化变量到比如分布式文件系统等存储上。类似的，Restore节点负责在重启后的第一个迭代中恢复变量的值(或状态?)&lt;/p&gt;
&lt;h2 id=&quot;扩展&quot;&gt;&lt;a href=&quot;#扩展&quot; class=&quot;headerlink&quot; title=&quot;扩展&quot;&gt;&lt;/a&gt;扩展&lt;/h2&gt;&lt;p&gt;TensorFlow内嵌地支持自动梯度计算。&lt;/p&gt;
&lt;p&gt;在存储管理(memory management)，TensorFlow的作者们也在寻求提升的方法。一些可能的选项包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用更加复杂的启发式算法来决定图的执行顺序&lt;/li&gt;
&lt;li&gt;重新计算tensor而不用把他们保持在主存&lt;/li&gt;
&lt;li&gt;将长久存在的tensor从GPU memory中交换到更加丰富的主机CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TensorFlow支持图的部分计算，如图：&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/tensorflow2.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;显然，支持条件与循环会导致更加精确和高效地表示机器学习算法，TensorFlow提供了一些控制流操作原语包括Switch，Merge，Enter，Leave，NextIteration等。&lt;br&gt;每轮迭代由一个唯一的tag标识，执行状态由一个frame来表示，一个输入只要可用就可以进入一个迭代过程，因此，多个迭代可以并发地执行。&lt;/p&gt;
&lt;p&gt;尽管输入数据可以通过feed节点提供，另一个典型的训练大规模机器学习模型的机制是在图中采用特殊的输入操作节点(input operation nodes)，节点通过文件名配置，这使得工作节点可以直接从存储系统中将数据拿到内存。&lt;/p&gt;
&lt;p&gt;队列是很有用的一个特性，允许图的不同部分亦不知悉，按照不同的节奏通过Enqueue和Dequeue来处理数据。队列的一个用途是允许输入数据提前从文件中取出，此时并不耽误前一批数据的处理，更有效率。TensorFlow不仅实现了基本的FIFO队列，还实现了一个shuffling队列，可以随机shuffle一个大型内存buffer中的元素。&lt;/p&gt;
&lt;p&gt;容器是用来管理长期存在的可变状态的机制。默认的话，容器一直保持到进程结束。&lt;/p&gt;
&lt;h2 id=&quot;优化&quot;&gt;&lt;a href=&quot;#优化&quot; class=&quot;headerlink&quot; title=&quot;优化&quot;&gt;&lt;/a&gt;优化&lt;/h2&gt;&lt;p&gt;本部分描述了TensorFlow的实现过程中所做的一些优化，提升性能并且提高了资源的重用率。&lt;/p&gt;
&lt;p&gt;这些优化包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消除公共子表达式&lt;/li&gt;
&lt;li&gt;控制数据通信与内存使用，调度优化是必要的且有效的&lt;/li&gt;
&lt;li&gt;异步核(?)&lt;/li&gt;
&lt;li&gt;核实现的优化库，cuDNN,cuda-convnet,cuBLAS等&lt;/li&gt;
&lt;li&gt;有损压缩。为了减少通信量，将一些浮点数的位数压缩，比如32位浮点数压缩到16位，通过损失一定精度换来跨机通信的高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一些经验&quot;&gt;&lt;a href=&quot;#一些经验&quot; class=&quot;headerlink&quot; title=&quot;一些经验&quot;&gt;&lt;/a&gt;一些经验&lt;/h2&gt;&lt;p&gt;本部分介绍了作者们在移植/迁移机器学习模型（从一个系统到另一个系统）中的一些经验教训。&lt;/p&gt;
&lt;p&gt;包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对参数的个数有一个洞察&lt;/li&gt;
&lt;li&gt;从小（模型）开始逐步扩展&lt;/li&gt;
&lt;li&gt;保证目标函数的正确性&lt;/li&gt;
&lt;li&gt;先单机，再分布式&lt;/li&gt;
&lt;li&gt;防备数值错误/误差&lt;/li&gt;
&lt;li&gt;分析网络，理解数值误差的量级和容忍度。可以同时在两个系统中跑，看结果是否一致来判断有无数值误差/错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;数据并行，模型并行与并发步&quot;&gt;&lt;a href=&quot;#数据并行，模型并行与并发步&quot; class=&quot;headerlink&quot; title=&quot;数据并行，模型并行与并发步&quot;&gt;&lt;/a&gt;数据并行，模型并行与并发步&lt;/h2&gt;&lt;p&gt;TensorFlow关心的一大领域就是加速计算密集型的大规模神经网络的训练。本部分描述了一些方法。&lt;/p&gt;
&lt;h3 id=&quot;数据并行&quot;&gt;&lt;a href=&quot;#数据并行&quot; class=&quot;headerlink&quot; title=&quot;数据并行&quot;&gt;&lt;/a&gt;数据并行&lt;/h3&gt;&lt;p&gt;数据并行分为同步数据并行和异步数据并行。见图：&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/tensorflow3.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;数据并行的意思是，用很多的模型副本，每个副本运行在不同的数据上，然后同时训练，更新模型。通过更新模型的方式不同，可以分为同步和异步，同步的方式是一个用户线程驱动整个大循环，如图上部，等到所有的$\Delta P$都算出来后，将它们相加去更新模型。而异步的方式不同，每个模型副本自己异步地对模型参数进行更新，不用等到所有的梯度算出来再更新，每个模型副本有一个用户线程。见图下部。&lt;/p&gt;
&lt;h3 id=&quot;模型并行和并发步-concurrent-steps&quot;&gt;&lt;a href=&quot;#模型并行和并发步-concurrent-steps&quot; class=&quot;headerlink&quot; title=&quot;模型并行和并发步(concurrent steps)&quot;&gt;&lt;/a&gt;模型并行和并发步(concurrent steps)&lt;/h3&gt;&lt;p&gt;模型并行的意思是，对于同样一批数据，模型计算的不同部分分散在不同的计算设备上同时进行。如图是一个循环深度LSTM用来做序列到序列学习的例子。(?)&lt;/p&gt;
&lt;p&gt;并发步是另一种通常的做法，即通过在同样的设备集合中运行少数的并发步来将同一设备中的模型计算流水线化。(?)&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/tensorflow4.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;p&gt;TensorBoard用来对计算图，总结信息和训练过程等进行可视化，方便观察训练过程。&lt;/p&gt;
&lt;p&gt;性能追踪(performance tracing)，了解哪些地方是瓶颈时间。EEG。&lt;/p&gt;
&lt;h2 id=&quot;未来工作&quot;&gt;&lt;a href=&quot;#未来工作&quot; class=&quot;headerlink&quot; title=&quot;未来工作&quot;&gt;&lt;/a&gt;未来工作&lt;/h2&gt;&lt;p&gt;未来工作包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子图的重用，像函数一般&lt;/li&gt;
&lt;li&gt;置放算法与节点的调度，可能采用DNN和强化学习相结合来学习置放&lt;/li&gt;
&lt;li&gt;just-in-time compiler&lt;/li&gt;
&lt;li&gt;跨操作动态编译框架(cross-operation dynamic compilation framework)&lt;/li&gt;
&lt;li&gt;等等。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;总的来说，TensorFlow是一个基于数据流的编程模型，它在有足够内存来满足计算工作集时工作良好，但是速度相比于其它框架如MXNet还是显得太慢，以至于被人叫做“TensorSlow”，这些方面还需要加强。它是最火的框架但是并不是目前最优秀的框架，火起来的原因相当一部分是有谷歌这个爹。&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href=&quot;http://www.jianshu.com/p/65dc64e4c81f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Not_GOD译&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Martín Abadi, Ashish Agarwal, Paul Barham, Eugene Brevdo, Zhifeng Chen, Craig Citro, Gregory S. Corrado, Andy Davis,Jeffrey Dean, Matthie
    
    </summary>
    
      <category term="大数据系统与技术 | Big Data" scheme="http://whatbeg.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%8A%80%E6%9C%AF-Big-Data/"/>
    
    
      <category term="大数据" scheme="http://whatbeg.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="深度学习" scheme="http://whatbeg.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="TensorFlow" scheme="http://whatbeg.com/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning论文阅读纪要（一）</title>
    <link href="http://whatbeg.com/2017/01/07/paperreading01.html"/>
    <id>http://whatbeg.com/2017/01/07/paperreading01.html</id>
    <published>2017-01-07T14:02:04.000Z</published>
    <updated>2017-01-10T08:18:27.701Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Deep-Learning-Review&quot;&gt;&lt;a href=&quot;#Deep-Learning-Review&quot; class=&quot;headerlink&quot; title=&quot;Deep Learning Review&quot;&gt;&lt;/a&gt;Deep Learning Review&lt;/h2&gt;&lt;p&gt;LeCun, Yann, Yoshua Bengio, and Geoffrey Hinton. “Deep learning.” Nature 521.7553 (2015): 436-444. &lt;a href=&quot;http://www.cs.toronto.edu/~hinton/absps/NatureDeepReview.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传统机器学习方法在处理原始形式的自然数据时受限，需要繁杂的特征工程和大量的领域专家知识&lt;/li&gt;
&lt;li&gt;深度学习的核心在于它们用一个通用目标的学习过程来从数据中学习，无需手工做特征工程&lt;/li&gt;
&lt;li&gt;深度学习在发现高维数据的复杂结构上有一套&lt;/li&gt;
&lt;li&gt;应用方面，深度卷积网络在图像，视频，语音，音频方面，循环网络在序列数据比如文本，语音上取得了巨大突破&lt;/li&gt;
&lt;li&gt;虽然只需少量特征工程，但是需要计算能力和数据&lt;/li&gt;
&lt;li&gt;用小部分样本做SGD，这些小部分样本给出的（平均梯度）是整个样本集的平均梯度的噪声估计(noisy estimate)&lt;/li&gt;
&lt;li&gt;深度的增加使得对大量无关变量（比如图像中的背景，物体的位置等等）逐渐变得不敏感&lt;/li&gt;
&lt;li&gt;在实践中，“差的局部最小”(poor local minima)在大规模网络中一般不是问题。被困在哪个鞍点并不重要，因为他们离目标都很接近&lt;/li&gt;
&lt;li&gt;卷积神经网络的4个核心思想：局部连接，权值共享，池化和多层次&lt;/li&gt;
&lt;li&gt;共享参数是由于，在图像中，物体不论出现在哪个位置，都应该一样的看待，所以一种滤波器（卷积核）使用同样的权值来检测一种模式&lt;/li&gt;
&lt;li&gt;卷积网络(ConvNet)现在是几乎所有识别和检测任务中的最主要方法&lt;/li&gt;
&lt;li&gt;许多公司也在研发ConvNet芯片以实现视觉应用的实时处理，并且嵌入到设备中&lt;/li&gt;
&lt;li&gt;Neutral Turing Machine / Memory Network：用于需要推理和符号操作的任务，核心是推理！&lt;/li&gt;
&lt;li&gt;无监督学习，增强学习等是未来的趋势&lt;/li&gt;
&lt;li&gt;将深度学习与增强学习结合的系统正处于萌芽期，不过他们已经在分类任务中表现出了令人印象深刻的效果&lt;/li&gt;
&lt;li&gt;人工智能的巨大进步考表示学习与复杂推理的结合来推动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文章讲述了深度学习中的一些关键性主题，包括监督学习，后向传播，卷积神经网络及其在图像理解上的应用，分布式表示和语言处理，以及循环神经网络，最后对深度学习的未来进行了探讨。&lt;br&gt;文章提交于2015年2月，距今约2年了，深度学习的江湖又发生了巨大的变化，单看这篇综述还不能够了解深度学习的方方面面，还需要更多的资料。&lt;/p&gt;
&lt;h2 id=&quot;Large-Scale-Distributed-Deep-Networks&quot;&gt;&lt;a href=&quot;#Large-Scale-Distributed-Deep-Networks&quot; class=&quot;headerlink&quot; title=&quot;Large Scale Distributed Deep Networks&quot;&gt;&lt;/a&gt;Large Scale Distributed Deep Networks&lt;/h2&gt;&lt;p&gt;Large Scale Distributed Deep Networks. Jeffrey Dean et al. &lt;a href=&quot;http://www.cs.toronto.edu/~ranzato/publications/DistBeliefNIPS2012_withAppendix.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PDF&lt;/a&gt; &lt;a href=&quot;http://wxwidget.github.io/blog/2014/08/17/large-scale-deep-network/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文译版&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式训练或者优化的一个难点在于各机器处理时间各异，有时候需要等最慢的机器运行完成&lt;/li&gt;
&lt;li&gt;SGD是训练深度神经网络最常用的优化过程了，但是在非凸的情况下就略显颓势了&lt;/li&gt;
&lt;li&gt;一种深度学习规模扩展的方法使，用一些GPU来训练许多小模型，将这些模型应用在数据是，将它们的预测结果平均&lt;br&gt;这篇文章对大规模分布式深度网络的训练框架内，提出了两个算法： Downpour SGD，一个支持大量模型副本的异步随机梯度下降过程，和Sandblaster L-BFGS，一个支持各种分布式批优化过程的框架，但是后者好像没什么大用，后面提到，“Sandblaster L-BFGS或许在30000个处理器的时候能够最后胜出”，暂时都用不到那么多的核，所以后面性能也没有测试结果，所以就不知道了，重点在于前面一个算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Downpour SGD的主要思想是，将训练集划分若干子集，并对每个子集运行一个单独的模型副本。模型副本之间的通信均通过中心参数服务器(parameter server, ps)组，该参数服务器组维护了模型参数的当前状态，并分割到多台机器上（例如，如果我们参数服务器组有10个节点，那么每个节点将负责存储和更新模型参数的1/10，如图1所示）。&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/downpoursgd.png&quot; alt=&quot;图1&quot;&gt; &lt;/center&gt;

&lt;p&gt;该方法在两个方面体现异步性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模型副本之间运行独立，在各自负责的数据集（子集）上独立运行&lt;/li&gt;
&lt;li&gt;参数服务器(parameter server)组各节点之间同样是独立的，PS片独立运行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;考虑Downpour SGD的一个最简单的实现，在处理每个mini-batch（译者注：小型批量）之前，模型副本都会向参数服务器请求最新的模型参数。因为DistBelief框架也是分布在多台机器上，所以其框架的每个节点只需和参数服务器组中包含和该节点有关的模型参数的那部分节点进行通信。在DistBelief副本获得更新后的模型参数后，运行一次mini-batch样本来计算参数的梯度，并推送到参数服务器，以用于更新当前的模型参数值。更新的频度也可以设置，在处理机器失效方面，Downpour SGD比标准（同步）SGD要鲁棒。对于同步SGD来讲，如果一台机器失效，整个训练过程将会延时；但是对于异步SGD来讲，如果某个模型副本的一台机器失效，其他模型副本仍然继续处理样本并更新参数服务器中的模型参数。&lt;br&gt;但是由于每个参数服务器只更新互斥的一部分参数，副本之间不会进行通信，因此可能会导致参数发散而不利于收敛。&lt;br&gt;另外一项能极大提高Downpour SGD鲁棒性的技术是使用Adagrad自适应学习速率方法。&lt;br&gt;通过这种结合，达到了最好的效果（最短的时间内达到了规定的准确率）。&lt;br&gt;Adagrad方法参见:&lt;br&gt;J. C. Duchi, E. Hazan, and Y. Singer. Adaptive subgradient methods for online learning and stochastic optimization. Journal of Machine Learning Research, 12:2121–2159, 2011.&lt;br&gt;中文版的论文翻译中有更详细的内容。&lt;/p&gt;
&lt;h2 id=&quot;A-Brief-Overview-of-Deep-Learning&quot;&gt;&lt;a href=&quot;#A-Brief-Overview-of-Deep-Learning&quot; class=&quot;headerlink&quot; title=&quot;A Brief Overview of Deep Learning&quot;&gt;&lt;/a&gt;A Brief Overview of Deep Learning&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://yyue.blogspot.jp/2015/01/a-brief-overview-of-deep-learning.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WEB&lt;/a&gt; by Ilya Sutskever. Jan 13, 2015&lt;/p&gt;
&lt;p&gt;文章论述了为什么深度学习是有效的并且强力的，以及深度学习模型的学习和泛化，然后给出了13条实践中训练深度学习模型的建议，摘其要点如下，作者用LDNN这个词来代替Deep Learning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决复杂问题我们需要强力的，可训练的模型，LDNN(Large Deep Neutral Network)满足这两个条件&lt;/li&gt;
&lt;li&gt;LDNNs learn computation, albeit a massively parallel computation with a modest number of steps&lt;/li&gt;
&lt;li&gt;有了指数级别的数据，任何模型都能够解决问题，但是不现实&lt;/li&gt;
&lt;li&gt;学习（Learning）意味着将有标记数据的信息表现在训练后的参数中&lt;/li&gt;
&lt;li&gt;作者提出了一个假设，neural network start their learning process by noticing the most blatant correlations between the input and the output(神经网络通过注意输入和输出之间最明显的相关性来开始他们的学习过程)&lt;/li&gt;
&lt;li&gt;Tip01: 获取大规模高质量的数据集&lt;/li&gt;
&lt;li&gt;Tip02: 处理成0均值，小方差，效果更佳&lt;/li&gt;
&lt;li&gt;Tip03: 采用minibatchs有效提高性能，降低过拟合，但是batch size不要太大(32,64,128)&lt;/li&gt;
&lt;li&gt;Tip04: gradient的正则化（gradient / batchsize）&lt;/li&gt;
&lt;li&gt;Tip05: 学习率的规划&lt;ul&gt;
&lt;li&gt;0.1是学习率的一个经典值&lt;/li&gt;
&lt;li&gt;用验证集来决定何时降低LR(Learning Rate)和何时早停&lt;/li&gt;
&lt;li&gt;如果验证集error不再降低，减小LR，可以降低过拟合（在这个标准上）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tip06: 监控update norm 和 weight norm之间的比率&lt;/li&gt;
&lt;li&gt;Tip07: 权值初始化&lt;ul&gt;
&lt;li&gt;随机初始化&lt;/li&gt;
&lt;li&gt;随机初始化对深度网络和循环网络非常重要&lt;/li&gt;
&lt;li&gt;浅层网络可以不考虑随机初始化问题，但深度网络需要&lt;/li&gt;
&lt;li&gt;尝试多种初始化方法，这份努力会得到回报&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tip08: 当训练LSTM或者RNN时，对梯度的norm采取硬约束，即对梯度的norm进行修剪&lt;/li&gt;
&lt;li&gt;Tip09: 数值梯度检验(Numerical gradient checking)，主要在Theano,Torch等自定义梯度计算的场景&lt;/li&gt;
&lt;li&gt;Tip10: 使用LSTM处理超长期依赖的时候，应将forget gate的bias设成较大的值&lt;/li&gt;
&lt;li&gt;Tip11: 数据增强，巧妙增加数据集样本，旋转，加噪声等&lt;/li&gt;
&lt;li&gt;Tip12: dropout有效提升性能，且训练越久变得越来越好&lt;/li&gt;
&lt;li&gt;Tip13: 训练多个模型，将它们的预测取平均&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些Tips还期待日后在实践过程中的运用检验，希望能够对深度模型的训练起到一些指导的作用。&lt;br&gt;最后，作者总结，LDNNs是强力的，切实可训练的，如果我们有高质量的大量数据，我们可以找到最好的LDNNs来解决问题。对未来做出预测很难，不过，通常来说，通过大量计算得出的模型更好的可能性更大，神经图灵机是这个方向上的重要进步，无监督学习也是未来的一大方向，期待进一步的突破。&lt;/p&gt;
&lt;h2 id=&quot;小小总结&quot;&gt;&lt;a href=&quot;#小小总结&quot; class=&quot;headerlink&quot; title=&quot;小小总结&quot;&gt;&lt;/a&gt;小小总结&lt;/h2&gt;&lt;p&gt;综合这几篇文章，看到他们都对深度学习的整个脉络，现在的发展和未来的预测进行了梳理。结合自己的看法，我把他们总结成以下几点，&lt;/p&gt;
&lt;p&gt;第一，深度模型在现今许多复杂任务中取得了良好的效果，在图像，视频，音频，语音，自然语言处理方面都取得了start-of-art的效果，这些也是深度学习拿手的几个方向&lt;br&gt;第二，深度学习模型只是一种有别于传统机器学习方法的模型，它大大简化了特征工程的部分，但本质上是神经网络，也即一种机器学习的方法，我们不知道深度学习的未来如何，但是机器学习的未来一定是明朗的&lt;br&gt;第三，未来的大方向在于无监督学习，增强学习，迁移学习等领域，因为无标记的样本比有标记的高质量数据来的多得多，如何有效利用这些无标签样本是需要重点研究的课题&lt;br&gt;第四，在计算能力得到根本性突破之前（比如量子计算机投入使用并且发挥所谓的强大计算能力之前），多机并行以增加计算能力，来训练更加复杂的模型是不可阻挡的趋势，分布式机器学习，分布式深度学习模型训练也是可以做的方向&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Deep-Learning-Review&quot;&gt;&lt;a href=&quot;#Deep-Learning-Review&quot; class=&quot;headerlink&quot; title=&quot;Deep Learning Review&quot;&gt;&lt;/a&gt;Deep Learning Review&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="深度学习 | Deep Learning" scheme="http://whatbeg.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Deep-Learning/"/>
    
    
      <category term="深度学习" scheme="http://whatbeg.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="论文阅读" scheme="http://whatbeg.com/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>2016CCF大数据与计算智能大赛总结</title>
    <link href="http://whatbeg.com/2017/01/01/2016ccfcontest.html"/>
    <id>http://whatbeg.com/2017/01/01/2016ccfcontest.html</id>
    <published>2017-01-01T02:08:42.000Z</published>
    <updated>2017-02-18T13:20:32.499Z</updated>
    
    <content type="html">&lt;h2 id=&quot;赛题简介及任务&quot;&gt;&lt;a href=&quot;#赛题简介及任务&quot; class=&quot;headerlink&quot; title=&quot;赛题简介及任务&quot;&gt;&lt;/a&gt;赛题简介及任务&lt;/h2&gt;&lt;p&gt;情感分析是网络舆情分析中必不可少的技术，基于视角的领域情感分析更是情感分析应用于特定领域的关键技术。在对句子进行情感分析时，站在不同的视角，同一个句子的情感倾向判断结果将有所差别。本赛题意在情感分析任务中，站在数据使用者的角度进行特定的情感分析，使数据分析的结果更具可用性。本赛题可以细分为“视角抽取”与“基于视角的情感分析”两部分。下文首先介绍“视角”的定义，而后对“视角抽取”与“基于视角的情感分析”任务进行详细介绍：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;视角定义&lt;/strong&gt;：在情感分析这一任务中，对于同一个文档或句子，不同的数据使用者去分析，将会有不同的情感倾向。同时，从文中不同内容去分析，也有可能会得到不一样的情感。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;在“A车在第三季度一举超过B车成为销量冠军”这样一句话中，如果分析者站在A车的角度去考虑，这句话就是正面的，但是如果分析者在B车的角度，则丢失了销量冠军这样一则消息是负面的。而在本句话中，“A车”和“B车”则是两个不同的情感视角。&lt;/p&gt;
&lt;p&gt;视角泛指某一类的思考角度，可以理解为数据使用者角度，亦可以理解为文本中某些方面，在本赛题中，为了简化《基于视角的领域情感分析》这一任务，我们将视角进行具体化——特指文本中出现的汽车品牌词语（如：“上汽大众”、“美国通用”、“速派”、“POLO”等）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;视角抽取&lt;/strong&gt;：又称为“视角识别”。顾名思义，这一任务意在从文本中抽取（识别）出可以描述视角的词语。由于在本次任务中，视角特指汽车品牌词，故这一步的任务需要参赛队伍抽取（识别）出文本中的汽车品牌词（或别名）。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;“考虑到终端市场的情况，我们本次选取了全新迈腾全系的次顶配车型和帕萨特2.0T排量的顶配车型来进行对比”一句话中，参赛队伍应抽取出“迈腾”和“帕萨特”两个视角。&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;“最终我们放弃了迈腾，把小帕开回了家！”一句中，参赛队伍应抽取出“迈腾”和“小帕”两个视角。在这里“小帕”是“帕萨特”的别名。&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在本次评测中，我们将给出一个汽车品牌词语集合来供参赛队伍参考。这个品牌词集合包含了测试语料中出现的大部分汽车品牌词及少部分未出现的汽车品牌词。为了验证参赛队伍“视角抽取”方法的鲁棒性，会有评测语料中的部分汽车品牌词并未出现在这一集合中的现象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基于视角的情感分析：给定一个句子，如果该句子中包含“视角”词语，则应针对这一视角进行情感分析；如果句子中包含多个“视角”词语，则应对不同的视角进行单独的情感分析；如果句子中不包含视角，则不做情感判别处理。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;算法模型&quot;&gt;&lt;a href=&quot;#算法模型&quot; class=&quot;headerlink&quot; title=&quot;算法模型&quot;&gt;&lt;/a&gt;算法模型&lt;/h2&gt;&lt;p&gt;本部分介绍一下我们最终模型的演变产生过程，以及我们所做的一些探索及效果。&lt;br&gt;10月10号，我们撸了一个简单的基于规则的情感分析算法，想探一下究竟，视角没有进行细致的抽取，只是利用给的View中的视角，采用简单的字符串匹配来进行简单提取，这一交，在初赛A榜中，只拿到了0.35768的分数，虽然没用，但是我们得到了一个可以用来比较的baseline，接下来就是不断探索，尝试其他的方法了。&lt;br&gt;此后，我们4人通过定期的讨论，每个人都对一部分进行深入研究，然后定期地交流，进行思维的碰撞，以期抛弃一些错误的想法，确定正确的想法，探讨当前阶段的优势与不足，确定下一个着力点等等，ArcherW的主要工作集中在特征工程和传统方法比如逻辑回归，贝叶斯等等，提取了TF，IDF，LDA，POS等等特征，并进行了筛选，组合，后来我们使用基于TF（词频）和POS（词性标注）特征的LR（逻辑回归）算法在11月14号初赛结束前的提交中得到了0.57677的分数。而有趣的是，采用基于TF-IDF和POS的LR仅得到了0.56209的分数，即TF-IDF比纯TF还低一个多百分点，这可能也侧面说明了，在情感分析任务中，代表着词的“重要性”的逆文档频率IDF特征并没有那么重要，因为句子的情感是由整个句子的所有词综合决定，可能一个词并不重要，但是它对决定整个句子的情感却至关重要或者至少有着不可忽视的作用。chenminzoe的工作也集中于特征提取和偏竞赛类的方法比如SVM，XGBoost，GBDT等等上面，她尝试了一些自己探索的创新型的特征，也取得了不错的分数，在复赛中采用SVM模型取得过0.56708的高分，比初赛最好的模型CNN的0.5371高出了3个百分点，但是后来很难取得突破，我们猜想问题，第一个可能出在特征的组合方面，第二个可能出在我们对诸如SVM这些分类器的参数调优缺乏经验，第三个就是我们没有制定与线上一致的有效的线下评测，来对我们的参数进行多次的调优，这个问题同样也出现在传统分类器，以及笔者所做的CNN，RNN等分类器上，这也是我们队值得反思的一点。shizihao123的工作主要集中在视角抽取方面，首先探索的是模式匹配的方法，为了应对官方给的View不太全面和存在噪声的现象，他编写了诸多爬虫爬取各大汽车网站比如汽车之家，车主之家等的汽车品牌词库，以应对这个问题，并对这些词库使用了许多算法进行处理，以得到最大可能的汽车品牌词典，又尽可能少地引入噪声。开始我们就利用给的训练数据和爬取的汽车品牌词典等数据去匹配句子中的视角，速度极慢，整个测试集不到10000条数据，却需要跑一个晚上才能够全部提取出来，在复赛中我们经过商讨，采用了AC自动机来做精确匹配，原来一个晚上的时间缩短到了不到半个小时，同时shizihao123在视角品牌词筛选方面做了大量工作，去除了大量匹配到的却在当前语境中并非汽车品牌的词，这都为后面的情感分类提供了强大的助力。整个过程简图如下，&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/ccf3.png-sf7sy&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;可以说，我们的视角工作做得非常丰富，可是不足在于我们的视角提取方法较为单一，对词典依赖比较强，有效性依赖于我们对词典的收集工作，取决于词典是否全面。笔者的主要工作在于CNN，RNN方面，在实现了基于词典和规则的方法后，我们经过调研，发现CNN在处理情感分析问题上面取得了一些成功，然后笔者阅读了大量论文，大致摸清了CNN处理情感分析的方法，然后基于TensorFlow对CNN情感分类算法进行了代码实现，第一次提交取得了0.51543的分数，此后我们进行了诸多优化，包括词向量的优化，参数的优化，数据输入的优化，值得一提的是，我们此时实现了一种相关句划分的数据预处理方式，因为此时的CNN模型是对整句进行一个情感分析，所以需要把句子分给句子所描述的视角，如果把句子分给了并非它所描述的视角，那么我们就会得出错乱的情感，也就降低了正确率。这部分工作由ArcherW来实现，主要是根据几个关键的标点符号来对句子进行划分，如逗号，感叹号等等，如果一个句子部分包含了某个视角，我们认为这部分描述了这个视角，理所当然在判断该视角的情感的时候，我们可以把这部分句子的情感判断一下，如果一个句子部分不包含任何视角，那么根据语言上的惯例，我们将这个句子部分和前一个句子部分归到一起，前一部分是描述哪个视角，这一部分也相应描述哪个视角。这样就得到了每个视角所对应的相关句，我们利用CNN对这些相关句进行情感分类，分类结果就是相关句所对应的视角的情感。在词向量优化方面，我们采用了搜狗实验室的全网新闻语料，还采用了搜狐新闻，网易新闻，以及各处下载的汽车新闻语料40M左右，后来继续增加词向量，从中国汽车新闻网，汽车之家等网站爬取了近300M的汽车语料进行训练，随着汽车语料的增加，词向量训练的越准确，从而每次增加语料后结果都得到一些提升。&lt;br&gt;在不断的优化后，从最初的0.51543的成绩，逐步提升，到0.52，0.58，到最后初赛A榜定榜，我们用CNN做出的成绩是0.5901，排在A榜24名。B榜出来后，我们最高成绩是0.56941，还是排在第24名。然后就进入复赛了。&lt;/p&gt;
&lt;p&gt;复赛阶段，沿用CNN的方法只取得了0.5371的分数，让我们大失所望，传统的LR+TF+POS却在这时取得了0.56834的成绩，SVM方法也取得了0.56708的成绩，这不禁让我们怀疑到底是我们使用CNN的问题，还是CNN本身的局限性，此时我们也对深度学习有了更加深入的了解，我们发现RNN以其独特的对序列建模的能力，在自然语言处理领域发挥了巨大的作用，于是笔者开始钻研采用RNN体系的算法来解决情感分类的问题，这时候，一篇论文给了笔者巨大的启发，这也催生了我队解决情感分类任务的核心算法-BFGRU算法，算法框架如下图，&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/ccf4.png-sf7sy&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;算法大致过程为，首先对视角进行提取，找出句子中的所有视角，每个视角会有一个句中的位置，对每个位置进行一次处理，将该位置左边的句子进行序列建模，采用GRU单元来进行状态存储，转换与记忆，最后得到一个输出，我们把它看做该位置的视角左边的语义对该视角的描述，输出为一个实值向量，然后我们再从句子最后跑一遍GRU直到该视角的右边，这又生成了该位置后面句子的语义对它的描述，综合前后的描述，再用softmax进行三分类，如此进行训练，就得到了对句子某个位置的视角进行情感判断的算法，这个算法我们称之为BFGRU(Bidirectional Focus Gated Recurrent Unit)，是从TDLSTM延伸过来的。这个算法初次提交得到0.56813的分数，稍低于LR方法，后来经过各种各样的优化，不断得到提升，从0.59972，到0.63763，再进行视角情感投票法的采用，提升到0.64，再到0.643，最后A榜封榜时我们取得了0.6481的成绩，排在全榜第6！&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/ccf5.png-sf7sy&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;最终进入决赛，虽然最后没有取得1,2名的荣誉，但是我们收获了很多，虽然艰辛，我们无悔。真的很谢谢大赛主办方。&lt;br&gt;最后，给出我们整个解决方案的框架图，&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/ccf6.png-sf7sy&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;上面就是我们整个比赛的方案提出过程，以及其中的团队合作，成功与失败，点点滴滴，都构成了我们能够站上决赛舞台的基础。&lt;/p&gt;
&lt;h2 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h2&gt;&lt;p&gt;算法解决了汽车领域评论的基于视角的情感分析，提出了一套基于视角的情感分析的解决方案，包括视角提取的方案以及对于评论句进行准确的情感分类的方案。可以应用在汽车领域评论挖掘，情感分析，汽车销售指导，由于视角提取的方案是与情感分类的方案分离的，所以我们可以将视角抽取推广到方面(aspect)抽取，得到对产品某个方面的评价，比如汽车中的油耗，空间等等。进一步的，我们可以推广到各种各样的领域，而不只是局限于汽车领域，在购物网站中完全可以用到我们的这套方案。我们的方案还可以用于舆情分析领域，对社会媒体或者自媒体的评论或者状态或者消息进行情感分析，了解社会中人们对于某个热点事件的看法，这有着巨大的意义。&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/ccf7.png-sf7sy&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;赛题简介及任务&quot;&gt;&lt;a href=&quot;#赛题简介及任务&quot; class=&quot;headerlink&quot; title=&quot;赛题简介及任务&quot;&gt;&lt;/a&gt;赛题简介及任务&lt;/h2&gt;&lt;p&gt;情感分析是网络舆情分析中必不可少的技术，基于视角的领域情感分析更是情感分析应用于特定领域的关键技术。
    
    </summary>
    
      <category term="深度学习 | Deep Learning" scheme="http://whatbeg.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Deep-Learning/"/>
    
    
      <category term="Summary" scheme="http://whatbeg.com/tags/Summary/"/>
    
      <category term="机器学习" scheme="http://whatbeg.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>【数据分析】工作日发文章比周末发文章访问量高？</title>
    <link href="http://whatbeg.com/2016/12/31/zhoumovisit.html"/>
    <id>http://whatbeg.com/2016/12/31/zhoumovisit.html</id>
    <published>2016-12-31T10:02:30.000Z</published>
    <updated>2016-12-31T10:08:32.922Z</updated>
    
    <content type="html">&lt;p&gt;本文是一片老文，用Python做了一个简单的数据分析，2016年1月发表在&lt;a href=&quot;http://www.cnblogs.com/whatbeg/p/5127850.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;老博客&lt;/a&gt;上，在整理旧文的时候翻了出来，觉得有点价值，故移过来与大家分享一下。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;看前面有位朋友分析了一下每天某个时间发文章的访问量区别，以讨论非系统性因素对文章访问量的影响。之所以进一步讨论工作日和周末发文对文章访问量的影响，一是觉得很有意思，二是毕业设计与此有很大关系，三是觉得还是有点意义的，于是决定做一下这个工作。那么到底周末发文的访问量是不是总体来说比工作日低呢，请往下看。&lt;/p&gt;
&lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;p&gt;1.Python 3.5&lt;br&gt;2.BeautifulSoup 4.4.1&lt;br&gt;3.Requests模块&lt;/p&gt;
&lt;h2 id=&quot;分析网页&quot;&gt;&lt;a href=&quot;#分析网页&quot; class=&quot;headerlink&quot; title=&quot;分析网页&quot;&gt;&lt;/a&gt;分析网页&lt;/h2&gt;&lt;p&gt;由于之前的工作已知博客园博客展览页是要通过ajax请求换页，这里我采用了Requests模块，post一个请求即可。&lt;br&gt;&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;payload&lt;/span&gt; = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;CategoryType&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;SiteHome&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ParentCategoryId&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;CategoryId&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;808&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;PageIndex&quot;&lt;/span&gt;:i,&lt;span class=&quot;string&quot;&gt;&quot;ItemListActionName&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;PostList&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;r&lt;/span&gt; = requests.post(posturl,data = payload)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就可以接收到第i页的博文列表的HTML内容了。&lt;br&gt;再来看一下我们要爬取的内容： &lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/zhoumo1.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;我们要爬取两个内容：发布时间 与 阅读量，这次我们爬取40—200页共161页的内容，并分两种情况：剔除3000以上访问量的文章以及考虑全部文章，然后要做的工作有两个：根据打扫过的数据，统计出一周周一到周日每天的文章总数与访问量总数，最后用WPS表格来制作出对比图。一提到解析网页，我毫无疑问地又想到了BeautifulSoup这款工具，简单好用，功能强大，推荐。&lt;/p&gt;
&lt;p&gt;那么我们首先用BeautifulSoup抓出 &lt;code&gt;class = post_item_foot&lt;/code&gt; 的 &lt;code&gt;‘发布于...’&lt;/code&gt; 内容，以及抓出 &lt;code&gt;class = &amp;#39;article_view&amp;#39;&lt;/code&gt; 的 &lt;code&gt;‘阅读(...)’&lt;/code&gt;内容，再去除一些无用的部分，最后提取出日期三个数据y,m,d，以及阅读量，这里我们无需关心文章到底是谁发的或者具体时间。&lt;br&gt;（ps:Python 3.5下装BeautifulSoup老是不成功，后来发现有更高的版本4.4.1，就果断换了，然后一发成功，不知道什么原因）&lt;br&gt;部分代码如下：&lt;br&gt;&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;bs&lt;/span&gt; = BeautifulSoup(r.text,&lt;span class=&quot;string&quot;&gt;&quot;html.parser&quot;&lt;/span&gt;)           #转化成beautifulsoup对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;View&lt;/span&gt; = bs.findAll(attrs = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;class&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;article_view&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;class&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;post_item_foot&#39;&lt;/span&gt;&amp;#125;)  #找出两个class内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;strallview&lt;/span&gt; = str(View)  #转化为字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;viewcountsmatch&lt;/span&gt; = re.findall(&lt;span class=&quot;string&quot;&gt;&#39;阅读\(\d+\)&#39;&lt;/span&gt;,strallview)   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;viewdaymatch&lt;/span&gt;    = re.findall(&lt;span class=&quot;string&quot;&gt;&#39;发布于 ....-\d+-\d+&#39;&lt;/span&gt;,strallview)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;得出日期三个数据以后，这里我使用蔡勒公式（Zeller Fomula）直接计算出该日是星期几。蔡勒公式函数代码如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ZellerFomula&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(y,m,d)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; m == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; m == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        y -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        m += &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c = y // &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y = y - c * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    w = (c // &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * c + (y + y // &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) + (&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt; * (m + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) // &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + d - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; w &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        w += &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    w %= &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; w == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        w += &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; w&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后就是简单的统计了。&lt;br&gt;这里我有一个考虑，由于日子越早的文章显然访问量总是会更高，所以为了在一定程度上抵消这种效应，我为每一页的20篇文章设置了一个权重：&lt;br&gt;&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;weight = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;0.0005&lt;/span&gt; * &lt;span class=&quot;comment&quot;&gt;(i - 40)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;即i越大，页数越大，发布越早，访问量相应打一个折扣，这里我设置的最大折扣为92%，即第200页的文章相应的阅读量为其原来阅读量的92%，希望能稍微提升一下结果的公平性。&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;这时候写出python代码（剔除3000+文章版本）：&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urllib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bs4 &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BeautifulSoup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; ZellerFomula(y,m,d):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; m == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; or m == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        y -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        m += &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c = y &lt;span class=&quot;comment&quot;&gt;// 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y = y - c * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    w = (c &lt;span class=&quot;comment&quot;&gt;// 4) - 2 * c + (y + y // 4) + (13 * (m + 1) // 5) + d - 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; w &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        w += &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    w %= &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; w == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        w += &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; w&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = open(&lt;span class=&quot;string&quot;&gt;&#39;keyvalue.txt&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;posturl = &lt;span class=&quot;string&quot;&gt;&#39;http://www.cnblogs.com/mvc/AggSite/PostList.aspx&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;daysum = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;count&lt;/span&gt;  = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i in range(&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;201&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weight = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;0.0005&lt;/span&gt; * (i - &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    payload = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;CategoryType&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;SiteHome&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;ParentCategoryId&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;CategoryId&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;808&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;PageIndex&quot;&lt;/span&gt;:i,&lt;span class=&quot;string&quot;&gt;&quot;ItemListActionName&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;PostList&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    r = requests.post(posturl,data = payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bs = BeautifulSoup(r.text,&lt;span class=&quot;string&quot;&gt;&quot;html.parser&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    View = bs.&lt;span class=&quot;keyword&quot;&gt;findAll&lt;/span&gt;(attrs = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;class&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;article_view&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;class&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;post_item_foot&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    strallview = str(View)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    viewcountsmatch = re.&lt;span class=&quot;keyword&quot;&gt;findall&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;阅读\(\d+\)&#39;&lt;/span&gt;,strallview)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    viewdaymatch    = re.&lt;span class=&quot;keyword&quot;&gt;findall&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;发布于 ....-\d+-\d+&#39;&lt;/span&gt;,strallview)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(viewcountsmatch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(viewdaymatch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j in range(len(viewcountsmatch)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vcm = viewcountsmatch[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vcm = re.sub(&lt;span class=&quot;string&quot;&gt;&#39;阅读\(&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,vcm)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vcm = re.sub(&lt;span class=&quot;string&quot;&gt;&#39;\)&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,vcm)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(vcm)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vc = &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(vcm)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(vc &amp;gt; &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vdm = viewdaymatch[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vdm = re.sub(&lt;span class=&quot;string&quot;&gt;&#39;发布于 &#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,vdm)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vdm = vdm.split(&lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(vdm)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ans = ZellerFomula(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(vdm[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]),&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(vdm[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]),&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(vdm[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(ans)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ass = &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(weight*vc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(str(ass)+ &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; +str(vc))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        daysum[ans] += ass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;count&lt;/span&gt;[ans] += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i in range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f.&lt;span class=&quot;keyword&quot;&gt;write&lt;/span&gt;(str(daysum[i])+&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f.&lt;span class=&quot;keyword&quot;&gt;write&lt;/span&gt;(str(&lt;span class=&quot;keyword&quot;&gt;count&lt;/span&gt;[i]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f.&lt;span class=&quot;keyword&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这代码写了很久，主要python很久没碰也不熟悉了。&lt;/p&gt;
&lt;h2 id=&quot;运行结果与分析&quot;&gt;&lt;a href=&quot;#运行结果与分析&quot; class=&quot;headerlink&quot; title=&quot;运行结果与分析&quot;&gt;&lt;/a&gt;运行结果与分析&lt;/h2&gt;&lt;p&gt;然后我们运行就可以爬了，耗时大约40+秒，结果如下：&lt;/p&gt;
&lt;p&gt;1.剔除版本数据&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/zhoumo2.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;每行前面是161篇文章中星期1~7的文章访问总量，后面是文章数量。不算3000+访问以上的文章总数3104篇，贡献访问量1573399。&lt;/p&gt;
&lt;p&gt;2.未剔除版本&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/zhoumo3.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;文章总数3220 = 161 x 20篇，贡献访问量2176232.&lt;/p&gt;
&lt;p&gt;由上可以看出，3000+访问以上的较优质文章116篇，占比3.6%，其贡献的访问量为602833，占比27.7%，这也是预料之中的。&lt;/p&gt;
&lt;h2 id=&quot;图表&quot;&gt;&lt;a href=&quot;#图表&quot; class=&quot;headerlink&quot; title=&quot;图表&quot;&gt;&lt;/a&gt;图表&lt;/h2&gt;&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/zhoumo4.png&quot; alt=&quot;&quot;&gt;  &lt;/center&gt;&lt;br&gt;&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/zhoumo5.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;&lt;br&gt;&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/zhoumo6.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;&lt;br&gt;&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/zhoumo7.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;由图可得，两种方式总体上的差距并不大，从发文数量上看，周一发文最多，可能是大家都上班了，开始新一周的工作使然。随后周二到周四发文数量略有波动，但是都差不太多，并且比周一少。到周五由于放假了，文章数量也相应减少。到周末两天发文数量就有了很大下降，这也是预料之中。&lt;/p&gt;
&lt;p&gt;从文章访问量来看，周一达到最大，随后又以较周一低的水平波动，到周末达到低谷，一大原因也是由于文章数量的减少。&lt;/p&gt;
&lt;p&gt;从平均访问情况来看，周一至周五的平均访问量普遍比周末稍高一点，印证了结论“工作日发文要比周末发文平均访问量多”，但是并没有多太多，其中周一达到最高峰，随后有波动，到周日有一个反弹，说明“周一效应”还是有一点的。&lt;/p&gt;
&lt;p&gt;两幅图的有些显著的不同就是访问量来看，剔除3000+文章以后，周二的访问量有10W+的显著下降，这是否说明周二的时候高质量文章的访问在急速增长的原因呢。&lt;/p&gt;
&lt;h2 id=&quot;补充&quot;&gt;&lt;a href=&quot;#补充&quot; class=&quot;headerlink&quot; title=&quot;补充&quot;&gt;&lt;/a&gt;补充&lt;/h2&gt;&lt;p&gt;后来我发现光考虑篇均访问还不全面，因为周一即使篇均访问较高，但是它的文章数也是很大的，所以周一的文章必然会很快被覆盖过去，所以这里有一个性价比的问题，于是我又算了一项指标，即篇均访问与当日文章数量之比，底数越大小即文章数量越小，越晚被覆盖，曝光率越大，篇均访问越大自然带来的效应越大。所以有了下面这张图：&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/zhoumo8.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;事实证明，性价比最高的发文日期居然是发的很少，访问很少的周末！&lt;/p&gt;
&lt;h2 id=&quot;后续工作&quot;&gt;&lt;a href=&quot;#后续工作&quot; class=&quot;headerlink&quot; title=&quot;后续工作&quot;&gt;&lt;/a&gt;后续工作&lt;/h2&gt;&lt;p&gt;虽然本次挖掘3220篇文章数据较小，感觉还是可以从速度方面进行优化的。&lt;br&gt;权重也是我自己简单设计的，这方面也可以进一步优化。&lt;br&gt;欢迎大家提出意见与建议。&lt;/p&gt;
&lt;h2 id=&quot;结论与启示&quot;&gt;&lt;a href=&quot;#结论与启示&quot; class=&quot;headerlink&quot; title=&quot;结论与启示&quot;&gt;&lt;/a&gt;结论与启示&lt;/h2&gt;&lt;p&gt;所以说，如果你想要让你的文章获得更多的访问量，获得更大的影响力，尽量在工作日发文吧。当然，我前面说过，这些都只是非系统性因素，俗话说，打铁还需自身硬，提高自己文章的质量和水平才是获得更大文章影响力的决定性因素。希望广大园友能够致力于发布质量更高的文章，共同构建一个属于我们的优质的博客园。&lt;br&gt;本文就是上星期四晚上写就的，一直到现在才发，试下效果。事实是写完文章很难忍住不发，哈哈。&lt;/p&gt;
&lt;p&gt;同样，爬取博客园只是为了学习之用，无其他目的，望理解。感谢韩子迟的工作。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文是一片老文，用Python做了一个简单的数据分析，2016年1月发表在&lt;a href=&quot;http://www.cnblogs.com/whatbeg/p/5127850.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;老博客&lt;/a&gt;上，在整理旧
    
    </summary>
    
      <category term="数据科学 | Data Science" scheme="http://whatbeg.com/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6-Data-Science/"/>
    
    
      <category term="Python" scheme="http://whatbeg.com/tags/Python/"/>
    
      <category term="数据分析" scheme="http://whatbeg.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>那不平凡的2016</title>
    <link href="http://whatbeg.com/2016/12/31/annualsummary2016.html"/>
    <id>http://whatbeg.com/2016/12/31/annualsummary2016.html</id>
    <published>2016-12-31T02:09:52.000Z</published>
    <updated>2017-01-02T06:22:49.828Z</updated>
    
    <content type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;光阴荏苒，似白驹过隙，又到了新的一年即将到来的时候，事务稍缓，得闲坐下来好好撸一下这篇年终总结，回顾一下今年这有生以来算是最不平凡的一年。说她不平凡自有不平凡的理由，今年算是人生中的一个关键转折点，从一个状态，经过中间状态，到达新的状态，收获很多，也失去了不少，有欢乐，有悲伤，有痛苦，有涅槃重生，有胜利的喜悦，有失败的自责，发生了许许多多的事情，明白了许许多多的道理，自己评价起来，今年才是自己真正成为一个“成年人”的一年。所以说，鉴于今年真的发生了很多事，所以可能篇幅会比较长，闲言少叙，进入常规的流水账时间。&lt;/p&gt;
&lt;h2 id=&quot;关于2016&quot;&gt;&lt;a href=&quot;#关于2016&quot; class=&quot;headerlink&quot; title=&quot;关于2016&quot;&gt;&lt;/a&gt;关于2016&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1月&lt;/strong&gt;： 1月份属于刚刚考完研，全面闲下来的时候，这个月也到了学期末，基本就是准备毕业设计开题，然后闲着，闲的没事，只能继续回到图书馆，看看闲书，记得那段时间去图书馆五楼，简直是空空荡荡，跟考研前的人满为患对比起来，会产生一种人走茶凉的感觉。即便如此，也只能忍着继续看，这段时间看了两本以前早就想看的书，一本是卢梭的《忏悔录》，另一本是梭罗的《瓦尔登湖》，在&lt;a href=&quot;http://www.cnblogs.com/whatbeg/p/5189146.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【2016读书】1月读书笔记&lt;/a&gt;中写了一点札记。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2月&lt;/strong&gt;： 2月份就是寒假期间了，寒假期间也一直在看《瓦尔登湖》，然后就在家里跟朋友们聚聚，等待考研结果，最后在正月初九这一天成绩公布，373，还挺高的，大大出乎自己的意料，同时也感到很欣慰，也知道自己真的很可能要走上研究生的道路了，那时候就跟家里说，再等我三年，家里也都很支持我，关于读书的事情我从来遇不到阻力，我真的很幸运。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3月&lt;/strong&gt;： 3月回到学校，准备复试，要看两科很久没碰的学科，有点捉襟见肘，最后3月14号去复试，机试只做出一题，面试感觉也答得不是很理想，结果20多号出成绩，复试成绩竟然还逆袭到第一，有点不可思议，感觉可能是哪里搞错了，也就没管了。3月份为了毕设，开始接触机器学习，数据挖掘方面的东西，看的是周sir的《机器学习》，当时也没有全部看懂，略看了一些，没想到上研究生后还一直在用这方面的知识，感谢自己当初选了一个机器学习方面的毕设题目，虽然，现在看来，当时的毕设做得真的是水！两个字，太水。现在看来，那时做的毕设简直是连机器学习的思想都没有摸到，就在那里瞎做，当然这也是自学的弊端，周围完全没有氛围，自己自学能力也有限，所以就糊弄一般地在做。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4月&lt;/strong&gt;： 4月份就看看剧，然后做做毕设，看看书，4月初开始用hexo搭了自己的独立博客，&lt;a href=&quot;http://whatbeg.com&quot;&gt;whatbeg.com&lt;/a&gt;，新博客的诞生标识着自己的有了一块独立自主的表达自己思想，分享一些技术，心得等等的领地了，还是很开心的。然后一直在摸索这个东西，现在已经比较熟练的摆弄自己的博客了。然后就没什么印象了，过得比较庸庸碌碌。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5月&lt;/strong&gt;： 5月的最大的事情就是面试实习了，先是面试了一家当地的小公司的java，被拒了，然后在学校论坛上看到了北京一家上市公司的python数据分析师招聘贴，就给HR发了一封邮件，结果还被通知面试了，就只需要视频面试，然后面试的时候题目还比较简单，最后不久就收到了录取通知，给的还不能算少，说起来也是缘分，有时候幸福来得就是这么突然，找工作除了实力以外，真的还看一点运气，又一次觉得自己很幸运。5月份开始在做一份兼职，赚点小外快，反正也是闲的，然而6月的毕业旅行把所有外块钱花的一干二净还倒贴了不少。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6月&lt;/strong&gt;： 6月开始考虑毕业的事情了，这期间完成了毕设的答辩，毕业旅行，以及各种毕业的后期工作。毕业旅行从6月14号起，到6月19号结束，期间去了西安，后来转重庆，简要说一下对这两个地方的印象就是，西安biangbiang面很好吃，可能是多朝古都的原因，感觉文化底蕴比较浓厚，西安人有着独特的阳刚之气和自信。重庆的话，玩的地方不多，没地方去了我们居然去了科技馆玩，，也是醉了，但是真的，火锅店超多！吃了好几顿火锅，虽然感觉都是那个味道，但是现在想想火锅还是很馋，不说了，饿了。。^~^ 6月底跟同学们聚一聚，就散了，有的留下，有的离开，相处了四年的同学，真到离别时总是有点不舍，但是也没办法，希望早日再聚吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7月&lt;/strong&gt;： 7月初正式落地北京，开始实习生涯，开始找房子真的很难找的，当然，贵的还是容易找的，但是不想在住上面花费太多钱，最终在论坛上找到了一个还比较靠谱的住的地方，具体就不细说了，也结实了几个同在北京工作或者考研的朋友，晚上回去就聊聊，也是挺惬意，这就是北京，你总能找到许多跟你一起奋斗的年轻人。住在人大里面，相当于在人大读了两个月书一般，感觉每个大学都差不多，设施差不多，人也差不多，由于是放假期间，也看不到多少学习氛围，有的只是一些考研人或者参观者的身影。7月份的工作比较简单，基本就是想解决方案，给你一个问题，让你把它解决，当然不需要做成实际的东西，所以很轻松，很多时间花在了看书学习上，因为发现自己在数据分析的解决方案这上面懂得太少，数学上也是一个短板，最后在与几位老师的交流中，顺利地做完了两个任务，自我感觉做得一般。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8月&lt;/strong&gt;： 8月份就开始有具体的活了，基本就是重构一个数据展示平台，我负责底层数据的提取整理，将多个业务线的数据整合到一起，这期间有什么不懂的就问老大，老大也是很耐心，常常在下班后跟我们聊一聊，跟他学到了不少技术上的东西以及职业规划上面的东西，而且老大不仅很厉害，而且很努力，基本每天第一个到，然后很晚也不带走的，总而言之，老大是一个我很敬佩的人。实习时候的几个一起进来的小伙伴们也都非常好，大家建立了非常深厚的友谊，真的感觉在这个团体很开心，公司的待遇，福利，比如无限的零食，各种吃大餐，还有团建免费旅游等等，真是没的说，所以整个7,8月份实习阶段的感觉就是一个字：爽~。这期间，每逢周末就没闲着，到处去玩，整个两个月下来，基本玩遍了大半个北京，综合感觉，北京能玩的地方还是很多的，而且每个地方都有很多人，从来不缺人。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9月&lt;/strong&gt;： 9月份就入学啦，又进入了一个新的阶段—研究僧阶段，可以说又走上了学校的培养模式道路，也即上课，作业，考试这么一条路子，最大的区别就是研究生的作业会更加偏重实践，偏重编程，难度会更大，但是真正做下来都不会没有收获。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10月&lt;/strong&gt;： 继续学习，10月份爷爷大病了一场，10月底回家一趟，给奶奶祝寿。怎么也没有想到这次回家就是最后一次见到爷爷了。我们的成长，伴随着的是家人的老去，对“子欲养而亲不待”有了一种深切的体会，另一个体会就是真的要关注自己的身体健康，身体是革命的本钱，没有一个好的身体，什么都是空的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;11月&lt;/strong&gt;： 10月份开始做了一个竞赛， 11月份也主要在做这个竞赛，以及一些作业啥的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;12月&lt;/strong&gt;： 12月13号，回家送走了爷爷，真的就再也见不到了，有生以来第一次经历亲人的离世，心情百般复杂，却又说不出来。略去。&lt;br&gt;19号回学校，说竞赛进决赛了，于是24,25号去青岛参加了一个决赛，成绩不怎么样，只能说自己还太弱了，在机器学习，数据分析类的这种竞赛中，我们讨不到便宜，自己这方面的知识技能也有限，总之，能进决赛就不错了，玩的开心就好。&lt;/p&gt;
&lt;p&gt;流水账【完】&lt;/p&gt;
&lt;p&gt;总的来说，今年的大致经历就是这样子，发生了很多事，不自禁地想把他们理一下，觉得自己今年最大的成长就是自信心的增长，关键在于自我在逐渐建立，自我的认同在逐渐建立，不再那么强烈地收到别人眼光的控制，逐渐有了一套自己坚信的信念，自己的一套价值观，人生观，世界观，当然，有时候，“我”的执念还是会卷土重来，但是我一定会尽可能把它扼杀在襁褓中。所以，2017年要做的还是继续进行自我的建立，完善自身，不管是信念，做人和做事等方面。&lt;/p&gt;
&lt;h2 id=&quot;关于计划的完成情况&quot;&gt;&lt;a href=&quot;#关于计划的完成情况&quot; class=&quot;headerlink&quot; title=&quot;关于计划的完成情况&quot;&gt;&lt;/a&gt;关于计划的完成情况&lt;/h2&gt;&lt;p&gt;去年的总结&lt;a href=&quot;http://whatbeg.com/2016/04/05/annualsummary2015.html&quot;&gt;《象牙塔里的2015》&lt;/a&gt;提出了以下的计划：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.加大自己专业能力的提升力度，适当减少专业无关书籍的阅读，选择高质量的作品阅读。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一条算是做了，花了很多时间在专业上，但是从另一个角度说，也是不得不如此，任务使然，当然也有自己的探索，总体感觉深度还不够，都没有一个深入的理解和领会，还浮于表面，看见师兄们对一些系统方面举一反三，深入剖析的时候，就感觉这才是expert的正确打开方式。&lt;br&gt;在做第一条的时候，第二条也没有减少，无关书籍还是读了很多，但是要说无关也有关，在精神层面上得到了一些滋养，这也是必要的。在选择高质量作品方面，今年有了一些经验了，稍稍懂了一点判断，比如某本书是不是好书，是不是感兴趣的书，是不是浪费精力得不到收获的书，是消遣的书还是干货书，等等等等，如何如何。&lt;br&gt;希望来年继续努力。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2.知行合一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总的来说，这一点比较宽泛，不去了解下王阳明的学说，我不好意思说我懂“知行合一”，也就不好判断自己是否就“知行合一”了，于是只能判断其另一个版本，“理论与实践相结合”，这样说来感觉谁都在做，一直在做。所以，继续践行“知行合一”吧，其实就是不断强化理论，然后与实践相结合，又不断强化了实践，实践反过来又可以推动理论的深刻掌握或者创造，太绕了，不说了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3.简化生活。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以说，“简约生活”是我今年一直奉行的一条原则，也努力在简化生活，还是引用那句话：&lt;br&gt;&lt;strong&gt;&lt;code&gt;真正自由的人总能给人以苗条潇洒的印象，那正是因为他们的精神与内心抛弃了多余的东西。&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;我认为，主要从两个方面践行这条原则，一是减少自己的物质需求，克制自己的物质需求，买东西时，先想一下，这件东西，是不是真的有用？是不是长久有用？在购物车里待几天是不是就不会想买了？等等等等，二是内心不断抛弃多余的东西，首要抛弃的就是一个“我”，心如止水，乱则不明，执念于“我”，则心乱而不明。&lt;br&gt;希望来年继续践行~&lt;/p&gt;
&lt;h2 id=&quot;关于读书&quot;&gt;&lt;a href=&quot;#关于读书&quot; class=&quot;headerlink&quot; title=&quot;关于读书&quot;&gt;&lt;/a&gt;关于读书&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/whatbeg/ReadList/blob/master/ReadList.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2016 Read List&lt;/a&gt;&lt;br&gt;今年大抵的书单如上，可以看到，今年读文学作品和技术类的书籍比较多，历史，艺术等类则稍有涉猎。明年也看情况了，想读什么就读什么，但是有本书明年打算读一下，《禅与摩托车维修技术》，阮大神推荐，有机会还是想把《红楼梦》看完，红楼梦里面的语言着实细腻有味，读来如品甘浆，好像甄嬛传里面的对话语句好多是与红楼梦里面的相似的，莫不是模仿过去的？&lt;/p&gt;
&lt;p&gt;有几本印象很深的书，以及年中写过的一篇文章： &lt;a href=&quot;http://whatbeg.com/2016/05/02/talkread.html&quot;&gt;《当我谈阅读时我谈些什么》&lt;/a&gt;，稍稍推荐一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;梭罗《瓦尔登湖》&lt;/strong&gt;&lt;br&gt;简约生活指导手册一般的书，《瓦尔登湖》对简约生活的倡导我现在都时时铭记于心，可以说对我人生观的形成有着巨大的帮助。这是今年第一本要推荐的书。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;欧文·斯通《梵高传》&lt;/strong&gt;&lt;br&gt;感觉非常震撼，很少认认真真地把一本厚厚的传记小说读完了，这本真是有着独特的吸引力让人爱不释手。这是今年第二本要推荐的书。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;罗素《幸福之路》&lt;/strong&gt;&lt;br&gt;然后就是罗素先生的幸福之路，第一次读罗素先生的著作，就被这本书给吸引到了，书中主要关于“怎样获得幸福”进行了探讨，提出了很多有意思的观点。值得一看。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;吴军《数学之美》&lt;/strong&gt;&lt;br&gt;这本书是一本非常好的科普书，将计算机行业里面一些涉及到的数学领域的知识用通俗的语言讲述出来，易懂却又不失启发，IT人推荐读一读。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;叔本华《叔本华美学随笔》&lt;/strong&gt;&lt;br&gt;还没全看完，但是看了其中几篇我就毫不犹豫的买了一本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;王小波《王小波文集》&lt;/strong&gt;&lt;br&gt;这本书有趣有料，充满着王小波式的黑色幽默，有直言不讳，又有拐着弯骂人骂事，爱不释手的一本书。但是不是所有人都喜欢这种风格，所以自我量度吧。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一些思考&quot;&gt;&lt;a href=&quot;#一些思考&quot; class=&quot;headerlink&quot; title=&quot;一些思考&quot;&gt;&lt;/a&gt;一些思考&lt;/h2&gt;&lt;p&gt;不知不觉就到年底，许许多多的事恍如发生在昨日。&lt;br&gt;这一年，整个世界发生了巨大的变化，互联网与IT行业也风云迭起。&lt;br&gt;这一年，AlphaGo在堪称人脑游戏巅峰的围棋领域屡战告捷。&lt;br&gt;这一年，Pokémon Go称霸大洋彼岸，虚拟游戏与现实场景没有了界限。&lt;br&gt;这一年，双十一的天猫，用20秒的时间，实现了“挣它一个亿”的小目标。&lt;br&gt;这一年，美帝的黑客，用网络技术，把即将坐上总统交椅的希拉里掀翻在地。&lt;br&gt;这一年，深度学习，人工智能，区块链，小程序占据了各大IT网站的主要版面。&lt;br&gt;我们的行业正在以惊人的速度发展，几乎每周都有新技术出现，新知识以幂指数增加，几乎每三年就要翻上一番。需要学习的东西多到令人发指。我们的同路人越来越多，有经验的领路人却越来越少：世界上程序员的数量每五年会增加一倍，但太多人都无暇思考与沉淀，在一项技术过时之前，又开始忙着使用另一项新技术……&lt;br&gt;在风云变幻的年代，我们应该如何自处？如何把握时代的脉搏？我们是不可能掌握每一项新技术的，只能够保证在关键的地方不落后，然后找到自己的不可代替点。&lt;br&gt;这一年，收获了许多成长，不再苛求他人的目光，认真做事，踏实做人。&lt;br&gt;这一年，看了许多风景，走过了许多&lt;a href=&quot;http://7xsl28.com1.z0.glb.clouddn.com/footprint170102.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;远方&lt;/a&gt;，方知最美的地方是故乡，最美的人是自己的亲人，身边人。&lt;br&gt;这一年，也犯过不少错误，方知需思而后行，思而后言，思不足则少言，甚至不言，凡事应从容不迫，急躁则滋生鲁莽。&lt;br&gt;这一年，也曾被一些小毛病困扰，这肯定是身体的反抗，提醒我自己的身体要常挂在心上，不能过劳，不要给自己太大压力，也不能过分纵容自己的一些欲望和习惯。&lt;/p&gt;
&lt;h2 id=&quot;关于计划&quot;&gt;&lt;a href=&quot;#关于计划&quot; class=&quot;headerlink&quot; title=&quot;关于计划&quot;&gt;&lt;/a&gt;关于计划&lt;/h2&gt;&lt;p&gt;又到了计划时间，在这个关头，总得立一立小目标，想一想自己以后的路大致该怎么走。&lt;br&gt;大致计划如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;对自己的课题进行深入研究，把论文发掉&lt;br&gt;定期运动，注意健康饮食&lt;br&gt;简约生活&lt;br&gt;Continue Feeling, Thinking, Reading and Writing&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计划先列这几个，其他的就是增强型的，反正都是要做的，就不作为计划了。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;时光飞逝，现在的我，坐在实验室，等待着本学期最后一门考试，未来的研究方向还没有确定，师兄们有早早把论文发掉的，也有研三了还没发掉的，不知道自己会不会成为那个幸运的人呢？不管怎么样，还是保持一个良好的心态吧，毕竟，持续地焦虑根本不能解决问题，踏踏实实把事做了才是正道。就这样吧，2017，开始新的篇章！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;光阴荏苒，似白驹过隙，又到了新的一年即将到来的时候，事务稍缓，得闲坐下来好好撸一下这篇年终总结，回顾一下今年这有生以来算是最不平凡的一年。说
    
    </summary>
    
      <category term="成长之路 | Biography" scheme="http://whatbeg.com/categories/%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF-Biography/"/>
    
    
      <category term="Summary" scheme="http://whatbeg.com/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘综合实践</title>
    <link href="http://whatbeg.com/2016/12/29/dataminingsynthesize.html"/>
    <id>http://whatbeg.com/2016/12/29/dataminingsynthesize.html</id>
    <published>2016-12-29T06:08:18.000Z</published>
    <updated>2016-12-29T06:17:49.637Z</updated>
    
    <content type="html">&lt;p&gt;本文描述了几个月以来所做的一些数据挖掘实践，综合总结一下，形成此文，也对本学期数据挖掘课程做一个总结。&lt;br&gt;代码Github地址： &lt;a href=&quot;https://github.com/whatbeg/DataMiningTasks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/whatbeg/DataMiningTasks&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;TF-IDF-Feature-Extraction-TF-IDF特征提取）&quot;&gt;&lt;a href=&quot;#TF-IDF-Feature-Extraction-TF-IDF特征提取）&quot; class=&quot;headerlink&quot; title=&quot;TF-IDF Feature Extraction (TF-IDF特征提取）&quot;&gt;&lt;/a&gt;TF-IDF Feature Extraction (TF-IDF特征提取）&lt;/h2&gt;&lt;h3 id=&quot;数据&quot;&gt;&lt;a href=&quot;#数据&quot; class=&quot;headerlink&quot; title=&quot;数据&quot;&gt;&lt;/a&gt;数据&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;数据为数据集 ICML&lt;/li&gt;
&lt;li&gt;采用 Python 2.7.10 和 Windows10 系统 作为编程环境&lt;/li&gt;
&lt;li&gt;输出的结果名为 “类名_RESULT.txt”，位于与类目录同级的目录下。&lt;/li&gt;
&lt;li&gt;结果数据包含 N 条， N 为此类中文章数目，在每条输出结果中，第一行为文章名字，然后紧跟着的是词的 TF-IDF 值向量，由于值向量稀疏，所以做了压缩，即以“序号： TF-IDF 值”的表示方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先集合所有文章，得到他们的路径&lt;/li&gt;
&lt;li&gt;然后将所有文章分词，将无关或者非法字符用空格替换，然后采用 NLTK 的 word_tokenize 方法进行&lt;br&gt;分词， 然后用 NLTK 的 SnowballStemmer 进行词干提取，然后将单词进行小写化， 通过字典去重（存&lt;br&gt;成字典 key），然后去除一些无关词，数字以及停用词，停用词选用了网上一个版本的停用词，约 900&lt;br&gt;个停用词。&lt;/li&gt;
&lt;li&gt;然后将所有词排序，编号，后续输出时以编号代替词，而不需写出词。&lt;/li&gt;
&lt;li&gt;然后循环处理每个类（每种论文的目录），对这个目录下的所有文章，对每篇文章的词算出他们的TF 和 IDF 值，得到 TF-IDF 值，存储到这个类这篇文章的结果数据中。&lt;/li&gt;
&lt;li&gt;TF 词频采用的计算方法为： TF = 词在文章中出现次数 / 文章总词数&lt;/li&gt;
&lt;li&gt;IDF 计算方法为： IDF = log(总文章数 / 此词出现的文章数目)&lt;/li&gt;
&lt;li&gt;处理完每个类，结束。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;结果&quot;&gt;&lt;a href=&quot;#结果&quot; class=&quot;headerlink&quot; title=&quot;结果&quot;&gt;&lt;/a&gt;结果&lt;/h3&gt;&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/dataminingtask1-1.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;


&lt;h3 id=&quot;思考&quot;&gt;&lt;a href=&quot;#思考&quot; class=&quot;headerlink&quot; title=&quot;思考&quot;&gt;&lt;/a&gt;思考&lt;/h3&gt;&lt;p&gt;TF，IDF 的计算方法多种多样，本文采用的方法中，最终结果的TF-IDF数值上偏小，在保证含义的情况下可以采用其他方法，使 TF-IDF大致为一个正常值，以便更好地比较。用NLTK包的stemmer提取词干的时候难免会有一些提取的错误，这是由于词干提取并非完美的缘故，由于这个缘故，可以不进行词干提取，这样可以保持所有的信息，但是缺点就是会有多种变形词，单词数会增加 1/4到1/3，导致矩阵增大。&lt;/p&gt;
&lt;h2 id=&quot;Dimensionality-Reduction-（降维方法）&quot;&gt;&lt;a href=&quot;#Dimensionality-Reduction-（降维方法）&quot; class=&quot;headerlink&quot; title=&quot;Dimensionality Reduction （降维方法）&quot;&gt;&lt;/a&gt;Dimensionality Reduction （降维方法）&lt;/h2&gt;&lt;h3 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h3&gt;&lt;p&gt;本部分描述实现降维的三种方法，分别是 PCA， SVD 以及流形学习中的 ISOMAP 算法，其中 ISOMAP 算法还需调用 MDS（ Multiple Dimensional Scaling 多维缩放），并且对这三种算法在两个不同规模的数据集上进行了测试。&lt;/p&gt;
&lt;h3 id=&quot;PCA&quot;&gt;&lt;a href=&quot;#PCA&quot; class=&quot;headerlink&quot; title=&quot;PCA&quot;&gt;&lt;/a&gt;PCA&lt;/h3&gt;&lt;p&gt;PCA 算法的原理这里不做详细描述，只写明实现过程，首先将训练数据集中心化，然后计算训练数据集的协方差矩阵，对此协方差矩阵 C 做特征值分解，可以得出 C 的所有特征值和对应的特征向量，选取最大的k（降维后的维度数）个特征值和其对应的特征向量，即可得到高维到低维的映射矩阵 W。&lt;br&gt;PCA 算法伪代码如下：&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/PCA1.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;h3 id=&quot;SVD&quot;&gt;&lt;a href=&quot;#SVD&quot; class=&quot;headerlink&quot; title=&quot;SVD&quot;&gt;&lt;/a&gt;SVD&lt;/h3&gt;&lt;p&gt;SVD 算法与 PCA 算法很相似，并且可以使用SVD来计算PCA，它们的唯一区别就是SVD并不对训练样本集进行中心化，使各个维度的均值为 0，而是直接对训练集样本矩阵做 SVD分解，得出排序后的特征值和特征向量矩阵，取前k个特征值对应的特征向量即可组成高维到低维的映射矩阵。&lt;br&gt;SVD 算法伪代码如下：&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/SVD1.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;


&lt;h3 id=&quot;ISOMAP&quot;&gt;&lt;a href=&quot;#ISOMAP&quot; class=&quot;headerlink&quot; title=&quot;ISOMAP&quot;&gt;&lt;/a&gt;ISOMAP&lt;/h3&gt;&lt;p&gt;ISOMAP 是一个非线性降维算法，全称 Isometric Mapping，等度量映射，重点在于高维空间的测地线距离在低维空间的保持。算法流程如下：&lt;br&gt;（a） 计算样本集（测试集和训练集）的欧式距离&lt;br&gt;（b） 对于每个样本，取 4 个最近的样本，建立连边&lt;br&gt;（c） 用最短路算法算出两两点间的最短距离，这里会出现一个整个图可能形成多个&lt;br&gt;连通分量而导致不连通的问题，这样的话令不连通点间的距离为 0。&lt;br&gt;（d） 将整个图的距离矩阵作为 MDS 的输入，直接得出低维空间的样本表示，包括&lt;br&gt;测试集和训练集。&lt;br&gt;ISOMAP 算法伪代码如下：&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/ISOMAP1.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;最后的测试是讲高维样本映射到低维空间，然后运行 1-NN 算法对测试数据进行分类。&lt;/p&gt;
&lt;h3 id=&quot;数据-1&quot;&gt;&lt;a href=&quot;#数据-1&quot; class=&quot;headerlink&quot; title=&quot;数据&quot;&gt;&lt;/a&gt;数据&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;数据 sonar 和 splice 数据集， sonar 是小数据集， splice 是较大的数据集。&lt;/li&gt;
&lt;li&gt;采用 Python 2.7.10 和 Windows10 系统 作为编程环境&lt;/li&gt;
&lt;li&gt;输出的结果将会被组成一个表格在下文给出。&lt;/li&gt;
&lt;li&gt;结果数据包括在不同数据集下和不同的降维后维度数 k 的条件下，得到的最后 1NN 分类结果的准确率。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;几点细节&quot;&gt;&lt;a href=&quot;#几点细节&quot; class=&quot;headerlink&quot; title=&quot;几点细节&quot;&gt;&lt;/a&gt;几点细节&lt;/h3&gt;&lt;p&gt;（a） 在实现 ISOMAP 的时候， 4NN 地建立邻接图很有可能会形成多个联通分量，这时候有两种解决方法，一种是增大 Nearest Neighbor 的数量，直到联通，但是这种方法有所不妥， NN 越大，越有可能形成“短路”的现象，即明明两个点距离很远（他们的连边跨越了不可达区域），还是会将它们连起来，距离为其欧氏距离，这样破坏了流形的性质，可能造成结果的偏差；另一种方法使不连通的两两联通分量，各自取一个点使这两点距离最近，将这两点连边，这样就可以使这两个连通分量联通，这种方式大大降低了“短路”的概率，小小的不足就是会有一笔计算开销，不过经过测试，这种开销的增加可以近乎忽略。&lt;/p&gt;
&lt;p&gt;详细过程如下：&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;1. &lt;/span&gt;得到 4NN 图，通过 dfs 对图中点进行着色，两点之间如果可以连通则着同一色，最后得到的颜色数就是联通分量数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;2. &lt;/span&gt;找两个距离最近的联通分量合并，将颜色赋为相同颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;3. &lt;/span&gt;重复 2 直到全部为一个联通分量&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用了贪心的思想，在算法的正确性上，可以在保证“短路”概率最小的前提下将非连通图变成连通图。&lt;/p&gt;
&lt;p&gt;（b） ISOMAP 计算任意两点之间的最短距离时，在大数据集 splice（ 3000+条）下，python计算效率明显低下， 测试下发现需要 8 个小时左右！ 于是在代码中嵌入了 C 程序的执行，将时间缩短到百秒级别，传参采用文件形式。&lt;/p&gt;
&lt;h3 id=&quot;结果-1&quot;&gt;&lt;a href=&quot;#结果-1&quot; class=&quot;headerlink&quot; title=&quot;结果&quot;&gt;&lt;/a&gt;结果&lt;/h3&gt;&lt;p&gt;测试结果如下，不同数据集，不同维度 k 下不同算法进行 1NN 分类的准确率见下图。&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/dataminingtask2-1.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;h3 id=&quot;代码解释&quot;&gt;&lt;a href=&quot;#代码解释&quot; class=&quot;headerlink&quot; title=&quot;代码解释&quot;&gt;&lt;/a&gt;代码解释&lt;/h3&gt;&lt;p&gt;其中 DimensionalityReduction.py 实现三种降维算法，floyd.c, floyd.exe, floyd.o 为 C 语言实现的 Floyd 算法，供 python 调用，graph.txt 为 python 往 C 传的参数。graph_floyded.txt 为 C 对图运行完 floyd 算法后传回的图参数。然后接下来是 4 个数据集和测试集。最后是 Test.py 测试程序。&lt;/p&gt;
&lt;h3 id=&quot;思考-1&quot;&gt;&lt;a href=&quot;#思考-1&quot; class=&quot;headerlink&quot; title=&quot;思考&quot;&gt;&lt;/a&gt;思考&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;python 调用 C 有一套接口，如 ctypes, cython 等，可以将 floyd 算法或者 dijkstra 算法直接嵌入到 python 程序中，可以免去文件传参的开销，加快运行速度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MDS 中，对内积矩阵 B 进行特征分解的时候，明明 B 是实对称矩阵， 采用numpy.linalg.eig()函数计算还是会出现复数特征值的情况，尽管他们的虚部或正或负都很小，即使 B = 0.5(B+B’)这样的处理之后还是会出现，后来采用了eigh()函数，即计算埃尔米特矩阵或者对称矩阵特征值和特征向量的专用函数，则分解出来的都是实数。所以可能是函数的问题，因为我们已经知道B是实对称的，所以直接可以用 eigh 函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在处理 ISOMAP 邻接图不连通的情况时，不知道有没有更好的方法，在网上基本鲜有这方面的资料，不知道看到这里的读者有没有建议呢？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后由于能够保证联通，所以测试了建立近邻连接图的邻接个数（这里是 4）对测试结果的影响， 选了 3NN， 4NN， 5NN， 6NN 四种， 最后在发现 3NN 最差，在大数据集 splice 上， 5NN 取得了很好的效果， 6NN 次之， 4NN 再次之，但是在小数据集上，4NN 是最好的， 5NN 和 6NN 的表现就大大的变差了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以来说，最后选择了用 4NN（近邻连接图）来测试小数据集， 5NN 来测试大数据集。&lt;/p&gt;
&lt;p&gt;取得效果如下：&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/dataminingtask2-2.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;p&gt;总的来说， NN 太小容易使本来很近的点却要在图中绕很远才能到，给距离带来了误&lt;br&gt;差， NN 越大则“短路”可能性又提高。&lt;/p&gt;
&lt;h2 id=&quot;Clustering-（聚类）&quot;&gt;&lt;a href=&quot;#Clustering-（聚类）&quot; class=&quot;headerlink&quot; title=&quot;Clustering （聚类）&quot;&gt;&lt;/a&gt;Clustering （聚类）&lt;/h2&gt;&lt;h3 id=&quot;任务-1&quot;&gt;&lt;a href=&quot;#任务-1&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h3&gt;&lt;p&gt;本部分描述实现两种聚类算法，其一为K-medoids（K-中心点）算法，其二为基于谱图理论的谱聚类算法。数据集有两个，一个是小数据集 german.txt，其中有1000个样本，每个样本有24个特征，每个样本占一行，最后为该样本的标签，标签分两类，1和-1，标签用作Gini系数和Purity的计算。另一个是大数据集mnist.txt，其中包括10000个样本，每个样本有784个特征，每个样本占一行，最后为该样本的标签，标签分 10&lt;br&gt;类， 0-9。&lt;br&gt;下面简要说明两种聚类算法的流程。&lt;/p&gt;
&lt;h3 id=&quot;K-medoids-算法&quot;&gt;&lt;a href=&quot;#K-medoids-算法&quot; class=&quot;headerlink&quot; title=&quot;K-medoids 算法&quot;&gt;&lt;/a&gt;K-medoids 算法&lt;/h3&gt;&lt;p&gt;类似 K-means 算法的原理，只是聚类的中心不是所有该类所有样本的特征平均值，而是限制聚类的中心必须是该类的某一个样本，这样做的好处是可以有效避免离群点的影响，适用于异构数据等。初始找 k 个中心点，然后将每个点分到离它最近的中心点代表的类中，然后对每一类更新中心点，这样循环往复直到中心点不再变化。&lt;/p&gt;
&lt;p&gt;算法伪代码如下：&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/KMEDOIDS1.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;


&lt;h3 id=&quot;谱聚类算法&quot;&gt;&lt;a href=&quot;#谱聚类算法&quot; class=&quot;headerlink&quot; title=&quot;谱聚类算法&quot;&gt;&lt;/a&gt;谱聚类算法&lt;/h3&gt;&lt;p&gt;基于谱图理论，适用于数据是非凸的或者类似于嵌入高维空间的低维流形时。基本思路是对每个样本点，与跟它最相似的多个样本点之间连边，边的权值可以赋为相似度或者 1（两种方式），然后计算拉普拉斯矩阵 L=D-W，其中 D 为每个样本点的度2作为对角元素组成的对角矩阵，W就是刚才的距离矩阵。然后对拉普拉斯矩阵 L 进行特征分解，取最小的 k 个特征值对应的特征向量作为新的样本表示，然后对这个样本表示进行K-medoids 聚类或者 K-means 聚类等即可得到聚类结果。&lt;/p&gt;
&lt;p&gt;算法伪代码如下：&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/SPECTUALCLUSTRING.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;h3 id=&quot;数据与环境&quot;&gt;&lt;a href=&quot;#数据与环境&quot; class=&quot;headerlink&quot; title=&quot;数据与环境&quot;&gt;&lt;/a&gt;数据与环境&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;数据为 german 和 mnist 数据集， german 是小数据集， mnist 是较大的数据集，数据说明见上一节。&lt;/li&gt;
&lt;li&gt;采用 Python 2.7.12 和 Ubuntu16.04 系统 作为编程环境&lt;/li&gt;
&lt;li&gt;输出的结果将会被组成一个表格在下文给出。&lt;/li&gt;
&lt;li&gt;结果数据包括在不同数据集下k-medoids算法聚类的效果，以Gini系数和Purity作为衡量依据，以及在不同数据集下和不同近邻数下 Spectral Clustering 聚类的效果，结果也以 Gini系数和 Purity 作为依据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;结果-2&quot;&gt;&lt;a href=&quot;#结果-2&quot; class=&quot;headerlink&quot; title=&quot;结果&quot;&gt;&lt;/a&gt;结果&lt;/h3&gt;&lt;p&gt;测试结果如下，不同数据集下，不同算法下进行聚类的 Purity 见图 1。&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/dataminingtask3-1.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;


&lt;p&gt;不同数据集下，不同算法下进行聚类的 Gini 系数见图 2。&lt;/p&gt;
&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/dataminingtask3-2.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;


&lt;center&gt; &lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/dataminingtask3-3.png&quot; alt=&quot;&quot;&gt; &lt;/center&gt;

&lt;h3 id=&quot;思考-2&quot;&gt;&lt;a href=&quot;#思考-2&quot; class=&quot;headerlink&quot; title=&quot;思考&quot;&gt;&lt;/a&gt;思考&lt;/h3&gt;&lt;p&gt;纯枚举中心点替换的方法虽然说准确度高，但是速度太慢，在更大的数据集下必然很低效，可以考虑采用随机选取 r 个点对进行替换的方式，损失一点准确度，来对算法进行加速。或者也可以采用其他优化算法优化效率&lt;/p&gt;
&lt;h2 id=&quot;Training-Classifers-via-Stochastic-Gradient-Descent-（随机梯度下降）&quot;&gt;&lt;a href=&quot;#Training-Classifers-via-Stochastic-Gradient-Descent-（随机梯度下降）&quot; class=&quot;headerlink&quot; title=&quot;Training Classifers via Stochastic Gradient Descent （随机梯度下降）&quot;&gt;&lt;/a&gt;Training Classifers via Stochastic Gradient Descent （随机梯度下降）&lt;/h2&gt;&lt;p&gt;这部分详见文章： &lt;a href=&quot;http://whatbeg.com/2016/11/18/trainclassifiersviaSGD.html&quot;&gt;Training Classifers via Stochastic Gradient Descent&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Ensemble-Learning-（集成学习）&quot;&gt;&lt;a href=&quot;#Ensemble-Learning-（集成学习）&quot; class=&quot;headerlink&quot; title=&quot;Ensemble Learning （集成学习）&quot;&gt;&lt;/a&gt;Ensemble Learning （集成学习）&lt;/h2&gt;&lt;p&gt;这部分详见文章： &lt;a href=&quot;http://whatbeg.com/2016/12/01/naivebayesboosting.html&quot;&gt;谈一谈朴素贝叶斯作为基分类器的Adaboost算法 （Naive Bayes Based Adaboost）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Association-rule-mining-（关联规则挖掘）&quot;&gt;&lt;a href=&quot;#Association-rule-mining-（关联规则挖掘）&quot; class=&quot;headerlink&quot; title=&quot;Association rule mining （关联规则挖掘）&quot;&gt;&lt;/a&gt;Association rule mining （关联规则挖掘）&lt;/h2&gt;&lt;p&gt;这部分源码见AprioriTest，实现了一下Apriori算法，具体流程不细述。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;本文简要总结了一下数据挖掘的几个实践project，其中包括最基本的TF-IDF统计，以及降维，聚类，分类，集成学习，随机梯度下降等等，简要实现了几个数据挖掘上的基本算法，实现的比较简单，当做进一步理解算法之用，机器学习的方面远远不止这些，比如降维方法除了上述三种之外还有LLE，LE，LTSA，KPCA等等，聚类还包括层次聚类，AGNES等，以及kmeans，CLARANS等基于代表的算法，还有基于密度的方法，包括DENCLUE,DBSCAN等等，以及基于网格的方法(grid-based)包括CLIQUE等。分类方法那就更多了，SVM，LR，DT，，，一些数据挖掘比赛中用的比较多的是XGBoost，GBDT等，有时间要好好了解一下，最后集成学习中主要包括两大类算法，一种叫Bagging（Bootstrapped Aggregating）,主要通过多次采样平均，来降低variance，另一种Boosting，通过多个分类器的集成，降低bias。总之，数据挖掘课程的学习到这里就告一段落了，接下来的学习就要靠自己了，慢慢的运用，慢慢的学习吧，数据挖掘这条路，还是有很远要走的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文描述了几个月以来所做的一些数据挖掘实践，综合总结一下，形成此文，也对本学期数据挖掘课程做一个总结。&lt;br&gt;代码Github地址： &lt;a href=&quot;https://github.com/whatbeg/DataMiningTasks&quot; target=&quot;_blank&quot; r
    
    </summary>
    
      <category term="数据科学 | Data Science" scheme="http://whatbeg.com/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6-Data-Science/"/>
    
    
      <category term="机器学习" scheme="http://whatbeg.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop MapReduce 社交网络三角形统计</title>
    <link href="http://whatbeg.com/2016/12/02/trianglecount.html"/>
    <id>http://whatbeg.com/2016/12/02/trianglecount.html</id>
    <published>2016-12-02T03:50:09.000Z</published>
    <updated>2017-01-11T06:52:13.501Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h2&gt;&lt;p&gt;图的三角形计数问题是一个基本的图计算问题，是很多复杂网络分析（比如社交网络分析）的基础。&lt;br&gt;在一个随机图中三角形的期望数目大约是$\frac {4} {3} (m/n)^3$, 其中m是边数，n是点数。而在一张社会网络关系图中，我们预期其中的三角形数会远远高于随机图中的三角形数目，原因在于A,B是朋友，B,C是朋友时，A,C也是朋友/可能成为朋友的概率大于随机值。所以三角形技术能够帮助我们度量一张图看上去像社会网络的程度，也可以帮我们判断社会网络的成熟度或者社区的年龄。&lt;br&gt;目前图的三角形计数问题已经成为了Spark系统中GraphX图计算库所提供的一个算法级API。本次实验任务就是要在Hadoop系统上实现 Twitter 社交网络图的三角形计数任务。&lt;/p&gt;
&lt;h2 id=&quot;任务描述&quot;&gt;&lt;a href=&quot;#任务描述&quot; class=&quot;headerlink&quot; title=&quot;任务描述&quot;&gt;&lt;/a&gt;任务描述&lt;/h2&gt;&lt;p&gt;一个社交网络可以看做是一张图（离散数学中的图）。社交网络中的人对应于图的顶点；社交网络中的人际关系对应于图中的边。在本次实验任务中，我们只考虑一种关系——用户之间的关注关系。假设“王五”在 Twitter/微博中关注了“李四”，则在社交网络图中，有一条对应的从“王五”指向“李四”的有向边。图 1 中展示了一个简单的社交网络图，人之间的关注关系通过图中的有向边标识了出来。本次的实验任务就是在给定的社交网络图中，统计图中所有三角形的数量。&lt;br&gt;在统计前，需要先进行有向边到无向边的转换，依据如下逻辑转换：&lt;br&gt;$$IF~(A→B)~OR~(B→A)~ THEN~A→B$$&lt;/p&gt;
&lt;p&gt;“A→B”表示从顶点 A 到顶点 B 有一条有向边。A-B 表示顶点 A 和顶点 B 之间有一条无向边。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/trianglecount2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;一个示例见图 1，图 1 右侧的图就是左侧的图去除边方向后对应的无向图。&lt;/p&gt;
&lt;p&gt;请在无向图上统计三角形的个数。在图 1 的例子中，一共有 3 个三角形。&lt;br&gt;本次实验将提供一个 Twitter 局部关系图[1]作为输入数据（给出的图是有向图），请统计该图对应的无向图中的三角形个数。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式&quot;&gt;&lt;/a&gt;输入格式&lt;/h3&gt;&lt;p&gt;输入数据仅一个文件。该文件由若干行组成，每一行由两个以空格分隔的整数组成：&lt;br&gt;A B&lt;br&gt;A，B 分别是两个顶点的 ID。这一行记录表示图中具有一条由 A 到 B 的有向边。整个图的&lt;br&gt;结构由该文件唯一确定。&lt;/p&gt;
&lt;p&gt;下面的框中是文件部分内容的示例：&lt;br&gt;&lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/trianglecount1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法思路&quot;&gt;&lt;a href=&quot;#方法思路&quot; class=&quot;headerlink&quot; title=&quot;方法思路&quot;&gt;&lt;/a&gt;方法思路&lt;/h2&gt;&lt;p&gt;找三角形在离散数学中有数学上的方法，即矩阵自乘两次，矩阵自乘一次后的结果矩阵的对角线上的元素$A_{ii}$代表的是$i$节点经过两条边再回到该点的路径数目，再乘一次后的结果对角线上的元素表示经过三条边回到该点的路径数目，这时候就有了一个三角形，由于每个在三角形中的点都会从两个方向出发走三条边回到自己，所以，每个三角形都做了点数(3)乘以方向数(2)次计算，所以应该将最后的结果除以6得到最终结果。&lt;/p&gt;
&lt;p&gt;另一种想法是，直观的去找，要找三角形，先找到两条边，比如要找$\nabla ABC$，可以先找到A-&amp;gt;B, A-&amp;gt;C，那么下一步就是找B-&amp;gt;C或者C-&amp;gt;B了，由于我们先对边做了无向处理，将所有的无向边的端点按字典序排序好了，所以相当于找B-&amp;gt;C就可以了。所以考虑有A-&amp;gt;B和A-&amp;gt;C时发射一个B-&amp;gt;C的需求，再发射自己A-&amp;gt;B,A-&amp;gt;C的供给，如果别的地方需要A-&amp;gt;B或者A-&amp;gt;C的边，那么可以直接供给，一旦有边，就可以供给给任意多的需要，这时候看最终某条边到底有多少需求，然后有没有供给，如果有供给，则三角形数目更新为加上这条边需求的数目。同样的，如果别的地方有B-&amp;gt;C这条边的供给，那么此时的B-&amp;gt;C需求就得到了满足，相当于新发现了一个三角形。按照这种Feed&amp;amp;Eat的方式，就可以使用MapReduce来处理社交网络三角形统计了。&lt;/p&gt;
&lt;h2 id=&quot;初步探索&quot;&gt;&lt;a href=&quot;#初步探索&quot; class=&quot;headerlink&quot; title=&quot;初步探索&quot;&gt;&lt;/a&gt;初步探索&lt;/h2&gt;&lt;p&gt;初步探索的算法分以下四个模块，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GraphUndirecter.java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图的无向化，按照OR逻辑，$IF~(A→B)~OR~(B→A)~ THEN~A-B$，如果存在某一个方向的边，则按字典序对两个端点从小到大排序，发射一条从小指到大的边，为了防止发射重复边，全局采用一个HashSet&lt;string&gt;来判重。并且需要判断自环。这个类只需要读取文件发射边即可，无需Reduce步骤。&lt;/string&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight gauss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Key&lt;/span&gt;: 输入文件的行偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Value: &lt;span class=&quot;string&quot;&gt;&quot;A B&quot;&lt;/span&gt;    （A,B为点的ID）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Key&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;A#B&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Output&lt;/span&gt; Value: &lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;伪代码如下：&lt;br&gt;&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Object key, Text &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;, Context context&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    st &lt;/span&gt;= Tokenizer(&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A = st.nextToken()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    B = st.nextToken()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; A != B:   &lt;span class=&quot;comment&quot;&gt;//判自环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; A &amp;lt; B:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            emit(&lt;span class=&quot;string&quot;&gt;&quot;A#B   #&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            emit(&lt;span class=&quot;string&quot;&gt;&quot;B#A   #&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TilingGraph.java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将上一步得到的边展开成邻接表一样的形式，方便发射需求边和供给边。如： A-&amp;gt;[B, C, D]，此时我们会发射需求边： B-&amp;gt;C, B-&amp;gt;D, C-&amp;gt;D，和供给边A-&amp;gt;B, A-&amp;gt;C, A-&amp;gt;D。由于前面已经将&lt;/p&gt;
&lt;figure class=&quot;highlight gauss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Key&lt;/span&gt;: 输入文件的行偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Value: &lt;span class=&quot;string&quot;&gt;&quot;A#B #&quot;&lt;/span&gt;    （A,B为点的ID）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Key&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;A#B&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Output&lt;/span&gt; Value: &lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; 或者 &lt;span class=&quot;string&quot;&gt;&quot;@&quot;&lt;/span&gt;    (&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;供给，&lt;span class=&quot;string&quot;&gt;&quot;@&quot;&lt;/span&gt;需求）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;伪代码如下：&lt;br&gt;&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;(Object &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;, Text value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    st = Tokenizer(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A = st.nextToken()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    B = st.nextToken()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    emit(A,B)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void reduce(Text &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;, Iterable&amp;lt;Text&amp;gt; &lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        emit(&lt;span class=&quot;string&quot;&gt;&quot;key#v&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; -&amp;gt; len(&lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j = i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; -&amp;gt; len(&lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;[i] &amp;lt; &lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;[j]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                emit(&lt;span class=&quot;string&quot;&gt;&quot;values[i]#values[j]&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;@&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                emit(&lt;span class=&quot;string&quot;&gt;&quot;values[j]#values[i]&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;@&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FeedAndCount.java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;得到了所有边是否有需求有供给的情况我们只需要统计每条边是否有供给，如果有，那么它有多少需求，将这些需求满足形成若干个三角形，以此累加三角形数。&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Key&lt;/span&gt;: 输入文件的行偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Value&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;A#B #&quot;&lt;/span&gt; 或者 &lt;span class=&quot;string&quot;&gt;&quot;A#B @&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output &lt;span class=&quot;attribute&quot;&gt;Key&lt;/span&gt;: &amp;lt;Result &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; Triangle &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;伪代码如下：&lt;br&gt;&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RESULT = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;(Object &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;, Text value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    st = Tokenizer(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A = st.nextToken()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    B = st.nextToken()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    emit(A, B)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void reduce(Text &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;, Iterable&amp;lt;Text&amp;gt; &lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int jin = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;at&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Text val : &lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (val.toString().equals(&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            jin++;   // &lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;有&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (val.toString().equals(&lt;span class=&quot;string&quot;&gt;&quot;@&quot;&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;at&lt;/span&gt;++;   // &lt;span class=&quot;string&quot;&gt;&quot;@&quot;&lt;/span&gt;数目加&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (jin &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) RESULT += &lt;span class=&quot;built_in&quot;&gt;at&lt;/span&gt;;  // 如果有（&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;），则统计&lt;span class=&quot;built_in&quot;&gt;at&lt;/span&gt;个三角形&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TriangleCountDriver.java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;驱动三个Job的执行，读取用户命令行参数，然后调用以上三个类，统筹整个程序的执行。&lt;/p&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GraphUndirecter&lt;span class=&quot;selector-class&quot;&gt;.main&lt;/span&gt;(new String&lt;span class=&quot;selector-attr&quot;&gt;[]&lt;/span&gt;&amp;#123;myArgs&lt;span class=&quot;selector-attr&quot;&gt;[0]&lt;/span&gt;, myArgs&lt;span class=&quot;selector-attr&quot;&gt;[1]&lt;/span&gt;&amp;#125;);  &lt;span class=&quot;comment&quot;&gt;// input -&amp;gt; middle1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TilingGraph&lt;span class=&quot;selector-class&quot;&gt;.main&lt;/span&gt;(new String&lt;span class=&quot;selector-attr&quot;&gt;[]&lt;/span&gt;&amp;#123;myArgs&lt;span class=&quot;selector-attr&quot;&gt;[1]&lt;/span&gt;, myArgs&lt;span class=&quot;selector-attr&quot;&gt;[2]&lt;/span&gt;&amp;#125;);      &lt;span class=&quot;comment&quot;&gt;// middle1 -&amp;gt; middle2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FeedAndCount&lt;span class=&quot;selector-class&quot;&gt;.main&lt;/span&gt;(new String&lt;span class=&quot;selector-attr&quot;&gt;[]&lt;/span&gt;&amp;#123;myArgs&lt;span class=&quot;selector-attr&quot;&gt;[2]&lt;/span&gt;, myArgs&lt;span class=&quot;selector-attr&quot;&gt;[3]&lt;/span&gt;&amp;#125;);     &lt;span class=&quot;comment&quot;&gt;// middle2 -&amp;gt; output&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调优后最好的成绩跑twitter数据集用了6分多钟，跑google数据集只跑了一次，跑了20+小时，所以效率并不是最优的。&lt;/p&gt;
&lt;h2 id=&quot;进一步的尝试&quot;&gt;&lt;a href=&quot;#进一步的尝试&quot; class=&quot;headerlink&quot; title=&quot;进一步的尝试&quot;&gt;&lt;/a&gt;进一步的尝试&lt;/h2&gt;&lt;p&gt;由于以上三个job的方式仍需要6分钟，感觉还是太慢，想了想能否优化一下呢，因为这里会读三次磁盘（数据，中间结果1，中间结果2），这样磁盘读写的消耗是很大的。仔细分析一下是可以缩减磁盘读写次数的。&lt;/p&gt;
&lt;h3 id=&quot;尝试一&quot;&gt;&lt;a href=&quot;#尝试一&quot; class=&quot;headerlink&quot; title=&quot;尝试一&quot;&gt;&lt;/a&gt;尝试一&lt;/h3&gt;&lt;p&gt;看到第一个类其实就是map一下，去一下重，把无向图做出来，没有reduce，所以想直接一步做图的无向化和图展开，发射需求和供给边，即&lt;br&gt;&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;第一步： &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;A B&quot;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt; -&amp;gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;key:A, value:B&quot;&lt;/span&gt;  （为了不发射重边，做了一个HashSet判重）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reduce:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     A, [B, C, D...,S]&lt;span class=&quot;function&quot;&gt; -&amp;gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;A&lt;span class=&quot;subst&quot;&gt;#B&lt;/span&gt;   #&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;A&lt;span class=&quot;subst&quot;&gt;#C&lt;/span&gt;    #&quot;&lt;/span&gt;, ... , &lt;span class=&quot;string&quot;&gt;&quot;B&lt;span class=&quot;subst&quot;&gt;#C&lt;/span&gt;  @&quot;&lt;/span&gt;, ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二步：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    统计&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样直接两步做完，第一步工作量会大一点。可是很遗憾，在本地跑是完全可以的，可是放到集群上运行，map到21%就map不动了，可能是HashSet同步问题的原因？或者是shuffle量太大的原因？不得而知，没有报错也看不到日志，怀疑是后者，量太大导致内存不够，一直在GC，导致卡死。因为缩减数据规模还是勉强能跑的，不过才30M（twitter）就这样了，肯定不可取。&lt;/p&gt;
&lt;h3 id=&quot;尝试二&quot;&gt;&lt;a href=&quot;#尝试二&quot; class=&quot;headerlink&quot; title=&quot;尝试二&quot;&gt;&lt;/a&gt;尝试二&lt;/h3&gt;&lt;p&gt;上一步的失败可能是因为第一个job工作量太大了，既要判重发射所有无向边，又要发射存在的边和枚举近邻之间发射需求边，这对它不公平，所以考虑将工作分配均匀一下，这样就得到了下面一种方法：&lt;br&gt;(注：这里的A,B,C,D…都代表某一个点)&lt;/p&gt;
&lt;figure class=&quot;highlight gauss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JOB1：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Key&lt;/span&gt;: 输入文件的行偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Value: &lt;span class=&quot;string&quot;&gt;&quot;A B&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;Output&lt;/span&gt; value: &lt;span class=&quot;string&quot;&gt;&quot;B,C,E,D,...,S&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JOB2：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Key&lt;/span&gt;: 输入文件的行偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Value: &lt;span class=&quot;string&quot;&gt;&quot;A   B,C,E,D,...,S&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;A#B&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;Output&lt;/span&gt; value: &lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; 或者 &lt;span class=&quot;string&quot;&gt;&quot;@&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好吧，这样终于可行了，结果也是对的，但是结果却并让人高兴不起来，因为效率上并没有提升，反而比读三次磁盘的方法慢得多，跑了将近11分钟！这也太诡异了。绝对还有什么地方不对，再想想。其实我们没有注意到到底是不是并行在做？查找资料得知，hadoop mapreduce每个作业如果没有配置map,reduce数的话，默认map任务数是2，而默认reduce数为1！这能行？这还叫并行？全挤到一两个reduce task去做，能不慢么？&lt;br&gt;于是看看哪些地方可以增加reduce数。可以看到，第一种方法的GraphUndirecter虽然reduce数为0，但是TilingGraph的reduce是可以许多节点来做的，我们把numReduceTasks设为4，或者6，然后这个reduce数一般就是下一步的map数，然后最后FeedAndCount由于需要计算总数，所以必须一个reduce节点来做。所以总的来说，我们可以把中间步用多个reduce task来做。&lt;br&gt;同样的，尝试二的方法也可以在GraphUndirecterAndTiling步多设几个reduce来做。&lt;/p&gt;
&lt;h3 id=&quot;此时的程序性能&quot;&gt;&lt;a href=&quot;#此时的程序性能&quot; class=&quot;headerlink&quot; title=&quot;此时的程序性能&quot;&gt;&lt;/a&gt;此时的程序性能&lt;/h3&gt;&lt;p&gt;最终采用了尝试二中的方法，两个job完成这个工作，跑了以下2个数据集，效果勉强还可以。大概是4分钟跑完twitter数据集，比原来缩短一倍，跑Google+数据集也比一开始跑的20+个小时缩短到了13个小时。但是显然，这还不够快！天下武功，唯快不破。继续优化吧。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;数据集&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;三角形个数&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Driver程序在集群上的运行时间（s）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Twitter&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;13082506&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;247&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Google+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1073677742&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;47760&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;继续优化&quot;&gt;&lt;a href=&quot;#继续优化&quot; class=&quot;headerlink&quot; title=&quot;继续优化&quot;&gt;&lt;/a&gt;继续优化&lt;/h2&gt;&lt;p&gt;由上面的尝试二，这里又有了启发，我们可以看到，最后一步由1个reduce去统计和求和，这里要求总数的话又必须只让一个reduce来做，鸭梨不要太大，可以看到他做的两个工作实际上差异很大，一个是要扫描统计多少需要，另一个只要简单加和一下就行了，为了减轻该同志的鸭梨，那么我们再造一个job，把这两个工作分开是不是会快一点呢。猜测得到了证实，确实是可以的！意思就是，前面第三个job只统计求局部和（有一个扫描过程），这样的话我们可以搞很多reduce来做局部统计求和，然后把它们存到中间文件，最后由job4来对所有这些数求和，因为最后一步就是发射求和，所以时间远比统计来得快。&lt;br&gt;所以最终的JOB工作分配如下：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JOB1：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;Key&lt;/span&gt;: 输入文件的行偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;Value&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;A B&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Output &lt;span class=&quot;attribute&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Output &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;B,C,E,D,...,S&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JOB2：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;Key&lt;/span&gt;: 输入文件的行偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;Value&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;A   B,C,E,D,...,S&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;MapOutputKey&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;A#B&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;MapOutputValue&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;(have) 或者 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;(need)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Output &lt;span class=&quot;attribute&quot;&gt;key&lt;/span&gt;: NULL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Output &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;: 三角形个数(局部)    &lt;span class=&quot;comment&quot;&gt;//这里做成VIntWritable类型，把单个字符的2个字节空间做成1个字节的VIntWritable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;JOB3&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;key&lt;/span&gt;: 中间文件的行偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;Value&lt;/span&gt;: 三角形个数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;OutputKey&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Total Triangles: &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;OutputValue&lt;/span&gt;: 三角形总数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终算法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GraphUndirecterAndTiling&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key, &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    B = &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; A != B:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        emit(As, Bs)  &lt;span class=&quot;comment&quot;&gt;// As = min(A, B), Bs = max(A,B)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key, values&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;emit&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key, &lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt;(values&lt;/span&gt;))   &lt;span class=&quot;comment&quot;&gt;// A    B,C,D...,S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;JustCount&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;, value):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; val &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; value.&lt;span class=&quot;built_in&quot;&gt;split&lt;/span&gt;(&#39;,&#39;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        emit(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;#val, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)    // 供给&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; value.&lt;span class=&quot;built_in&quot;&gt;split&lt;/span&gt;(&#39;,&#39;) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; i &amp;lt; j:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        emit(Vs1#Vs2, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)    // 需求 Vs1 = &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;[i], &lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;[j]), Vs2 = &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;[i], &lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void reduce(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int have = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, need = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, res = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (val : &lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (val.equals(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            have++;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (val.equals(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            need++;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (jin &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) res += need;  // 如果有（have），则统计need个三角形&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; res &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        write(res)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;CollectSum&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;, value):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    emit(&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt;, value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void reduce(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; val &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;values&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;sum&lt;/span&gt; += val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    write(&lt;span class=&quot;string&quot;&gt;&quot;Total Triangles: &quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;sum&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;TCDriver&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GraphUndirecterAndTiling&lt;span class=&quot;selector-class&quot;&gt;.main&lt;/span&gt;(new String&lt;span class=&quot;selector-attr&quot;&gt;[]&lt;/span&gt;&amp;#123;myArgs&lt;span class=&quot;selector-attr&quot;&gt;[0]&lt;/span&gt;, myArgs&lt;span class=&quot;selector-attr&quot;&gt;[1]&lt;/span&gt;, myArgs&lt;span class=&quot;selector-attr&quot;&gt;[4]&lt;/span&gt;&amp;#125;);  &lt;span class=&quot;comment&quot;&gt;// input -&amp;gt; middle1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// myArgs[4] is numReduceTasks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JustCount&lt;span class=&quot;selector-class&quot;&gt;.main&lt;/span&gt;(new String&lt;span class=&quot;selector-attr&quot;&gt;[]&lt;/span&gt;&amp;#123;myArgs&lt;span class=&quot;selector-attr&quot;&gt;[1]&lt;/span&gt;, myArgs&lt;span class=&quot;selector-attr&quot;&gt;[2]&lt;/span&gt;, myArgs&lt;span class=&quot;selector-attr&quot;&gt;[4]&lt;/span&gt;&amp;#125;);     &lt;span class=&quot;comment&quot;&gt;// middle1 -&amp;gt; middle2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CollectSum&lt;span class=&quot;selector-class&quot;&gt;.main&lt;/span&gt;(new String&lt;span class=&quot;selector-attr&quot;&gt;[]&lt;/span&gt;&amp;#123;myArgs&lt;span class=&quot;selector-attr&quot;&gt;[2]&lt;/span&gt;, myArgs&lt;span class=&quot;selector-attr&quot;&gt;[3]&lt;/span&gt;&amp;#125;);    &lt;span class=&quot;comment&quot;&gt;// middle2 -&amp;gt; output&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;程序性能分析&quot;&gt;&lt;a href=&quot;#程序性能分析&quot; class=&quot;headerlink&quot; title=&quot;程序性能分析&quot;&gt;&lt;/a&gt;程序性能分析&lt;/h2&gt;&lt;p&gt;最终程序性能得到了很大的提高，耗时如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;数据集&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;三角形个数&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Driver程序在集群上的运行时间（s）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Twitter&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;13082506&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;108&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Google+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1073677742&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;01:54:28 (6868s)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;效果还是挺不错的，不到两分钟完成了31M twitter数据集的统计，不到两个小时完成了Google+ 570多M的数据统计，可能也跟集群当前的负载有关系，集群负载轻的时候应该会快一些，较前面的方法提升了两倍和6倍多，并且结果也是对的，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/twitterandgplus.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里的算法和reduce数还是可以调整的，并且在某些条件下，应该还是能够进一步优化下去的。没有最快，只有更快，但是由于时间关系，就不继续探索下去了，读者自探，欢迎留言评论。&lt;/p&gt;
&lt;h2 id=&quot;后话&quot;&gt;&lt;a href=&quot;#后话&quot; class=&quot;headerlink&quot; title=&quot;后话&quot;&gt;&lt;/a&gt;后话&lt;/h2&gt;&lt;p&gt;这里由于想进行大量的优化，所以用到了一些技巧，也是从别人那里学来的，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在在乎网络传输的时候，可适当使用压缩（我没用）&lt;/li&gt;
&lt;li&gt;重用Writable类型。 各类Writable占用空间如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsl28.com1.z0.glb.clouddn.com/writable.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Text类采用的UTF-8编码，使用变长的1～4个字节对字符进行编码。对于ASCII字符只使用1个字节，而对于High ASCII和多字节字符使用2～4个字节表示，而不像Java基本Character类的UTF-16编码，每个字符用两个字节表示。所以注意，IntWritable是固定4个字节存储的，比一个字符存储量大，所以如果一个字符能表示，那么就用一个字符，如果不能用一个字符，那么可以考虑VIntWritable类型，VIntWritable类型则根据数值的大小使用相应的字节长度表示，当数值在-112～127之间时使用1个字节表示，在-112～127范围之外的数值使用头一个字节表示该数值的正负符号以及字节长度（zero-compressed encoded integer）。&lt;br&gt;IntWritable适合数值均匀分布的情形，而变长的Writable类型适合数值分布不均匀的情形，一般情况下变长的Writable类型更节省空间，因为大多数情况下数值是不均匀的，对于整数类型的Writable选择，Zhou’s Blog建议：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;除非对数据的均匀分布很有把握，否则使用变长Writable类型&lt;/li&gt;
&lt;li&gt;除非数据的取值区间确定在int范围之内，否则为了程序的可扩展性，请选择VLongWritable类型&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以多使用VIntWritable, VLongWritable类型也不失一种好的选择。当然，能用一个ASCII字符表示那就用Text也就行了。&lt;/p&gt;
&lt;p&gt;所以这里面还是有很多学问的。&lt;/p&gt;
&lt;h2 id=&quot;References-amp-Links&quot;&gt;&lt;a href=&quot;#References-amp-Links&quot; class=&quot;headerlink&quot; title=&quot;References &amp;amp; Links&quot;&gt;&lt;/a&gt;References &amp;amp; Links&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;《Mining of Massive Datasets》 2.Ed&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatbeg/TriangleCounting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code on my Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cs.utah.edu/~jeffp/teaching/MCMD/S16-MR-triangles.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;L16: Counting Triangles in MapReduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vertica/Graph-Analytics----Triangle-Counting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Graph-Analytics—-Triangle-Counting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://i11www.iti.uni-karlsruhe.de/extra/publications/sw-fclt-05_wea.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Finding, Counting and Listing all Triangles inLarge Graphs, An Experimental Study?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dl2.iteye.com/upload/attachment/0061/9798/27cf0ab8-4e6d-3fff-bfc8-05cc51f985f4.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MapReduce Performance Tuning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sandia.gov/~tgkolda/pubs/pubfiles/KoPiPlSeTa14.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;COUNTING TRIANGLES IN MASSIVE GRAPHS WITH MAPREDUCE∗&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yoyzhou.github.io/blog/2013/05/10/hadoop-serialization-and-writable-object-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hadoop序列化与Writable接口(二)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://chato.cl/papers/becchetti_2007_approximate_count_triangles.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Efficient Semi-streaming Algorithms for Local Triangle Counting in Massive Graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/yangjl38/article/details/7583374&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hadoop 三个文件默认配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://monkey-h.github.io/blog/hadoop-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图的三角形计数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://islab.kaist.ac.kr/chungcw/InterConfPapers/km0805-ha-myung.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;An Efficient MapReduce Algorithm for Counting Triangles in a Very Large Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apache/spark/blob/master/graphx/src/main/scala/org/apache/spark/graphx/lib/TriangleCount.scala&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spark Triangle Count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BladeMasterCoder/TriangleCount&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Triangle Count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/jianjian1992/article/details/45625339&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hadoop编程—-寻找社交网络图中的三角关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://repository.cmu.edu/cgi/viewcontent.cgi?article=2120&amp;amp;context=compsci&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Approximate Triangle Counting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://people.seas.harvard.edu/~babis/int-math-triangles.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Efficient Triangle Counting in Large Graphs via Degree-based Vertex Partitioning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h2&gt;&lt;p&gt;图的三角形计数问题是一个基本的图计算问题，是很多复杂网络分析（比如社交网络分析）的基础。&lt;b
    
    </summary>
    
      <category term="大数据系统与技术 | Big Data" scheme="http://whatbeg.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%8A%80%E6%9C%AF-Big-Data/"/>
    
    
      <category term="Hadoop" scheme="http://whatbeg.com/tags/Hadoop/"/>
    
  </entry>
  
</feed>
